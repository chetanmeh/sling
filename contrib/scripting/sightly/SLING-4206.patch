From d554d612423a2a95c679b270abbc961571e7e51a Mon Sep 17 00:00:00 2001
From: Radu Cotescu <radu@apache.org>
Date: Thu, 27 Nov 2014 18:02:21 +0200
Subject: [PATCH] SLING-4206 - [Sightly Engine] Refactor the Sightly Engine API

* refactored exported API to expose only the bare minimum
* refactored implementation to remove unneeded abstractions
---
 contrib/scripting/sightly/engine/pom.xml           |   3 -
 .../sling/parser/expr/generated/SightlyLexer.g4    | 120 -----
 .../sling/parser/expr/generated/SightlyParser.g4   | 139 ------
 .../impl/parser/expr/generated/SightlyLexer.g4     | 120 +++++
 .../impl/parser/expr/generated/SightlyParser.g4    | 139 ++++++
 .../org/apache/sling/scripting/sightly/Record.java |  47 ++
 .../scripting/sightly/ResourceResolution.java      | 176 +++++++
 .../sling/scripting/sightly/SightlyException.java  |  42 ++
 .../scripting/sightly/api/BaseRenderUnit.java      | 144 ------
 .../scripting/sightly/api/ExtensionInstance.java   |  36 --
 .../sling/scripting/sightly/api/ObjectModel.java   | 111 -----
 .../scripting/sightly/api/ProviderOutcome.java     |  95 ----
 .../apache/sling/scripting/sightly/api/Record.java |  47 --
 .../sling/scripting/sightly/api/RenderContext.java | 111 -----
 .../sling/scripting/sightly/api/RenderUnit.java    |  39 --
 .../scripting/sightly/api/ResourceResolution.java  | 179 -------
 .../scripting/sightly/api/RuntimeExtension.java    |  41 --
 .../sightly/api/RuntimeExtensionComponent.java     |  65 ---
 .../sightly/api/RuntimeExtensionException.java     |  41 --
 .../sightly/api/SightlyEngineException.java        |  40 --
 .../sightly/api/SightlyParsingException.java       |  57 ---
 .../sightly/api/SightlyRenderException.java        |  41 --
 .../scripting/sightly/api/SightlyRuntime.java      |  40 --
 .../scripting/sightly/api/SightlyUseException.java |  40 --
 .../sling/scripting/sightly/api/StackedWriter.java |  83 ----
 .../sling/scripting/sightly/api/UnitLocator.java   |  37 --
 .../apache/sling/scripting/sightly/api/Use.java    |  30 --
 .../sling/scripting/sightly/api/UseProvider.java   |  51 --
 .../sightly/api/UseProviderComponent.java          |  73 ---
 .../sling/scripting/sightly/api/package-info.java  |  22 -
 .../sling/scripting/sightly/common/Dynamic.java    | 203 --------
 .../scripting/sightly/common/ObjectModelImpl.java  | 406 ----------------
 .../sightly/common/SightlyRuntimeImpl.java         |  71 ---
 .../scripting/sightly/compiled/CodeGenVisitor.java | 277 -----------
 .../sightly/compiled/CompilationOutput.java        |  44 --
 .../sightly/compiled/ExpressionTranslator.java     | 192 --------
 .../scripting/sightly/compiled/GenHelper.java      | 117 -----
 .../sightly/compiled/JavaClassBackend.java         |  51 --
 .../scripting/sightly/compiled/JavaSource.java     | 264 -----------
 .../sightly/compiled/SourceGenConstants.java       |  61 ---
 .../sling/scripting/sightly/compiled/Type.java     |  48 --
 .../scripting/sightly/compiled/TypeInference.java  | 159 -------
 .../sling/scripting/sightly/compiled/TypeInfo.java |  50 --
 .../scripting/sightly/compiled/UnitBuilder.java    |  65 ---
 .../sightly/compiled/VariableAnalyzer.java         | 223 ---------
 .../sightly/compiled/VariableDescriptor.java       | 107 -----
 .../scripting/sightly/compiled/VariableScope.java  |  27 --
 .../sightly/compiled/operator/BinaryOpGen.java     |  36 --
 .../sightly/compiled/operator/ComparisonOpGen.java |  87 ----
 .../compiled/operator/ConcatenateOpGen.java        |  48 --
 .../compiled/operator/EquivalenceOpGen.java        |  91 ----
 .../sightly/compiled/operator/IsWhiteSpaceGen.java |  55 ---
 .../sightly/compiled/operator/LengthOpGen.java     |  51 --
 .../sightly/compiled/operator/LogicalOpGen.java    |  83 ----
 .../sightly/compiled/operator/LongOpGen.java       |  38 --
 .../sightly/compiled/operator/NotOpGen.java        |  47 --
 .../sightly/compiled/operator/NumericOpGen.java    |  58 ---
 .../sightly/compiled/operator/OpHelper.java        |  40 --
 .../sightly/compiled/operator/Operators.java       |  88 ----
 .../sightly/compiled/operator/StrictEqGenOp.java   |  57 ---
 .../sightly/compiled/operator/TypedNode.java       |  45 --
 .../sightly/compiled/operator/UnaryOpGen.java      |  35 --
 .../scripting/sightly/compiler/BaseCompiler.java   |  61 ---
 .../sightly/compiler/CompilerBackend.java          |  35 --
 .../sightly/compiler/CompilerException.java        |  38 --
 .../sightly/compiler/CompilerFrontend.java         |  35 --
 .../sightly/compiler/SightlyCompileService.java    |  55 ---
 .../compiler/SightlyCompileServiceImpl.java        | 298 ------------
 .../sightly/compiler/SightlyCompilerImpl.java      | 210 ---------
 .../sling/scripting/sightly/compiler/Syntax.java   |  80 ----
 .../sightly/compiler/api/CompilerException.java    |  41 --
 .../scripting/sightly/compiler/api/Filter.java     |  46 --
 .../sightly/compiler/api/MarkupHandler.java        |  82 ----
 .../sightly/compiler/api/MarkupParser.java         |  36 --
 .../sightly/compiler/api/SightlyCompiler.java      |  36 --
 .../compiler/api/expression/Expression.java        | 106 -----
 .../compiler/api/expression/ExpressionNode.java    |  32 --
 .../compiler/api/expression/NodeVisitor.java       |  65 ---
 .../compiler/api/expression/node/ArrayLiteral.java |  47 --
 .../sightly/compiler/api/expression/node/Atom.java |  36 --
 .../api/expression/node/BinaryOperation.java       |  66 ---
 .../api/expression/node/BinaryOperator.java        |  46 --
 .../api/expression/node/BooleanConstant.java       |  66 ---
 .../compiler/api/expression/node/Identifier.java   |  64 ---
 .../compiler/api/expression/node/MapLiteral.java   |  65 ---
 .../compiler/api/expression/node/NullLiteral.java  |  38 --
 .../api/expression/node/NumericConstant.java       |  80 ----
 .../api/expression/node/PropertyAccess.java        |  99 ----
 .../compiler/api/expression/node/RuntimeCall.java  |  67 ---
 .../api/expression/node/StringConstant.java        |  61 ---
 .../api/expression/node/TernaryOperator.java       |  65 ---
 .../api/expression/node/UnaryOperation.java        |  58 ---
 .../api/expression/node/UnaryOperator.java         |  28 --
 .../compiler/api/plugin/CompilerContext.java       |  44 --
 .../sightly/compiler/api/plugin/MarkupContext.java |  71 ---
 .../sightly/compiler/api/plugin/Plugin.java        |  54 ---
 .../compiler/api/plugin/PluginCallInfo.java        |  49 --
 .../compiler/api/plugin/PluginException.java       |  36 --
 .../sightly/compiler/api/plugin/PluginInvoke.java  |  62 ---
 .../sightly/compiler/api/ris/Command.java          |  32 --
 .../sightly/compiler/api/ris/CommandHandler.java   |  44 --
 .../sightly/compiler/api/ris/CommandStream.java    |  32 --
 .../sightly/compiler/api/ris/CommandVisitor.java   |  61 ---
 .../compiler/api/ris/command/BufferControl.java    |  69 ---
 .../compiler/api/ris/command/Conditional.java      |  79 ----
 .../sightly/compiler/api/ris/command/Loop.java     |  88 ----
 .../sightly/compiler/api/ris/command/OutText.java  |  52 ---
 .../compiler/api/ris/command/OutVariable.java      |  52 ---
 .../sightly/compiler/api/ris/command/Patterns.java |  51 --
 .../compiler/api/ris/command/Procedure.java        |  96 ----
 .../compiler/api/ris/command/VariableBinding.java  | 105 -----
 .../compiler/common/DefaultPluginInvoke.java       | 111 -----
 .../sightly/compiler/debug/LoggingHandler.java     |  55 ---
 .../sightly/compiler/debug/SanityChecker.java      | 167 -------
 .../compiler/frontend/AggregatePluginInvoke.java   | 153 ------
 .../compiler/frontend/DefaultCompilerContext.java  |  58 ---
 .../sightly/compiler/frontend/ElementContext.java  | 106 -----
 .../compiler/frontend/ExpressionParser.java        |  40 --
 .../compiler/frontend/ExpressionParserImpl.java    |  47 --
 .../compiler/frontend/ExpressionWrapper.java       | 122 -----
 .../sightly/compiler/frontend/Fragment.java        | 106 -----
 .../sightly/compiler/frontend/Interpolation.java   |  79 ----
 .../compiler/frontend/MarkupHandlerImpl.java       | 405 ----------------
 .../sightly/compiler/frontend/ParserException.java |  41 --
 .../sightly/compiler/frontend/ParserHelper.java    |  42 --
 .../frontend/SightlyParserErrorListener.java       |  53 ---
 .../sightly/compiler/frontend/SimpleFrontend.java  |  58 ---
 .../compiler/optimization/CoalescingWrites.java    |  88 ----
 .../optimization/CommandVariableUsage.java         | 116 -----
 .../compiler/optimization/DeadCodeRemoval.java     | 149 ------
 .../optimization/SequenceStreamTransformer.java    |  46 --
 .../compiler/optimization/StreamTransformer.java   |  36 --
 .../compiler/optimization/SyntheticMapRemoval.java | 166 -------
 .../optimization/UnusedVariableRemoval.java        | 161 -------
 .../compiler/optimization/VariableFinder.java      | 132 ------
 .../optimization/reduce/ConstantFolding.java       | 105 -----
 .../compiler/optimization/reduce/EvalResult.java   | 113 -----
 .../optimization/reduce/ExpressionReducer.java     | 248 ----------
 .../compiler/util/GlobalShadowCheckBackend.java    |  46 --
 .../sightly/compiler/util/GlobalShadowChecker.java | 128 -----
 .../sightly/compiler/util/SymbolGenerator.java     |  48 --
 .../sightly/compiler/util/VariableTracker.java     | 148 ------
 .../util/expression/HomogenousNodeVisitor.java     | 106 -----
 .../compiler/util/expression/NodeTransformer.java  | 129 ------
 .../util/expression/SideEffectVisitor.java         | 138 ------
 .../compiler/util/stream/BroadcastHandler.java     |  64 ---
 .../compiler/util/stream/EmitterVisitor.java       |  36 --
 .../sightly/compiler/util/stream/PushStream.java   |  80 ----
 .../sightly/compiler/util/stream/ReplayStream.java |  47 --
 .../sightly/compiler/util/stream/Streams.java      |  59 ---
 .../compiler/util/stream/VisitorHandler.java       |  53 ---
 .../sightly/compiler/visitor/IgnoreRange.java      |  53 ---
 .../sightly/compiler/visitor/StateControl.java     |  49 --
 .../compiler/visitor/StatefulRangeIgnore.java      |  42 --
 .../sightly/compiler/visitor/StatefulVisitor.java  | 173 -------
 .../sightly/compiler/visitor/TrackingVisitor.java  |  71 ---
 .../sightly/compiler/visitor/UniformVisitor.java   | 109 -----
 .../sightly/engine/ExtensionRegistryService.java   |  36 --
 .../engine/ExtensionRegistryServiceImpl.java       |  89 ----
 .../engine/SightlyBindingsValuesProvider.java      |  53 ---
 .../sightly/engine/SightlyEngineConfiguration.java | 108 -----
 .../sightly/engine/SightlyScriptEngine.java        | 183 --------
 .../sightly/engine/SightlyScriptEngineFactory.java | 116 -----
 .../sling/scripting/sightly/engine/UnitLoader.java |  42 --
 .../sightly/engine/compiled/ClassUnitLoader.java   | 440 ------------------
 .../sightly/engine/compiled/JavaClassTemplate.java |  70 ---
 .../sightly/engine/compiled/SourceIdentifier.java  | 105 -----
 .../engine/extension/I18nRuntimeExtension.java     | 103 -----
 .../engine/extension/IncludeRuntimeExtension.java  | 133 ------
 .../extension/PrintWriterResponseWrapper.java      |  50 --
 .../engine/extension/ResourceRuntimeExtension.java | 243 ----------
 .../engine/extension/XSSRuntimeExtension.java      | 242 ----------
 .../engine/extension/use/ClassUseProvider.java     | 108 -----
 .../engine/extension/use/PojoUseProvider.java      |  80 ----
 .../engine/extension/use/RenderUnitProvider.java   |  55 ---
 .../engine/extension/use/ScriptEvalUtils.java      |  64 ---
 .../engine/extension/use/ScriptUseProvider.java    | 115 -----
 .../engine/extension/use/UseRuntimeExtension.java  | 108 -----
 .../sightly/engine/runtime/UnitLocatorImpl.java    |  71 ---
 .../sightly/extension/ExtensionInstance.java       |  36 ++
 .../sightly/extension/RuntimeExtension.java        |  39 ++
 .../extension/RuntimeExtensionException.java       |  43 ++
 .../scripting/sightly/extension/package-info.java  |  22 +
 .../scripting/sightly/filter/FilterComponent.java  |  61 ---
 .../scripting/sightly/filter/FormatFilter.java     | 125 -----
 .../sling/scripting/sightly/filter/I18nFilter.java |  68 ---
 .../sling/scripting/sightly/filter/JoinFilter.java | 102 ----
 .../sling/scripting/sightly/filter/XSSFilter.java  |  57 ---
 .../sling/scripting/sightly/html/MarkupUtils.java  |  40 --
 .../scripting/sightly/html/dom/AttributeList.java  |  93 ----
 .../sightly/html/dom/DocumentHandler.java          |  62 ---
 .../scripting/sightly/html/dom/HtmlParser.java     | 468 -------------------
 .../sightly/html/dom/HtmlParserService.java        |  58 ---
 .../scripting/sightly/html/dom/TagTokenizer.java   | 514 ---------------------
 .../scripting/sightly/html/dom/TreeTraverser.java  | 100 ----
 .../sightly/html/dom/template/Template.java        |  27 --
 .../html/dom/template/TemplateAttribute.java       |  43 --
 .../html/dom/template/TemplateCommentNode.java     |  32 --
 .../html/dom/template/TemplateElementNode.java     |  81 ----
 .../sightly/html/dom/template/TemplateNode.java    |  23 -
 .../sightly/html/dom/template/TemplateParser.java  | 139 ------
 .../html/dom/template/TemplateTextNode.java        |  32 --
 .../sightly/impl/compiled/CompilationOutput.java   |  44 ++
 .../impl/compiled/ExpressionTranslator.java        | 185 ++++++++
 .../scripting/sightly/impl/compiled/GenHelper.java | 112 +++++
 .../sightly/impl/compiled/JavaClassBackend.java    |  51 ++
 .../sightly/impl/compiled/JavaSource.java          | 264 +++++++++++
 .../sightly/impl/compiled/SourceGenConstants.java  |  53 +++
 .../scripting/sightly/impl/compiled/Type.java      |  48 ++
 .../sightly/impl/compiled/TypeInference.java       | 158 +++++++
 .../scripting/sightly/impl/compiled/TypeInfo.java  |  49 ++
 .../sightly/impl/compiled/UnitBuilder.java         |  65 +++
 .../sightly/impl/compiled/VariableAnalyzer.java    | 222 +++++++++
 .../sightly/impl/compiled/VariableDescriptor.java  | 107 +++++
 .../sightly/impl/compiled/VariableScope.java       |  27 ++
 .../impl/compiled/operator/BinaryOpGen.java        |  35 ++
 .../impl/compiled/operator/ComparisonOpGen.java    |  84 ++++
 .../impl/compiled/operator/ConcatenateOpGen.java   |  48 ++
 .../impl/compiled/operator/EquivalenceOpGen.java   |  91 ++++
 .../impl/compiled/operator/IsWhiteSpaceGen.java    |  51 ++
 .../impl/compiled/operator/LengthOpGen.java        |  48 ++
 .../impl/compiled/operator/LogicalOpGen.java       |  80 ++++
 .../sightly/impl/compiled/operator/LongOpGen.java  |  37 ++
 .../sightly/impl/compiled/operator/NotOpGen.java   |  47 ++
 .../impl/compiled/operator/NumericOpGen.java       |  57 +++
 .../sightly/impl/compiled/operator/OpHelper.java   |  39 ++
 .../sightly/impl/compiled/operator/Operators.java  |  88 ++++
 .../impl/compiled/operator/StrictEqGenOp.java      |  54 +++
 .../sightly/impl/compiled/operator/TypedNode.java  |  44 ++
 .../sightly/impl/compiled/operator/UnaryOpGen.java |  35 ++
 .../sightly/impl/compiler/CompilerBackend.java     |  34 ++
 .../sightly/impl/compiler/CompilerException.java   |  38 ++
 .../sightly/impl/compiler/CompilerFrontend.java    |  35 ++
 .../impl/compiler/SightlyCompilerService.java      | 166 +++++++
 .../impl/compiler/SightlyJavaCompilerService.java  | 322 +++++++++++++
 .../impl/compiler/SightlyParsingException.java     |  59 +++
 .../scripting/sightly/impl/compiler/Syntax.java    |  79 ++++
 .../impl/compiler/common/DefaultPluginInvoke.java  | 108 +++++
 .../impl/compiler/debug/LoggingHandler.java        |  52 +++
 .../sightly/impl/compiler/debug/SanityChecker.java | 147 ++++++
 .../impl/compiler/expression/Expression.java       | 106 +++++
 .../impl/compiler/expression/ExpressionNode.java   |  32 ++
 .../impl/compiler/expression/NodeVisitor.java      |  64 +++
 .../compiler/expression/node/ArrayLiteral.java     |  47 ++
 .../impl/compiler/expression/node/Atom.java        |  36 ++
 .../compiler/expression/node/BinaryOperation.java  |  66 +++
 .../compiler/expression/node/BinaryOperator.java   | 218 +++++++++
 .../compiler/expression/node/BooleanConstant.java  |  65 +++
 .../impl/compiler/expression/node/Identifier.java  |  64 +++
 .../impl/compiler/expression/node/MapLiteral.java  |  65 +++
 .../impl/compiler/expression/node/NullLiteral.java |  38 ++
 .../compiler/expression/node/NumericConstant.java  |  80 ++++
 .../compiler/expression/node/PropertyAccess.java   |  99 ++++
 .../impl/compiler/expression/node/RuntimeCall.java |  67 +++
 .../compiler/expression/node/StringConstant.java   |  61 +++
 .../compiler/expression/node/TernaryOperator.java  |  65 +++
 .../compiler/expression/node/UnaryOperation.java   |  58 +++
 .../compiler/expression/node/UnaryOperator.java    |  57 +++
 .../compiler/frontend/AggregatePluginInvoke.java   | 151 ++++++
 .../impl/compiler/frontend/CompilerContext.java    |  51 ++
 .../impl/compiler/frontend/ElementContext.java     | 106 +++++
 .../impl/compiler/frontend/ExpressionParser.java   |  55 +++
 .../impl/compiler/frontend/ExpressionWrapper.java  | 118 +++++
 .../sightly/impl/compiler/frontend/Fragment.java   | 106 +++++
 .../impl/compiler/frontend/Interpolation.java      |  78 ++++
 .../impl/compiler/frontend/ParserException.java    |  41 ++
 .../impl/compiler/frontend/ParserHelper.java       |  40 ++
 .../frontend/SightlyParserErrorListener.java       |  52 +++
 .../impl/compiler/frontend/SimpleFrontend.java     |  57 +++
 .../compiler/optimization/CoalescingWrites.java    |  86 ++++
 .../optimization/CommandVariableUsage.java         | 106 +++++
 .../compiler/optimization/DeadCodeRemoval.java     | 136 ++++++
 .../optimization/SequenceStreamTransformer.java    |  46 ++
 .../compiler/optimization/StreamTransformer.java   |  36 ++
 .../compiler/optimization/SyntheticMapRemoval.java | 161 +++++++
 .../optimization/UnusedVariableRemoval.java        | 161 +++++++
 .../impl/compiler/optimization/VariableFinder.java | 128 +++++
 .../optimization/reduce/ConstantFolding.java       |  95 ++++
 .../compiler/optimization/reduce/EvalResult.java   | 110 +++++
 .../optimization/reduce/ExpressionReducer.java     | 212 +++++++++
 .../sightly/impl/compiler/ris/Command.java         |  32 ++
 .../sightly/impl/compiler/ris/CommandHandler.java  |  44 ++
 .../sightly/impl/compiler/ris/CommandStream.java   |  32 ++
 .../sightly/impl/compiler/ris/CommandVisitor.java  |  56 +++
 .../impl/compiler/ris/command/Conditional.java     |  77 +++
 .../sightly/impl/compiler/ris/command/Loop.java    |  86 ++++
 .../sightly/impl/compiler/ris/command/OutText.java |  50 ++
 .../impl/compiler/ris/command/OutVariable.java     |  50 ++
 .../impl/compiler/ris/command/Patterns.java        |  51 ++
 .../impl/compiler/ris/command/Procedure.java       |  94 ++++
 .../impl/compiler/ris/command/VariableBinding.java | 103 +++++
 .../compiler/util/GlobalShadowCheckBackend.java    |  46 ++
 .../impl/compiler/util/GlobalShadowChecker.java    | 114 +++++
 .../impl/compiler/util/SymbolGenerator.java        |  45 ++
 .../impl/compiler/util/VariableTracker.java        | 148 ++++++
 .../util/expression/HomogenousNodeVisitor.java     | 103 +++++
 .../compiler/util/expression/NodeTransformer.java  | 125 +++++
 .../util/expression/SideEffectVisitor.java         | 137 ++++++
 .../compiler/util/stream/BroadcastHandler.java     |  62 +++
 .../impl/compiler/util/stream/EmitterVisitor.java  |  35 ++
 .../impl/compiler/util/stream/PushStream.java      |  78 ++++
 .../impl/compiler/util/stream/ReplayStream.java    |  45 ++
 .../sightly/impl/compiler/util/stream/Streams.java |  58 +++
 .../impl/compiler/util/stream/VisitorHandler.java  |  50 ++
 .../impl/compiler/visitor/CodeGenVisitor.java      | 263 +++++++++++
 .../sightly/impl/compiler/visitor/IgnoreRange.java |  52 +++
 .../impl/compiler/visitor/StatefulRangeIgnore.java |  41 ++
 .../impl/compiler/visitor/StatefulVisitor.java     | 156 +++++++
 .../impl/compiler/visitor/TrackingVisitor.java     |  61 +++
 .../impl/compiler/visitor/UniformVisitor.java      |  96 ++++
 .../impl/engine/ExtensionRegistryService.java      |  89 ++++
 .../impl/engine/SightlyBindingsValuesProvider.java |  53 +++
 .../impl/engine/SightlyEngineConfiguration.java    | 108 +++++
 .../sightly/impl/engine/SightlyScriptEngine.java   | 158 +++++++
 .../impl/engine/SightlyScriptEngineFactory.java    | 102 ++++
 .../scripting/sightly/impl/engine/UnitLoader.java  | 448 ++++++++++++++++++
 .../impl/engine/compiled/JavaClassTemplate.java    |  70 +++
 .../impl/engine/compiled/SourceIdentifier.java     | 105 +++++
 .../impl/engine/extension/ExtensionUtils.java      |  43 ++
 .../engine/extension/I18nRuntimeExtension.java     |  99 ++++
 .../engine/extension/IncludeRuntimeExtension.java  | 131 ++++++
 .../extension/PrintWriterResponseWrapper.java      |  50 ++
 .../engine/extension/ResourceRuntimeExtension.java | 241 ++++++++++
 .../impl/engine/extension/XSSRuntimeExtension.java | 239 ++++++++++
 .../engine/extension/use/ClassUseProvider.java     | 120 +++++
 .../impl/engine/extension/use/PojoUseProvider.java |  94 ++++
 .../engine/extension/use/RenderUnitProvider.java   | 105 +++++
 .../engine/extension/use/ScriptUseProvider.java    | 128 +++++
 .../engine/extension/use/UseProviderUtils.java     |  94 ++++
 .../engine/extension/use/UseRuntimeExtension.java  | 109 +++++
 .../impl/engine/runtime/RenderContextImpl.java     | 418 +++++++++++++++++
 .../sightly/impl/engine/runtime/RenderUnit.java    | 146 ++++++
 .../engine/runtime/SightlyRenderException.java     |  43 ++
 .../scripting/sightly/impl/filter/Filter.java      |  45 ++
 .../sightly/impl/filter/FilterComponent.java       |  58 +++
 .../sightly/impl/filter/FormatFilter.java          | 117 +++++
 .../scripting/sightly/impl/filter/I18nFilter.java  |  62 +++
 .../scripting/sightly/impl/filter/JoinFilter.java  |  89 ++++
 .../scripting/sightly/impl/filter/XSSFilter.java   |  52 +++
 .../scripting/sightly/impl/html/MarkupUtils.java   |  40 ++
 .../sightly/impl/html/dom/AttributeList.java       |  93 ++++
 .../sightly/impl/html/dom/DocumentHandler.java     |  62 +++
 .../sightly/impl/html/dom/HtmlParser.java          | 468 +++++++++++++++++++
 .../sightly/impl/html/dom/HtmlParserService.java   |  62 +++
 .../sightly/impl/html/dom/MarkupHandler.java       | 406 ++++++++++++++++
 .../sightly/impl/html/dom/TagTokenizer.java        | 514 +++++++++++++++++++++
 .../sightly/impl/html/dom/TreeTraverser.java       |  98 ++++
 .../sightly/impl/html/dom/template/Template.java   |  27 ++
 .../impl/html/dom/template/TemplateAttribute.java  |  43 ++
 .../html/dom/template/TemplateCommentNode.java     |  32 ++
 .../html/dom/template/TemplateElementNode.java     |  81 ++++
 .../impl/html/dom/template/TemplateNode.java       |  23 +
 .../impl/html/dom/template/TemplateParser.java     | 139 ++++++
 .../impl/html/dom/template/TemplateTextNode.java   |  32 ++
 .../sightly/impl/plugin/AttributePlugin.java       | 356 ++++++++++++++
 .../scripting/sightly/impl/plugin/CallPlugin.java  |  75 +++
 .../sightly/impl/plugin/ElementPlugin.java         |  99 ++++
 .../sightly/impl/plugin/IncludePlugin.java         |  74 +++
 .../scripting/sightly/impl/plugin/ListPlugin.java  | 139 ++++++
 .../sightly/impl/plugin/MarkupContext.java         |  71 +++
 .../scripting/sightly/impl/plugin/Plugin.java      |  55 +++
 .../sightly/impl/plugin/PluginCallInfo.java        |  49 ++
 .../sightly/impl/plugin/PluginComponent.java       |  61 +++
 .../sightly/impl/plugin/PluginException.java       |  36 ++
 .../sightly/impl/plugin/PluginInvoke.java          |  60 +++
 .../sightly/impl/plugin/ResourcePlugin.java        |  78 ++++
 .../sightly/impl/plugin/TemplatePlugin.java        |  98 ++++
 .../scripting/sightly/impl/plugin/TestPlugin.java  |  86 ++++
 .../scripting/sightly/impl/plugin/TextPlugin.java  |  64 +++
 .../sightly/impl/plugin/UnwrapPlugin.java          |  93 ++++
 .../scripting/sightly/impl/plugin/UsePlugin.java   |  68 +++
 .../sling/scripting/sightly/package-info.java      |  22 +
 .../scripting/sightly/plugin/AttributePlugin.java  | 360 ---------------
 .../sling/scripting/sightly/plugin/CallPlugin.java |  87 ----
 .../scripting/sightly/plugin/ElementPlugin.java    | 113 -----
 .../scripting/sightly/plugin/IncludePlugin.java    |  90 ----
 .../sling/scripting/sightly/plugin/ListPlugin.java | 151 ------
 .../scripting/sightly/plugin/PluginComponent.java  |  64 ---
 .../scripting/sightly/plugin/ResourcePlugin.java   |  90 ----
 .../scripting/sightly/plugin/TemplatePlugin.java   | 111 -----
 .../sling/scripting/sightly/plugin/TestPlugin.java | 100 ----
 .../sling/scripting/sightly/plugin/TextPlugin.java |  72 ---
 .../scripting/sightly/plugin/UnwrapPlugin.java     | 106 -----
 .../sling/scripting/sightly/plugin/UsePlugin.java  |  76 ---
 .../apache/sling/scripting/sightly/pojo/Use.java   |  50 ++
 .../sling/scripting/sightly/pojo/package-info.java |  22 +
 .../scripting/sightly/render/RenderContext.java    | 105 +++++
 .../scripting/sightly/render/package-info.java     |  22 +
 .../scripting/sightly/use/ProviderOutcome.java     |  92 ++++
 .../scripting/sightly/use/SightlyUseException.java |  42 ++
 .../sling/scripting/sightly/use/UseProvider.java   |  44 ++
 .../sling/scripting/sightly/use/package-info.java  |  22 +
 .../resources/templates/compiled_unit_template.txt |  16 +-
 .../src/main/resources/templates/subtemplate.txt   |   8 +-
 contrib/scripting/sightly/js-use-provider/pom.xml  |   7 +
 .../apache/sling/scripting/sightly/js/Console.java |  49 --
 .../sling/scripting/sightly/js/JsEnvironment.java  | 174 -------
 .../sling/scripting/sightly/js/JsUseProvider.java  | 112 -----
 .../apache/sling/scripting/sightly/js/Utils.java   |  46 --
 .../sling/scripting/sightly/js/Variables.java      |  34 --
 .../scripting/sightly/js/async/AsyncContainer.java |  95 ----
 .../scripting/sightly/js/async/AsyncExtractor.java |  97 ----
 .../js/async/TimingBindingsValuesProvider.java     |  42 --
 .../scripting/sightly/js/async/TimingFunction.java |  55 ---
 .../scripting/sightly/js/async/UnaryCallback.java  |  31 --
 .../scripting/sightly/js/cjs/CommonJsModule.java   |  69 ---
 .../scripting/sightly/js/cjs/ExportsObject.java    |  46 --
 .../sling/scripting/sightly/js/impl/Console.java   |  49 ++
 .../scripting/sightly/js/impl/JsEnvironment.java   | 173 +++++++
 .../scripting/sightly/js/impl/JsUseProvider.java   | 125 +++++
 .../sling/scripting/sightly/js/impl/Utils.java     |  46 ++
 .../sling/scripting/sightly/js/impl/Variables.java |  34 ++
 .../sightly/js/impl/async/AsyncContainer.java      |  95 ++++
 .../sightly/js/impl/async/AsyncExtractor.java      |  96 ++++
 .../impl/async/TimingBindingsValuesProvider.java   |  41 ++
 .../sightly/js/impl/async/TimingFunction.java      |  54 +++
 .../sightly/js/impl/async/UnaryCallback.java       |  31 ++
 .../sightly/js/impl/cjs/CommonJsModule.java        |  69 +++
 .../sightly/js/impl/cjs/ExportsObject.java         |  46 ++
 .../js/impl/jsapi/SlyBindingsValuesProvider.java   | 315 +++++++++++++
 .../scripting/sightly/js/impl/loop/EventLoop.java  |  78 ++++
 .../sightly/js/impl/loop/EventLoopInterop.java     |  53 +++
 .../sling/scripting/sightly/js/impl/loop/Task.java |  43 ++
 .../sightly/js/impl/rhino/HybridObject.java        | 163 +++++++
 .../scripting/sightly/js/impl/rhino/JsUtils.java   |  46 ++
 .../sightly/js/impl/rhino/JsValueAdapter.java      | 164 +++++++
 .../sightly/js/impl/use/DependencyResolver.java    |  57 +++
 .../scripting/sightly/js/impl/use/UseFunction.java | 140 ++++++
 .../js/jsapi/SlyBindingsValuesProvider.java        | 314 -------------
 .../sling/scripting/sightly/js/loop/EventLoop.java |  78 ----
 .../sightly/js/loop/EventLoopInterop.java          |  53 ---
 .../sling/scripting/sightly/js/loop/Task.java      |  43 --
 .../scripting/sightly/js/rhino/HybridObject.java   | 163 -------
 .../sling/scripting/sightly/js/rhino/JsUtils.java  |  46 --
 .../scripting/sightly/js/rhino/JsValueAdapter.java | 165 -------
 .../sightly/js/use/DependencyResolver.java         |  58 ---
 .../scripting/sightly/js/use/UseFunction.java      | 140 ------
 437 files changed, 19390 insertions(+), 20794 deletions(-)
 delete mode 100644 contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyLexer.g4
 delete mode 100644 contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyParser.g4
 create mode 100644 contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyLexer.g4
 create mode 100644 contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyParser.g4
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/Record.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/ResourceResolution.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/SightlyException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/BaseRenderUnit.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ExtensionInstance.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ObjectModel.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ProviderOutcome.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Record.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderContext.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderUnit.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ResourceResolution.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtension.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionComponent.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyEngineException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyParsingException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRenderException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRuntime.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyUseException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/StackedWriter.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UnitLocator.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Use.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProvider.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProviderComponent.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/package-info.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/Dynamic.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/ObjectModelImpl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/SightlyRuntimeImpl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CodeGenVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CompilationOutput.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/ExpressionTranslator.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/GenHelper.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaClassBackend.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaSource.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/SourceGenConstants.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/Type.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInference.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInfo.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/UnitBuilder.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableAnalyzer.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableDescriptor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableScope.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/BinaryOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ComparisonOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ConcatenateOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/EquivalenceOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/IsWhiteSpaceGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LengthOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LogicalOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LongOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NotOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NumericOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/OpHelper.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/Operators.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/StrictEqGenOp.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/TypedNode.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/UnaryOpGen.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/BaseCompiler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerBackend.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerFrontend.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileService.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileServiceImpl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompilerImpl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/Syntax.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/CompilerException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/Filter.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupHandler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupParser.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/SightlyCompiler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/Expression.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/ExpressionNode.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/NodeVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/ArrayLiteral.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Atom.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperation.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperator.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BooleanConstant.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Identifier.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/MapLiteral.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NullLiteral.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NumericConstant.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/PropertyAccess.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/RuntimeCall.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/StringConstant.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/TernaryOperator.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperation.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperator.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/CompilerContext.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/MarkupContext.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/Plugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginCallInfo.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginInvoke.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/Command.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandHandler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandStream.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/BufferControl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Conditional.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Loop.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutText.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutVariable.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Patterns.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Procedure.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/VariableBinding.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/common/DefaultPluginInvoke.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/LoggingHandler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/SanityChecker.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/AggregatePluginInvoke.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/DefaultCompilerContext.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ElementContext.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParser.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParserImpl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionWrapper.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Fragment.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Interpolation.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/MarkupHandlerImpl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserException.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserHelper.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SightlyParserErrorListener.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SimpleFrontend.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CoalescingWrites.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CommandVariableUsage.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/DeadCodeRemoval.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SequenceStreamTransformer.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/StreamTransformer.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SyntheticMapRemoval.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/UnusedVariableRemoval.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/VariableFinder.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ConstantFolding.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/EvalResult.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ExpressionReducer.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowCheckBackend.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowChecker.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/SymbolGenerator.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/VariableTracker.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/HomogenousNodeVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/NodeTransformer.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/SideEffectVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/BroadcastHandler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/EmitterVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/PushStream.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/ReplayStream.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/Streams.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/VisitorHandler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/IgnoreRange.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StateControl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulRangeIgnore.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/TrackingVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/UniformVisitor.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryService.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryServiceImpl.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyBindingsValuesProvider.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyEngineConfiguration.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngine.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngineFactory.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/UnitLoader.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/ClassUnitLoader.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/JavaClassTemplate.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/SourceIdentifier.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/I18nRuntimeExtension.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/IncludeRuntimeExtension.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/PrintWriterResponseWrapper.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/ResourceRuntimeExtension.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/XSSRuntimeExtension.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ClassUseProvider.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/PojoUseProvider.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/RenderUnitProvider.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptEvalUtils.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptUseProvider.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/UseRuntimeExtension.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/runtime/UnitLocatorImpl.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/ExtensionInstance.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtension.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtensionException.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/package-info.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FilterComponent.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FormatFilter.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/I18nFilter.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/JoinFilter.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/XSSFilter.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/MarkupUtils.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/AttributeList.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/DocumentHandler.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParser.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParserService.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TagTokenizer.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TreeTraverser.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/Template.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateAttribute.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateCommentNode.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateElementNode.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateNode.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateParser.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateTextNode.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/CompilationOutput.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/ExpressionTranslator.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/GenHelper.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaClassBackend.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaSource.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/SourceGenConstants.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/Type.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInference.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInfo.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/UnitBuilder.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableAnalyzer.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableDescriptor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableScope.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/BinaryOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ComparisonOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ConcatenateOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/EquivalenceOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/IsWhiteSpaceGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LengthOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LogicalOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LongOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NotOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NumericOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/OpHelper.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/Operators.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/StrictEqGenOp.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/TypedNode.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/UnaryOpGen.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerBackend.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerException.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerFrontend.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyCompilerService.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyJavaCompilerService.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyParsingException.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/Syntax.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/common/DefaultPluginInvoke.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/LoggingHandler.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/SanityChecker.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/Expression.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/ExpressionNode.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/NodeVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/ArrayLiteral.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Atom.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperation.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperator.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BooleanConstant.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Identifier.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/MapLiteral.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NullLiteral.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NumericConstant.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/PropertyAccess.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/RuntimeCall.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/StringConstant.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/TernaryOperator.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperation.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperator.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/AggregatePluginInvoke.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/CompilerContext.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ElementContext.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionParser.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionWrapper.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Fragment.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Interpolation.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserException.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserHelper.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SightlyParserErrorListener.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SimpleFrontend.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CoalescingWrites.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CommandVariableUsage.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/DeadCodeRemoval.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SequenceStreamTransformer.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/StreamTransformer.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SyntheticMapRemoval.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/UnusedVariableRemoval.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/VariableFinder.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ConstantFolding.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/EvalResult.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ExpressionReducer.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/Command.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandHandler.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandStream.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Conditional.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Loop.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutText.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutVariable.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Patterns.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Procedure.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/VariableBinding.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowCheckBackend.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowChecker.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/SymbolGenerator.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/VariableTracker.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/HomogenousNodeVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/NodeTransformer.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/SideEffectVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/BroadcastHandler.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/EmitterVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/PushStream.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/ReplayStream.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/Streams.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/VisitorHandler.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/CodeGenVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/IgnoreRange.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulRangeIgnore.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/TrackingVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/UniformVisitor.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/ExtensionRegistryService.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyBindingsValuesProvider.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyEngineConfiguration.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngine.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngineFactory.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/UnitLoader.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/JavaClassTemplate.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/SourceIdentifier.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ExtensionUtils.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/I18nRuntimeExtension.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/IncludeRuntimeExtension.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/PrintWriterResponseWrapper.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ResourceRuntimeExtension.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/XSSRuntimeExtension.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ClassUseProvider.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/PojoUseProvider.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/RenderUnitProvider.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ScriptUseProvider.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseProviderUtils.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseRuntimeExtension.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderContextImpl.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderUnit.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/SightlyRenderException.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/Filter.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FilterComponent.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FormatFilter.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/I18nFilter.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/JoinFilter.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/XSSFilter.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/MarkupUtils.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/AttributeList.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/DocumentHandler.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParser.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParserService.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/MarkupHandler.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TagTokenizer.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TreeTraverser.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/Template.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateAttribute.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateCommentNode.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateElementNode.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateNode.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateParser.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateTextNode.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/AttributePlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/CallPlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ElementPlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/IncludePlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ListPlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/MarkupContext.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/Plugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginCallInfo.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginComponent.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginException.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginInvoke.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ResourcePlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TemplatePlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TestPlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TextPlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UnwrapPlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UsePlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/package-info.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/AttributePlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/CallPlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ElementPlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/IncludePlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ListPlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/PluginComponent.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ResourcePlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TemplatePlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TestPlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TextPlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UnwrapPlugin.java
 delete mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UsePlugin.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/Use.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/package-info.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/RenderContext.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/package-info.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/ProviderOutcome.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/SightlyUseException.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/UseProvider.java
 create mode 100644 contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/package-info.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Console.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsEnvironment.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsUseProvider.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Utils.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Variables.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncContainer.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncExtractor.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingBindingsValuesProvider.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingFunction.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/UnaryCallback.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/CommonJsModule.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/ExportsObject.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Console.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsEnvironment.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsUseProvider.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Utils.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Variables.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncContainer.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncExtractor.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingBindingsValuesProvider.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingFunction.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/UnaryCallback.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/CommonJsModule.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/ExportsObject.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/jsapi/SlyBindingsValuesProvider.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoop.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoopInterop.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/Task.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/HybridObject.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsUtils.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsValueAdapter.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/DependencyResolver.java
 create mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/UseFunction.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/jsapi/SlyBindingsValuesProvider.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoop.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoopInterop.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/Task.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/HybridObject.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsUtils.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsValueAdapter.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/DependencyResolver.java
 delete mode 100644 contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/UseFunction.java

diff --git a/contrib/scripting/sightly/engine/pom.xml b/contrib/scripting/sightly/engine/pom.xml
index 2c0eb3c..7378d2b 100644
--- a/contrib/scripting/sightly/engine/pom.xml
+++ b/contrib/scripting/sightly/engine/pom.xml
@@ -78,9 +78,6 @@
                 <configuration>
                     <instructions>
                         <Embed-Dependency>antlr4-runtime,org.abego.treelayout.core</Embed-Dependency>
-                        <Export-Package>
-                            org.apache.sling.scripting.sightly.api
-                        </Export-Package>
                         <ScriptEngine-Name>${project.name}</ScriptEngine-Name>
                         <ScriptEngine-Version>${project.version}</ScriptEngine-Version>
                     </instructions>
diff --git a/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyLexer.g4 b/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyLexer.g4
deleted file mode 100644
index 5da7d71..0000000
--- a/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyLexer.g4
+++ /dev/null
@@ -1,120 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-lexer grammar SightlyLexer;
-
-ESC_EXPR: '\${'.*? '}';
-
-EXPR_START: '${' -> pushMode(ExpressionMode);
-
-TEXT_PART: .; //$hello ${expr}
-
-
-mode ExpressionMode;
-
-EXPR_END: '}' -> popMode;
-
-
-BOOL_CONSTANT: 'true' | 'false';
-
-DOT: '.';
-
-LBRACKET: '(';
-
-RBRACKET: ')';
-
-AND_OP: '&&';
-
-OR_OP: '||';
-
-NOT_OP: '!';
-
-COMMA: ',';
-
-ARRAY_START: '[';
-
-ARRAY_END: ']';
-
-ASSIGN: '=';
-
-OPTION_SEP: '@';
-
-TERNARY_Q_OP: '?';
-
-TERNARY_BRANCHES_OP: ':';
-
-LT: '<';
-
-LEQ: '<=';
-
-GEQ: '>=';
-
-GT: '>';
-
-EQ: '==';
-
-NEQ: '!=';
-
-// tokens
-
-ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|':')*
-    ;
-
-INT :	'0'..'9'+
-    ;
-
-FLOAT
-    :   ('0'..'9')+ '.' ('0'..'9')+ EXPONENT?
-//    |   '.' ('0'..'9')+ EXPONENT?  --> conflicts with a.2 notation
-    |   ('0'..'9')+ EXPONENT
-    ;
-
-COMMENT: '<!--/*' .*? '*/-->' -> skip;
-
-WS  :   ( ' '
-        | '\t'
-        | '\r'
-        | '\n'
-        ) -> skip
-    ;
-
-
-STRING
-    :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
-    |  '\'' ( ESC_SEQ | ~('\\'|'\'') )* '\''
-    ;
-
-//CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
-//    ;
-
-fragment
-EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
-
-fragment
-HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;
-
-fragment
-ESC_SEQ
-    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
-    |   UNICODE_ESC
-    ;
-
-fragment
-UNICODE_ESC
-    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
-    ;
diff --git a/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyParser.g4 b/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyParser.g4
deleted file mode 100644
index 5c3166b..0000000
--- a/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/parser/expr/generated/SightlyParser.g4
+++ /dev/null
@@ -1,139 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-parser grammar SightlyParser;
-
-options {
-    language = Java;
-    tokenVocab = SightlyLexer;
-}
-
-@header {
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.*;
-import org.apache.sling.scripting.sightly.compiler.api.expression.*;
-import org.apache.sling.scripting.sightly.compiler.frontend.*;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.Collections;
-}
-
-
-interpolation returns [Interpolation interp]
-@init { $interp = new Interpolation(); }
-    :    (
-        textFrag { $interp.addText($textFrag.str); }
-        | expression { $interp.addExpression($expression.expr); }
-        )* //perhaphs too restrictive
-    ;
-
-textFrag returns [String str]
-@init { StringBuilder sb = new StringBuilder(); }
-    :   (TEXT_PART { sb.append($TEXT_PART.text); })+
-        { $str = sb.toString(); }
-    | (ESC_EXPR { sb.append($ESC_EXPR.text); })+
-        { $str = sb.toString().substring(1); }
-    ;
-
-expression returns [Expression expr]
-@init { ExpressionNode exNode = NullLiteral.INSTANCE; Map<String, ExpressionNode> opts = Collections.emptyMap(); }
-    :   EXPR_START (exprNode {exNode = $exprNode.node;})?
-        (OPTION_SEP optionList {opts = $optionList.options;})?
-        EXPR_END
-        { $expr = new Expression(exNode, opts); }
-    ;
-
-
-optionList returns [Map<String, ExpressionNode> options]
-@init { $options = new HashMap<String, ExpressionNode>(); }
-    :    f=option { $options.put($f.name, ($f.value != null) ? $f.value : NullLiteral.INSTANCE); }
-        (COMMA r=option { $options.put($r.name, $r.value); })*
-    ;
-
-option returns [String name, ExpressionNode value]
-    :    ID { $name = $ID.text; } (ASSIGN exprNode { $value = $exprNode.node; } )?
-    ;
-
-
-exprNode returns [ExpressionNode node]
-    :   condition=binaryOp TERNARY_Q_OP thenBranch=binaryOp TERNARY_BRANCHES_OP elseBranch=binaryOp
-        {$node = new TernaryOperator($condition.node, $thenBranch.node, $elseBranch.node);}
-    |   binaryOp {$node = $binaryOp.node;}
-    ;
-
-binaryOp returns [ExpressionNode node] //is there any priority precedence between AND & OR ?
-    :   left=comparisonTerm { $node = $left.node; }
-        (operator right=comparisonTerm { $node = new BinaryOperation($operator.op, $node, $right.node); })*
-    ;
-    
-operator returns [BinaryOperator op]
-    :    AND_OP { $op = BinaryOperator.AND; } | OR_OP { $op = BinaryOperator.OR; }
-    ;
-
-comparisonTerm returns [ExpressionNode node]
-    :   factor { $node = $factor.node; }
-    |   left=factor comparisonOp right=factor { $node = new BinaryOperation($comparisonOp.op, $left.node, $right.node); }
-    ;
-
-comparisonOp returns [BinaryOperator op]
-    : GT { $op = BinaryOperator.GT; }
-    | LT { $op = BinaryOperator.LT; }
-    | LEQ { $op = BinaryOperator.LEQ; }
-    | GEQ { $op = BinaryOperator.GEQ; }
-    | EQ { $op = BinaryOperator.STRICT_EQ; }
-    | NEQ { $op = BinaryOperator.STRICT_NEQ; }
-    ;
-
-factor returns [ExpressionNode node]
-    :    (pa=term { $node = $pa.node; })
-    |     (NOT_OP notTerm=term { $node = new UnaryOperation(UnaryOperator.NOT, $notTerm.node); })
-    ;
-
-term returns [ExpressionNode node]
-    : simple { $node = $simple.node; }
-        ( ARRAY_START exprNode ARRAY_END { $node = new PropertyAccess($node, $exprNode.node); }
-        | DOT field { $node = new PropertyAccess($node, $field.node); })*
-    ;
-
-field returns [ExpressionNode node]
-    : ID { $node = new StringConstant($ID.getText()); }
-    ;
-
-simple returns [ExpressionNode node]
-    :    atom { $node = $atom.node; }
-    |    LBRACKET exprNode RBRACKET { $node = $exprNode.node; }
-    |   ARRAY_START valueList ARRAY_END { $node = new ArrayLiteral($valueList.values); }
-    |   ARRAY_START ARRAY_END { $node = new ArrayLiteral(Collections.<ExpressionNode>emptyList()); }
-    ;
-
-valueList returns [List<ExpressionNode> values]
-@init { $values = new ArrayList<ExpressionNode>(); }
-    :    (f=exprNode { $values.add($f.node); }) (COMMA p=exprNode { $values.add($p.node); })*
-    ;
-
-atom returns [Atom node]
-    :    stringConst { $node = $stringConst.node; }
-    |    ID { $node = new Identifier($ID.text); }
-    |    numText=(FLOAT | INT) { $node = new NumericConstant($numText.text); }
-    |    boolText=BOOL_CONSTANT { $node = new BooleanConstant($boolText.text); }
-    ;
-
-stringConst returns [StringConstant node]
-    :   STRING { $node = ParserHelper.createStringConstant($STRING.text); }
-    ;
diff --git a/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyLexer.g4 b/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyLexer.g4
new file mode 100644
index 0000000..5da7d71
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyLexer.g4
@@ -0,0 +1,120 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+lexer grammar SightlyLexer;
+
+ESC_EXPR: '\${'.*? '}';
+
+EXPR_START: '${' -> pushMode(ExpressionMode);
+
+TEXT_PART: .; //$hello ${expr}
+
+
+mode ExpressionMode;
+
+EXPR_END: '}' -> popMode;
+
+
+BOOL_CONSTANT: 'true' | 'false';
+
+DOT: '.';
+
+LBRACKET: '(';
+
+RBRACKET: ')';
+
+AND_OP: '&&';
+
+OR_OP: '||';
+
+NOT_OP: '!';
+
+COMMA: ',';
+
+ARRAY_START: '[';
+
+ARRAY_END: ']';
+
+ASSIGN: '=';
+
+OPTION_SEP: '@';
+
+TERNARY_Q_OP: '?';
+
+TERNARY_BRANCHES_OP: ':';
+
+LT: '<';
+
+LEQ: '<=';
+
+GEQ: '>=';
+
+GT: '>';
+
+EQ: '==';
+
+NEQ: '!=';
+
+// tokens
+
+ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|':')*
+    ;
+
+INT :	'0'..'9'+
+    ;
+
+FLOAT
+    :   ('0'..'9')+ '.' ('0'..'9')+ EXPONENT?
+//    |   '.' ('0'..'9')+ EXPONENT?  --> conflicts with a.2 notation
+    |   ('0'..'9')+ EXPONENT
+    ;
+
+COMMENT: '<!--/*' .*? '*/-->' -> skip;
+
+WS  :   ( ' '
+        | '\t'
+        | '\r'
+        | '\n'
+        ) -> skip
+    ;
+
+
+STRING
+    :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
+    |  '\'' ( ESC_SEQ | ~('\\'|'\'') )* '\''
+    ;
+
+//CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
+//    ;
+
+fragment
+EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
+
+fragment
+HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;
+
+fragment
+ESC_SEQ
+    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
+    |   UNICODE_ESC
+    ;
+
+fragment
+UNICODE_ESC
+    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
+    ;
diff --git a/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyParser.g4 b/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyParser.g4
new file mode 100644
index 0000000..ce6124c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/antlr4/org/apache/sling/scripting/sightly/impl/parser/expr/generated/SightlyParser.g4
@@ -0,0 +1,139 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+parser grammar SightlyParser;
+
+options {
+    language = Java;
+    tokenVocab = SightlyLexer;
+}
+
+@header {
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.*;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.*;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
+}
+
+
+interpolation returns [Interpolation interp]
+@init { $interp = new Interpolation(); }
+    :    (
+        textFrag { $interp.addText($textFrag.str); }
+        | expression { $interp.addExpression($expression.expr); }
+        )* //perhaphs too restrictive
+    ;
+
+textFrag returns [String str]
+@init { StringBuilder sb = new StringBuilder(); }
+    :   (TEXT_PART { sb.append($TEXT_PART.text); })+
+        { $str = sb.toString(); }
+    | (ESC_EXPR { sb.append($ESC_EXPR.text); })+
+        { $str = sb.toString().substring(1); }
+    ;
+
+expression returns [Expression expr]
+@init { ExpressionNode exNode = NullLiteral.INSTANCE; Map<String, ExpressionNode> opts = Collections.emptyMap(); }
+    :   EXPR_START (exprNode {exNode = $exprNode.node;})?
+        (OPTION_SEP optionList {opts = $optionList.options;})?
+        EXPR_END
+        { $expr = new Expression(exNode, opts); }
+    ;
+
+
+optionList returns [Map<String, ExpressionNode> options]
+@init { $options = new HashMap<String, ExpressionNode>(); }
+    :    f=option { $options.put($f.name, ($f.value != null) ? $f.value : NullLiteral.INSTANCE); }
+        (COMMA r=option { $options.put($r.name, $r.value); })*
+    ;
+
+option returns [String name, ExpressionNode value]
+    :    ID { $name = $ID.text; } (ASSIGN exprNode { $value = $exprNode.node; } )?
+    ;
+
+
+exprNode returns [ExpressionNode node]
+    :   condition=binaryOp TERNARY_Q_OP thenBranch=binaryOp TERNARY_BRANCHES_OP elseBranch=binaryOp
+        {$node = new TernaryOperator($condition.node, $thenBranch.node, $elseBranch.node);}
+    |   binaryOp {$node = $binaryOp.node;}
+    ;
+
+binaryOp returns [ExpressionNode node] //is there any priority precedence between AND & OR ?
+    :   left=comparisonTerm { $node = $left.node; }
+        (operator right=comparisonTerm { $node = new BinaryOperation($operator.op, $node, $right.node); })*
+    ;
+    
+operator returns [BinaryOperator op]
+    :    AND_OP { $op = BinaryOperator.AND; } | OR_OP { $op = BinaryOperator.OR; }
+    ;
+
+comparisonTerm returns [ExpressionNode node]
+    :   factor { $node = $factor.node; }
+    |   left=factor comparisonOp right=factor { $node = new BinaryOperation($comparisonOp.op, $left.node, $right.node); }
+    ;
+
+comparisonOp returns [BinaryOperator op]
+    : GT { $op = BinaryOperator.GT; }
+    | LT { $op = BinaryOperator.LT; }
+    | LEQ { $op = BinaryOperator.LEQ; }
+    | GEQ { $op = BinaryOperator.GEQ; }
+    | EQ { $op = BinaryOperator.STRICT_EQ; }
+    | NEQ { $op = BinaryOperator.STRICT_NEQ; }
+    ;
+
+factor returns [ExpressionNode node]
+    :    (pa=term { $node = $pa.node; })
+    |     (NOT_OP notTerm=term { $node = new UnaryOperation(UnaryOperator.NOT, $notTerm.node); })
+    ;
+
+term returns [ExpressionNode node]
+    : simple { $node = $simple.node; }
+        ( ARRAY_START exprNode ARRAY_END { $node = new PropertyAccess($node, $exprNode.node); }
+        | DOT field { $node = new PropertyAccess($node, $field.node); })*
+    ;
+
+field returns [ExpressionNode node]
+    : ID { $node = new StringConstant($ID.getText()); }
+    ;
+
+simple returns [ExpressionNode node]
+    :    atom { $node = $atom.node; }
+    |    LBRACKET exprNode RBRACKET { $node = $exprNode.node; }
+    |   ARRAY_START valueList ARRAY_END { $node = new ArrayLiteral($valueList.values); }
+    |   ARRAY_START ARRAY_END { $node = new ArrayLiteral(Collections.<ExpressionNode>emptyList()); }
+    ;
+
+valueList returns [List<ExpressionNode> values]
+@init { $values = new ArrayList<ExpressionNode>(); }
+    :    (f=exprNode { $values.add($f.node); }) (COMMA p=exprNode { $values.add($p.node); })*
+    ;
+
+atom returns [Atom node]
+    :    stringConst { $node = $stringConst.node; }
+    |    ID { $node = new Identifier($ID.text); }
+    |    numText=(FLOAT | INT) { $node = new NumericConstant($numText.text); }
+    |    boolText=BOOL_CONSTANT { $node = new BooleanConstant($boolText.text); }
+    ;
+
+stringConst returns [StringConstant node]
+    :   STRING { $node = ParserHelper.createStringConstant($STRING.text); }
+    ;
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/Record.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/Record.java
new file mode 100644
index 0000000..ff1847c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/Record.java
@@ -0,0 +1,47 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly;
+
+import java.util.Set;
+
+import aQute.bnd.annotation.ProviderType;
+
+/**
+ * A key-value immutable object understood by the Sightly runtime
+ * @param <T> the type of values for this record
+ */
+@ProviderType
+public interface Record<T> {
+
+    /**
+     * Get the value of the specified property
+     * @param name the name of the property
+     * @return the value of the property or null if this record does not
+     * have the specified property
+     */
+    T get(String name);
+
+    /**
+     * Get the set of properties for this record
+     * @return this record's properties
+     */
+    Set<String> properties();
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/ResourceResolution.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/ResourceResolution.java
new file mode 100644
index 0000000..52dc180
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/ResourceResolution.java
@@ -0,0 +1,176 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceUtil;
+
+/**
+ * Utility class which used by the Sightly engine & extensions
+ * to resolve resources
+ */
+public final class ResourceResolution {
+
+    /**
+     * Maximum number of iterations that can be performed when searching for a resource in
+     * the resource superType chain
+     */
+    private static final int RECURSION_LIMIT = 100;
+
+    /**
+     * Resolve the resource with the given path relative to the base resource, using the
+     * resource super type logic
+     * @param resourceResolver The resource resolver to be used
+     * @param base the base resource. It can be null if path is absolute
+     * @param path the path to the resource
+     * @return the retrieved resource or null if no resource was found
+     * @throws java.lang.UnsupportedOperationException if the resource is not in the resource resolver's search path
+     * @throws java.lang.IllegalStateException if the number of steps necessary to search for the resource on the resource
+     * superType chain has reached the maximum limit
+     * @throws java.lang.IllegalArgumentException if a null componentResource is provided but the path is not absolute
+     */
+    public static Resource resolveComponentRelative(ResourceResolver resourceResolver, Resource base, String path) {
+        Resource componentResource = null;
+        if (base != null) {
+            if ("nt:file".equals(base.getResourceType())) {
+                componentResource = retrieveParent(resourceResolver, base);
+            } else {
+                componentResource = base;
+            }
+        }
+        return resolveComponent(resourceResolver, componentResource, path);
+    }
+
+    public static Resource resolveComponentForRequest(ResourceResolver resolver, SlingHttpServletRequest request) {
+        String resourceType = request.getResource().getResourceType();
+        if (StringUtils.isNotEmpty(resourceType)) {
+            if (resourceType.startsWith("/")) {
+                return resolver.getResource(resourceType);
+            }
+            for (String searchPath : resolver.getSearchPath()) {
+                String componentPath = ResourceUtil.normalize(searchPath + "/" + resourceType);
+                Resource componentResource = resolver.getResource(componentPath);
+                if (componentResource != null) {
+                    return componentResource;
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Resolve the resource in the specified component
+     * @param resourceResolver The resource resolver to be used
+     * @param componentResource The resource for the component. It can be null if path is absolute
+     * @param path the path to the resource
+     * @return the retrieved resource or null if no resource was found
+     * @throws java.lang.UnsupportedOperationException if the resource is not in the resource resolver's search path
+     * @throws java.lang.IllegalStateException if more than {@link ResourceResolution#RECURSION_LIMIT} steps were
+     * necessary to search for the resource on the resource superType chain
+     * @throws java.lang.IllegalArgumentException if a null componentResource is provided but the path is not absolute
+     */
+    private static Resource resolveComponent(ResourceResolver resourceResolver, Resource componentResource, String path) {
+        if (resourceResolver == null || path == null) {
+            throw new NullPointerException("Arguments cannot be null");
+        }
+        Resource resource = null;
+        if (isAbsolutePath(path)) {
+            resource = resourceResolver.getResource(path);
+        }
+        if (resource == null) {
+            if (componentResource == null) {
+                throw new IllegalArgumentException("Argument cannot be null if path is not absolute: " + path);
+            }
+            resource = recursiveResolution(resourceResolver, componentResource, path);
+        }
+        if (resource == null) {
+            resource = locateInSearchPath(resourceResolver, path);
+        }
+        return resource != null ? searchPathChecked(resourceResolver, resource) : null;
+    }
+
+    private static Resource recursiveResolution(ResourceResolver resourceResolver, Resource componentResource, String path) {
+        for (int iteration = 0; iteration < RECURSION_LIMIT; iteration++) {
+            Resource resource = resourceResolver.getResource(componentResource, path);
+            if (resource != null) {
+                return resource;
+            }
+            componentResource = findSuperComponent(resourceResolver, componentResource);
+            if (componentResource == null) {
+                return null;
+            }
+        }
+        //at this point we have reached recursion limit
+        throw new IllegalStateException("Searching for resource in component chain took more than " +
+                RECURSION_LIMIT + " steps");
+    }
+
+    private static Resource locateInSearchPath(ResourceResolver resourceResolver, String path) {
+        for (String searchPath : resourceResolver.getSearchPath()) {
+            String fullPath = searchPath + path;
+            Resource resource = resourceResolver.getResource(fullPath);
+            if (resource != null && resource.getPath().startsWith(searchPath)) { //prevent path traversal attack
+                return resource;
+            }
+        }
+        return null;
+    }
+
+    private static boolean isInSearchPath(ResourceResolver resourceResolver, Resource resource) {
+        String resourcePath = resource.getPath();
+        for (String path : resourceResolver.getSearchPath()) {
+            if (resourcePath.startsWith(path)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private static Resource findSuperComponent(ResourceResolver resourceResolver, Resource base) {
+        String superType = resourceResolver.getParentResourceType(base);
+        if (superType == null) {
+            return null;
+        }
+        return resourceResolver.getResource(superType);
+    }
+
+    private static Resource searchPathChecked(ResourceResolver resourceResolver, Resource resource) {
+        if (!isInSearchPath(resourceResolver, resource)) {
+            throw new UnsupportedOperationException("Access to resource " + resource.getPath() + " is denied, since the resource does not reside on the search path");
+        }
+        return resource;
+    }
+
+    private static Resource retrieveParent(ResourceResolver resourceResolver, Resource resource) {
+        String parentPath = ResourceUtil.getParent(resource.getPath());
+        if (parentPath == null) {
+            return null;
+        }
+        return resourceResolver.getResource(parentPath);
+    }
+
+    private static boolean isAbsolutePath(String path) {
+        return path.startsWith("/");
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/SightlyException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/SightlyException.java
new file mode 100644
index 0000000..5179421
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/SightlyException.java
@@ -0,0 +1,42 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly;
+
+import org.apache.sling.api.SlingException;
+
+/**
+ * Exceptions caused by the Sightly engine
+ */
+public class SightlyException extends SlingException {
+
+    public SightlyException() {
+    }
+
+    public SightlyException(String message) {
+        super(message);
+    }
+
+    public SightlyException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public SightlyException(Throwable cause) {
+        super(cause);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/BaseRenderUnit.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/BaseRenderUnit.java
deleted file mode 100644
index b8269d3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/BaseRenderUnit.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-import javax.script.Bindings;
-import javax.script.SimpleBindings;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Compiled version of render units
- */
-@ProviderType
-public abstract class BaseRenderUnit implements RenderUnit {
-
-    private final Map<String, RenderUnit> subTemplates = new HashMap<String, RenderUnit>();
-
-    private Map<String, RenderUnit> siblings;
-
-    @Override
-    public final void render(RenderContext renderContext, Bindings arguments) {
-        render(renderContext.getWriter(),
-                buildGlobalScope(renderContext.getBindings()),
-                new CaseInsensitiveBindings(arguments),
-                renderContext.getObjectModel(),
-                renderContext.getRuntime(),
-                renderContext);
-    }
-
-    @Override
-    public RenderUnit get(String name) {
-        return subTemplates.get(name.toLowerCase());
-    }
-
-    @Override
-    public Set<String> properties() {
-        return subTemplates.keySet();
-    }
-
-    protected abstract void render(StackedWriter writer,
-                                   Bindings bindings,
-                                   Bindings arguments,
-                                   ObjectModel dynamic,
-                                   SightlyRuntime runtime,
-                                   RenderContext renderContext);
-
-    @SuppressWarnings({"unused", "unchecked"})
-    protected void callUnit(RenderContext renderContext, Object templateObj, Object argsObj) {
-        if (!(templateObj instanceof RenderUnit)) {
-            return;
-        }
-        RenderUnit unit = (RenderUnit) templateObj;
-        ObjectModel dynamic = renderContext.getObjectModel();
-        Map<String, Object> argumentsMap = dynamic.coerceToMap(argsObj);
-        Bindings arguments = new SimpleBindings(Collections.unmodifiableMap(argumentsMap));
-        unit.render(renderContext, arguments);
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected FluentMap obj() {
-        return new FluentMap();
-    }
-
-    protected final void addSubTemplate(String name, BaseRenderUnit renderUnit) {
-        renderUnit.setSiblings(subTemplates);
-        subTemplates.put(name.toLowerCase(), renderUnit);
-    }
-
-    private void setSiblings(Map<String, RenderUnit> siblings) {
-        this.siblings = siblings;
-    }
-
-    private Bindings buildGlobalScope(Bindings bindings) {
-        SimpleBindings simpleBindings = new SimpleBindings(bindings);
-        simpleBindings.putAll(bindings);
-        if (siblings != null) {
-            simpleBindings.putAll(siblings);
-        }
-        simpleBindings.putAll(subTemplates);
-        return new CaseInsensitiveBindings(simpleBindings);
-    }
-
-    protected static class FluentMap extends HashMap<String, Object> {
-
-        /**
-         * Fluent variant of put
-         * @param name - the name of the property
-         * @param value - the value of the property
-         * @return - this instance
-         */
-        public FluentMap with(String name, Object value) {
-            put(name, value);
-            return this;
-        }
-
-    }
-
-    private static final class CaseInsensitiveBindings extends SimpleBindings {
-
-        private CaseInsensitiveBindings(Map<String, Object> m) {
-            for (Map.Entry<String, Object> entry : m.entrySet()) {
-                put(entry.getKey().toLowerCase(), entry.getValue());
-            }
-        }
-
-        @Override
-        public Object get(Object key) {
-            if (!(key instanceof String)) {
-                throw new ClassCastException("key should be a String");
-            }
-            return super.get(((String) key).toLowerCase());
-        }
-
-        @Override
-        public boolean containsKey(Object key) {
-            if (!(key instanceof String)) {
-                throw new ClassCastException("key should be a String");
-            }
-            return super.containsKey(((String) key).toLowerCase());
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ExtensionInstance.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ExtensionInstance.java
deleted file mode 100644
index dcfb507..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ExtensionInstance.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * An instance of an {@link RuntimeExtension}
- */
-@ProviderType
-public interface ExtensionInstance {
-
-    /**
-     * Call this specific extension
-     * @param arguments - the arguments for the call
-     * @return - the result from the call
-     */
-    Object call(Object ... arguments);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ObjectModel.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ObjectModel.java
deleted file mode 100644
index b045174..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ObjectModel.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import java.util.Collection;
-import java.util.Map;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Defines the dynamic queries that values must support
- * in Sightly
- */
-@ProviderType
-public interface ObjectModel {
-
-    String PROPERTY_ACCESS = "resolveProperty";
-    String COLLECTION_COERCE = "coerceToCollection";
-    String NUMERIC_COERCE = "coerceNumeric";
-    String STRING_COERCE = "coerceToString";
-    String BOOLEAN_COERCE = "coerceToBoolean";
-
-    String STRICT_EQ = "strictEq";
-    String LEQ = "leq";
-    String LT = "lt";
-
-    /**
-     * Retrieve the specified property from the given object
-     * @param target - the target object
-     * @param property - the property name
-     * @return - the value of the property or null if the object has no such property
-     */
-    Object resolveProperty(Object target, Object property);
-
-    /**
-     * Convert the given object to a string.
-     * @param target - the target object
-     * @return - the string representation of the object
-     */
-    String coerceToString(Object target);
-
-    /**
-     * Convert the given object to a boolean value
-     * @param object - the target object
-     * @return - the boolean representation of that object
-     */
-    boolean coerceToBoolean(Object object);
-
-    /**
-     * Coerce the object to a numeric value
-     * @param object - the target object
-     * @return - the numeric representation
-     */
-    Number coerceNumeric(Object object);
-
-    /**
-     * Force the conversion of the object to a collection
-     * @param object - the target object
-     * @return the collection representation of the object
-     */
-    Collection<Object> coerceToCollection(Object object);
-
-    /**
-     * Force the conversion of the target object to a map
-     *
-     * @param object - the target object
-     * @return - a map representation of the object. Default is an empty map
-     */
-    Map coerceToMap(Object object);
-
-    /**
-     * Check whether the left argument equals the right one
-     * @param left the left argument
-     * @param right the right argument
-     * @return true if arguments are equal
-     */
-    boolean strictEq(Object left, Object right);
-
-    /**
-     * Check if left < right
-     * @param left the left argument
-     * @param right the right argument
-     * @return true if left < right
-     */
-    boolean lt(Object left, Object right);
-
-    /**
-     * Check if left < right
-     * @param left the left argument
-     * @param right the right argument
-     * @return true if left < right
-     */
-    boolean leq(Object left, Object right);
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ProviderOutcome.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ProviderOutcome.java
deleted file mode 100644
index d2bc33b..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ProviderOutcome.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Result returned by a use provider
- */
-@ProviderType
-public final class ProviderOutcome {
-
-    private boolean success;
-    private Object result;
-
-    private static final ProviderOutcome FAILURE = new ProviderOutcome(false, null);
-
-    /**
-     * Create a successful outcome
-     * @param result the result
-     * @return a successful result
-     */
-    public static ProviderOutcome success(Object result) {
-        return new ProviderOutcome(true, result);
-    }
-
-    /**
-     * Create a failed outcome
-     * @return a failed outcome
-     */
-    public static ProviderOutcome failure() {
-        return FAILURE;
-    }
-
-    /**
-     * If the given obj is not null return a successful outcome, with the given result.
-     * Otherwise, return failure
-     * @param obj the result
-     * @return an outcome based on whether the parameter is null or not
-     */
-    public static ProviderOutcome notNullOrFailure(Object obj) {
-        return (obj == null) ? failure() : success(obj);
-    }
-
-    private ProviderOutcome(boolean success, Object result) {
-        this.success = success;
-        this.result = result;
-    }
-
-    /**
-     * Check if the outcome has been successful
-     * @return the outcome success status
-     */
-    public boolean isSuccess() {
-        return success;
-    }
-
-    /**
-     * Check whether the outcome is a failure
-     * @return the outcome failure status
-     */
-    public boolean isFailure() {
-        return !isSuccess();
-    }
-
-    /**
-     * Get the result in this outcome
-     *
-     * @return the result of the container
-     * @throws java.lang.UnsupportedOperationException if the outcome is a failure
-     */
-    public Object getResult() {
-        if (!success) {
-            throw new UnsupportedOperationException("Outcome has not been successful");
-        }
-        return result;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Record.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Record.java
deleted file mode 100644
index f105fee..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Record.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import java.util.Set;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * A key-value immutable object understood by the Sightly runtime
- * @param <T> the type of values for this record
- */
-@ProviderType
-public interface Record<T> {
-
-    /**
-     * Get the value of the specified property
-     * @param name the name of the property
-     * @return the value of the property or null if this record does not
-     * have the specified property
-     */
-    T get(String name);
-
-    /**
-     * Get the set of properties for this record
-     * @return this record's properties
-     */
-    Set<String> properties();
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderContext.java
deleted file mode 100644
index 6426158..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderContext.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import java.util.Map;
-
-import javax.script.Bindings;
-import javax.script.SimpleBindings;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Rendering context for Sightly rendering units.
- * @see RenderUnit
- */
-@ProviderType
-public class RenderContext {
-
-    private final StackedWriter writer;
-    private final Bindings bindings;
-    private final ObjectModel objectModel;
-    private final SightlyRuntime runtime;
-    private final UnitLocator unitLocator;
-
-    public RenderContext(StackedWriter writer, Bindings bindings, ObjectModel objectModel, SightlyRuntime runtime, UnitLocator unitLocator) {
-        this.writer = writer;
-        this.bindings = bindings;
-        this.objectModel = objectModel;
-        this.runtime = runtime;
-        this.unitLocator = unitLocator;
-    }
-
-    /**
-     * Get the writer where the content should be written
-     * @return - a stacked writer
-     */
-    public StackedWriter getWriter() {
-        return writer;
-    }
-
-    /**
-     * Provide the bindings for this script
-     * @return - the list of global bindings available to the script
-     */
-    public Bindings getBindings() {
-        return bindings;
-    }
-
-    /**
-     * Get an instance of the objectModel object model
-     * @return - a objectModel object model instance
-     */
-    public ObjectModel getObjectModel() {
-        return objectModel;
-    }
-
-    /**
-     * Get the available Sightly runtime
-     * @return - an instance of the Sightly runtime
-     */
-    public SightlyRuntime getRuntime() {
-        return runtime;
-    }
-
-    /**
-     * Get the unit locator
-     * @return - a unit locator
-     */
-    public UnitLocator getUnitLocator() {
-        return unitLocator;
-    }
-
-    /**
-     * Create a new render context with different bindings
-     * @param newBindings - the new set of bindings
-     * @return - the new render context
-     */
-    public RenderContext withBindings(Bindings newBindings) {
-        return new RenderContext(this.writer, newBindings, this.objectModel, this.runtime, this.unitLocator);
-    }
-
-    /**
-     * Create a new render context with additional bindings
-     * @param additionalBindings - a dictionary of variables
-     * @return - the new render context
-     */
-    public RenderContext withAddedBindings(Map additionalBindings) {
-        Bindings newBindings = new SimpleBindings();
-        newBindings.putAll(this.bindings);
-        //noinspection unchecked
-        newBindings.putAll(additionalBindings);
-        return withBindings(newBindings);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderUnit.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderUnit.java
deleted file mode 100644
index f42abef..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RenderUnit.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import javax.script.Bindings;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Basic unit of rendering. This also extends the record interface.
- * The properties for a unit are the sub-units
- */
-@ProviderType
-public interface RenderUnit extends Record<RenderUnit> {
-
-    /**
-     * Render the main script template
-     * @param renderContext - the rendering context
-     * @param arguments - the arguments for this unit
-     */
-    void render(RenderContext renderContext, Bindings arguments);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ResourceResolution.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ResourceResolution.java
deleted file mode 100644
index 2c0fcda..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/ResourceResolution.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceUtil;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Utility class which used by the Sightly engine & extensions
- * to resolve resources
- */
-@ProviderType
-public final class ResourceResolution {
-
-    /**
-     * Maximum number of iterations that can be performed when searching for a resource in
-     * the resource superType chain
-     */
-    private static final int RECURSION_LIMIT = 100;
-
-    /**
-     * Resolve the resource with the given path relative to the base resource, using the
-     * resource super type logic
-     * @param resourceResolver The resource resolver to be used
-     * @param base the base resource. It can be null if path is absolute
-     * @param path the path to the resource
-     * @return the retrieved resource or null if no resource was found
-     * @throws java.lang.UnsupportedOperationException if the resource is not in the resource resolver's search path
-     * @throws java.lang.IllegalStateException if the number of steps necessary to search for the resource on the resource
-     * superType chain has reached the maximum limit
-     * @throws java.lang.IllegalArgumentException if a null componentResource is provided but the path is not absolute
-     */
-    public static Resource resolveComponentRelative(ResourceResolver resourceResolver, Resource base, String path) {
-        Resource componentResource = null;
-        if (base != null) {
-            if ("nt:file".equals(base.getResourceType())) {
-                componentResource = retrieveParent(resourceResolver, base);
-            } else {
-                componentResource = base;
-            }
-        }
-        return resolveComponent(resourceResolver, componentResource, path);
-    }
-
-    public static Resource resolveComponentForRequest(ResourceResolver resolver, SlingHttpServletRequest request) {
-        String resourceType = request.getResource().getResourceType();
-        if (StringUtils.isNotEmpty(resourceType)) {
-            if (resourceType.startsWith("/")) {
-                return resolver.getResource(resourceType);
-            }
-            for (String searchPath : resolver.getSearchPath()) {
-                String componentPath = ResourceUtil.normalize(searchPath + "/" + resourceType);
-                Resource componentResource = resolver.getResource(componentPath);
-                if (componentResource != null) {
-                    return componentResource;
-                }
-            }
-        }
-        return null;
-    }
-
-    /**
-     * Resolve the resource in the specified component
-     * @param resourceResolver The resource resolver to be used
-     * @param componentResource The resource for the component. It can be null if path is absolute
-     * @param path the path to the resource
-     * @return the retrieved resource or null if no resource was found
-     * @throws java.lang.UnsupportedOperationException if the resource is not in the resource resolver's search path
-     * @throws java.lang.IllegalStateException if more than {@link ResourceResolution#RECURSION_LIMIT} steps were
-     * necessary to search for the resource on the resource superType chain
-     * @throws java.lang.IllegalArgumentException if a null componentResource is provided but the path is not absolute
-     */
-    private static Resource resolveComponent(ResourceResolver resourceResolver, Resource componentResource, String path) {
-        if (resourceResolver == null || path == null) {
-            throw new NullPointerException("Arguments cannot be null");
-        }
-        Resource resource = null;
-        if (isAbsolutePath(path)) {
-            resource = resourceResolver.getResource(path);
-        }
-        if (resource == null) {
-            if (componentResource == null) {
-                throw new IllegalArgumentException("Argument cannot be null if path is not absolute: " + path);
-            }
-            resource = recursiveResolution(resourceResolver, componentResource, path);
-        }
-        if (resource == null) {
-            resource = locateInSearchPath(resourceResolver, path);
-        }
-        return resource != null ? searchPathChecked(resourceResolver, resource) : null;
-    }
-
-    private static Resource recursiveResolution(ResourceResolver resourceResolver, Resource componentResource, String path) {
-        for (int iteration = 0; iteration < RECURSION_LIMIT; iteration++) {
-            Resource resource = resourceResolver.getResource(componentResource, path);
-            if (resource != null) {
-                return resource;
-            }
-            componentResource = findSuperComponent(resourceResolver, componentResource);
-            if (componentResource == null) {
-                return null;
-            }
-        }
-        //at this point we have reached recursion limit
-        throw new IllegalStateException("Searching for resource in component chain took more than " +
-                RECURSION_LIMIT + " steps");
-    }
-
-    private static Resource locateInSearchPath(ResourceResolver resourceResolver, String path) {
-        for (String searchPath : resourceResolver.getSearchPath()) {
-            String fullPath = searchPath + path;
-            Resource resource = resourceResolver.getResource(fullPath);
-            if (resource != null && resource.getPath().startsWith(searchPath)) { //prevent path traversal attack
-                return resource;
-            }
-        }
-        return null;
-    }
-
-    private static boolean isInSearchPath(ResourceResolver resourceResolver, Resource resource) {
-        String resourcePath = resource.getPath();
-        for (String path : resourceResolver.getSearchPath()) {
-            if (resourcePath.startsWith(path)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    private static Resource findSuperComponent(ResourceResolver resourceResolver, Resource base) {
-        String superType = resourceResolver.getParentResourceType(base);
-        if (superType == null) {
-            return null;
-        }
-        return resourceResolver.getResource(superType);
-    }
-
-    private static Resource searchPathChecked(ResourceResolver resourceResolver, Resource resource) {
-        if (!isInSearchPath(resourceResolver, resource)) {
-            throw new UnsupportedOperationException("Access to resource " + resource.getPath() + " is denied, since the resource does not reside on the search path");
-        }
-        return resource;
-    }
-
-    private static Resource retrieveParent(ResourceResolver resourceResolver, Resource resource) {
-        String parentPath = ResourceUtil.getParent(resource.getPath());
-        if (parentPath == null) {
-            return null;
-        }
-        return resourceResolver.getResource(parentPath);
-    }
-
-    private static boolean isAbsolutePath(String path) {
-        return path.startsWith("/");
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtension.java
deleted file mode 100644
index 8c1d251..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtension.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import aQute.bnd.annotation.ConsumerType;
-
-/**
- * Extensions provided to the Sightly runtime
- */
-@ConsumerType
-public interface RuntimeExtension {
-
-    /**
-     * Provide an instance of this extension
-     * @param renderContext - the runtime context
-     * @return an extension instance
-     */
-    ExtensionInstance provide(RenderContext renderContext);
-
-    /**
-     * The name of this extension
-     * @return - the name of the extension
-     */
-    String name();
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionComponent.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionComponent.java
deleted file mode 100644
index 8ff1cdd..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionComponent.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import java.util.Dictionary;
-
-import org.osgi.service.component.ComponentContext;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Component-based implementation for extensions
- */
-@ProviderType
-public abstract class RuntimeExtensionComponent implements RuntimeExtension {
-
-    public static final String SCR_PROP_NAME = "org.apache.sling.scripting.sightly.rtextension.name";
-
-    private String name;
-
-    @Override
-    public String name() {
-        return name;
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected void activate(ComponentContext componentContext) {
-        Dictionary properties = componentContext.getProperties();
-        name = (String) properties.get(SCR_PROP_NAME);
-    }
-
-    protected void checkArgumentCount(Object[] arguments, int count) {
-        if (arguments.length != count) {
-            throw new RuntimeExtensionException(String.format("Extension %s requires %d arguments", name(), count));
-        }
-    }
-
-    protected void checkArguments(Object[] arguments, Class<?> ... classes) {
-        checkArgumentCount(arguments, classes.length);
-        for (int i = 0; i < arguments.length; i++) {
-            Object arg = arguments[i];
-            Class<?> cls = classes[i];
-            if (!(cls.isAssignableFrom(arg.getClass()))) {
-                throw new RuntimeExtensionException(String.format("Argument on position %d is not of expected type %s",
-                        i, cls.getCanonicalName()));
-            }
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionException.java
deleted file mode 100644
index 7ef796d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/RuntimeExtensionException.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-/**
- * Exception thrown by runtime extensions
- * @see RuntimeExtension
- */
-public class RuntimeExtensionException extends RuntimeException {
-
-    public RuntimeExtensionException() {
-    }
-
-    public RuntimeExtensionException(String message) {
-        super(message);
-    }
-
-    public RuntimeExtensionException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public RuntimeExtensionException(Throwable cause) {
-        super(cause);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyEngineException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyEngineException.java
deleted file mode 100644
index 8e75b3d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyEngineException.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-/**
- * Exceptions caused by the Sightly engine
- */
-public class SightlyEngineException extends RuntimeException {
-
-    public SightlyEngineException() {
-    }
-
-    public SightlyEngineException(String message) {
-        super(message);
-    }
-
-    public SightlyEngineException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public SightlyEngineException(Throwable cause) {
-        super(cause);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyParsingException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyParsingException.java
deleted file mode 100644
index 4c40654..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyParsingException.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-/**
- * The runtime {@code SightlyParsingException} is thrown during the parsing stage for any grammar offending input.
- */
-public class SightlyParsingException extends RuntimeException {
-
-    private String offendingInput;
-
-    public SightlyParsingException() {
-    }
-
-    public SightlyParsingException(String message) {
-        super(message);
-    }
-
-    public SightlyParsingException(String message, String offendingInput) {
-        super(message);
-        this.offendingInput = offendingInput;
-    }
-
-    public SightlyParsingException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public SightlyParsingException(String message, String offendingInput, Throwable cause) {
-        super(message, cause);
-        this.offendingInput = offendingInput;
-    }
-
-    public SightlyParsingException(Throwable cause) {
-        super(cause);
-    }
-
-    public String getOffendingInput() {
-        return offendingInput;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRenderException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRenderException.java
deleted file mode 100644
index c4c7934..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRenderException.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-/**
- * Exceptions generated by Sightly during runtime
- */
-public class SightlyRenderException extends RuntimeException {
-
-    public SightlyRenderException() {
-    }
-
-    public SightlyRenderException(String message) {
-        super(message);
-    }
-
-    public SightlyRenderException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public SightlyRenderException(Throwable cause) {
-        super(cause);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRuntime.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRuntime.java
deleted file mode 100644
index 9958835..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyRuntime.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Runtime interface provided to Sightly scripts
- */
-@ProviderType
-public interface SightlyRuntime {
-
-    /**
-     * Call the specified function name with the given arguments
-     * @param functionName - the name of the called function
-     * @param arguments - 0 or more arguments passed to the function
-     * @return - the object returned by the function
-     * @throws SightlyRenderException - if the function was
-     * not defined
-     */
-    Object call(String functionName, Object ... arguments);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyUseException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyUseException.java
deleted file mode 100644
index adce3e6..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/SightlyUseException.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-/**
- * Exception raised by the use resolving mechanism
- */
-public class SightlyUseException extends RuntimeException {
-    public SightlyUseException() {
-    }
-
-    public SightlyUseException(String message) {
-        super(message);
-    }
-
-    public SightlyUseException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public SightlyUseException(Throwable cause) {
-        super(cause);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/StackedWriter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/StackedWriter.java
deleted file mode 100644
index 0688379..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/StackedWriter.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.util.Stack;
-
-/**
- * Text writing utility which allows stacking of temporary buffers
- */
-public final class StackedWriter extends Writer {
-
-    private final PrintWriter baseWriter;
-    private final Stack<StringWriter> writerStack = new Stack<StringWriter>();
-    private PrintWriter current;
-
-    public StackedWriter(PrintWriter baseWriter) {
-        this.baseWriter = baseWriter;
-        this.current = baseWriter;
-    }
-
-    @Override
-    public void write(char[] cbuf, int off, int len) throws IOException {
-        current.write(cbuf, off, len);
-    }
-
-    @Override
-    public void write(String text) {
-        current.write(text);
-    }
-
-    @Override
-    public void flush() throws IOException {
-        current.flush();
-    }
-
-    @Override
-    public void close() throws IOException {
-        if (writerStack.size() != 1) {
-            throw new UnsupportedOperationException("Stack is not empty");
-        }
-        current.close();
-    }
-
-    public void push() {
-        StringWriter writer = new StringWriter();
-        writerStack.push(writer);
-        current = new PrintWriter(writer);
-    }
-
-    public String pop() {
-        String output = null;
-        if (!writerStack.isEmpty()) {
-            StringWriter writer = writerStack.pop();
-            output = writer.toString();
-        }
-        if (writerStack.isEmpty()) {
-            current = baseWriter;
-        } else {
-            current = new PrintWriter(writerStack.peek());
-        }
-        return output;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UnitLocator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UnitLocator.java
deleted file mode 100644
index 8d12214..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UnitLocator.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import aQute.bnd.annotation.ProviderType;
-
-/**
- * Locates rendering units
- */
-@ProviderType
-public interface UnitLocator {
-
-    /**
-     * Locate the given rendering unit
-     * @param path - the path of the unit
-     * @return - the rendering unit, or null if the path could not be resolved to a valid
-     * rendering unit
-     */
-    RenderUnit locate(String path);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Use.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Use.java
deleted file mode 100644
index f34a64d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/Use.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.api;
-
-import javax.script.Bindings;
-
-import aQute.bnd.annotation.ConsumerType;
-
-@ConsumerType
-public interface Use {
-
-    public void init(Bindings bindings);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProvider.java
deleted file mode 100644
index e57d4ec..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProvider.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import javax.script.Bindings;
-
-import aQute.bnd.annotation.ConsumerType;
-
-/**
- * Provides instances for the use API. Providers are tried in the order
- * of their priority until one is found which can provide a non-null instance
- */
-@ConsumerType
-public interface UseProvider extends Comparable<UseProvider> {
-
-    int DEFAULT_PRIORITY = 0;
-
-    /**
-     * Provide an instance based on the given identifier
-     * @param identifier the identifier of the dependency
-     * @param renderContext the current rendering context
-     * @param arguments Specific arguments provided by the use plugin
-     * @return a container with the instance that corresponds to the identifier. If the identifier cannot be
-     * handled by this provider, a failed outcome is returned
-     */
-    ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments);
-
-    /**
-     * The priority with which this use provider should be selected. Use 0 if you don't care
-     * @return the (possibly negative) priority of this provider
-     */
-    int priority();
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProviderComponent.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProviderComponent.java
deleted file mode 100644
index 2cd54fe..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/UseProviderComponent.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.api;
-
-import javax.script.Bindings;
-import javax.script.SimpleBindings;
-
-import org.apache.felix.scr.annotations.Activate;
-import org.apache.sling.commons.osgi.PropertiesUtil;
-import org.osgi.service.component.ComponentContext;
-
-import aQute.bnd.annotation.ConsumerType;
-
-/**
- * Component-based use provider
- */
-@ConsumerType
-public abstract class UseProviderComponent implements UseProvider {
-
-    public static final String PRIORITY = "org.apache.sling.scripting.sightly.api.use.priority";
-
-    private int priority = DEFAULT_PRIORITY;
-
-    @Override
-    public int priority() {
-        return priority;
-    }
-
-    @Override
-    public int compareTo(UseProvider o) {
-        if (this.priority < o.priority()) {
-            return -1;
-        } else if (this.priority == o.priority()) {
-            return  0;
-        }
-        return 1;
-    }
-
-    @Activate
-    protected void activate(ComponentContext componentContext) {
-        priority = PropertiesUtil.toInteger(componentContext.getProperties().get(PRIORITY), DEFAULT_PRIORITY);
-    }
-
-    /**
-     * Combine to bindings objects. Priority goes to latter bindings
-     * @param former First map of bindings
-     * @param latter Second, with greater visibility, map of bindings
-     * @return the merging of the two maps
-     */
-    protected Bindings merge(Bindings former, Bindings latter) {
-        Bindings bindings = new SimpleBindings();
-        bindings.putAll(former);
-        bindings.putAll(latter);
-        return bindings;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/package-info.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/package-info.java
deleted file mode 100644
index 777a4a3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/api/package-info.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-@Version("1.0.0")
-package org.apache.sling.scripting.sightly.api;
-
-import aQute.bnd.annotation.Version;
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/Dynamic.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/Dynamic.java
deleted file mode 100644
index b3a2e24..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/Dynamic.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.common;
-
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Map;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-
-/**
- * Extends the object model by providing implementations for all Sightly
- * operators.
- */
-public class Dynamic implements ObjectModel {
-
-    private final ObjectModel model;
-
-    public Dynamic(ObjectModel model) {
-        this.model = model;
-    }
-
-    @Override
-    public Object resolveProperty(Object target, Object property) {
-        return model.resolveProperty(target, property);
-    }
-
-    @Override
-    public String coerceToString(Object target) {
-        return model.coerceToString(target);
-    }
-
-    @Override
-    public boolean coerceToBoolean(Object object) {
-        return model.coerceToBoolean(object);
-    }
-
-    @Override
-    public Collection<Object> coerceToCollection(Object object) {
-        return model.coerceToCollection(object);
-    }
-
-    @Override
-    public Number coerceNumeric(Object object) {
-        if (object instanceof Number) {
-            return (Number) object;
-        }
-        return 0;
-    }
-
-    @Override
-    public Map coerceToMap(Object object) {
-        return model.coerceToMap(object);
-    }
-
-    @Override
-    public boolean strictEq(Object left, Object right) {
-        return model.strictEq(left, right);
-    }
-
-    public boolean eq(Object left, Object right) {
-        if (left == null) {
-            return right == null;
-        }
-        return left.equals(right);
-    }
-
-    @Override
-    public boolean lt(Object left, Object right) {
-        return model.lt(left, right);
-    }
-
-    @Override
-    public boolean leq(Object left, Object right) {
-        return model.leq(left, right);
-    }
-
-    public Object and(Object left, Object right) {
-        if (coerceToBoolean(left)) {
-            return right;
-        }
-        return left;
-    }
-
-
-    public Object or(Object left, Object right) {
-        if (coerceToBoolean(left)) {
-            return left;
-        }
-        return right;
-    }
-
-
-    public Object not(Object obj) {
-        return !coerceToBoolean(obj);
-    }
-
-
-    public Object concatenate(Object left, Object right) {
-        return coerceToString(left) + coerceToString(right);
-    }
-
-
-    public Object isWhiteSpace(Object object) {
-        return StringUtils.isWhitespace(coerceToString(object));
-    }
-
-
-    public int length(Object object) {
-        return coerceToCollection(object).size();
-    }
-
-
-
-
-    public Number add(Object left, Object right) {
-        return adjust(coerceDouble(left) + coerceDouble(right));
-    }
-
-
-    public Number sub(Object left, Object right) {
-        return adjust(coerceDouble(left) - coerceDouble(right));
-    }
-
-
-    public Number mult(Object left, Object right) {
-        return adjust(coerceDouble(left) * coerceDouble(right));
-    }
-
-
-    public int iDiv(Object left, Object right) {
-        return coerceInt(left) / coerceInt(right);
-    }
-
-
-    public int rem(Object left, Object right) {
-        return coerceInt(left) % coerceInt(right);
-    }
-
-
-    public Number div(Object left, Object right) {
-        return adjust(coerceDouble(left) / coerceDouble(right));
-    }
-
-
-    public boolean neq(Object left, Object right) {
-        return !eq(left, right);
-    }
-
-    public boolean strictNeq(Object left, Object right) {
-        return !strictEq(left, right);
-    }
-
-    public boolean gt(Object left, Object right) {
-        return !leq(left, right);
-    }
-
-
-    public boolean geq(Object left, Object right) {
-        return !lt(left, right);
-    }
-
-    public boolean isCollection(Object obj) {
-        return (obj instanceof Collection) || (obj instanceof Object[])
-                || (obj instanceof Iterable)
-                || (obj instanceof Iterator);
-    }
-
-    private double coerceDouble(Object object) {
-        if (object instanceof Number) {
-            return ((Number) object).doubleValue();
-        }
-        return 0;
-    }
-
-    private int coerceInt(Object object) {
-        return coerceNumeric(object).intValue();
-    }
-
-    private Number adjust(double x) {
-        if (Math.floor(x) == x) {
-            return (int)x;
-        }
-        return x;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/ObjectModelImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/ObjectModelImpl.java
deleted file mode 100644
index d79349f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/ObjectModelImpl.java
+++ /dev/null
@@ -1,406 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.common;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.adapter.Adaptable;
-import org.apache.sling.api.resource.ValueMap;
-
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.api.Record;
-import org.apache.sling.scripting.sightly.api.SightlyRenderException;
-
-/**
- * Default implementation for the object model
- */
-@Component
-@Service(ObjectModel.class)
-public class ObjectModelImpl implements ObjectModel {
-
-    private static final String TO_STRING_METHOD = "toString";
-
-    @Override
-    public Object resolveProperty(Object target, Object property) {
-        if (property instanceof Number) {
-            return getIndex(target, ((Number) property).intValue());
-        }
-        return getProperty(target, property);
-    }
-
-    @Override
-    public String coerceToString(Object target) {
-        return objectToString(target);
-    }
-
-    @Override
-    public boolean coerceToBoolean(Object object) {
-        return toBoolean(object);
-    }
-
-    @Override
-    public Collection<Object> coerceToCollection(Object object) {
-        return obtainCollection(object);
-    }
-
-    @Override
-    public Map coerceToMap(Object object) {
-        if (object instanceof Map) {
-            return (Map) object;
-        }
-        return Collections.emptyMap();
-    }
-
-
-    @Override
-    public Number coerceNumeric(Object object) {
-        if (object instanceof Number) {
-            return (Number) object;
-        }
-        return 0;
-    }
-
-    @Override
-    public boolean strictEq(Object left, Object right) {
-        if (left instanceof Number && right instanceof Number) {
-            return ((Number) left).doubleValue() == ((Number) right).doubleValue();
-        }
-        if (left instanceof String && right instanceof String) {
-            return left.equals(right);
-        }
-        if (left instanceof Boolean && right instanceof Boolean) {
-            return left.equals(right);
-        }
-        if (left == null && right == null) {
-            return true;
-        }
-        if (left == null || right == null) {
-            Object notNull = (left != null) ? left : right;
-            if (notNull instanceof String || notNull instanceof Boolean || notNull instanceof Number) {
-                return false;
-            }
-        }
-        throw new UnsupportedOperationException("Invalid types in comparison. Equality is supported for String, Number & Boolean types");
-    }
-
-    public boolean lt(Object left, Object right) {
-        if (left instanceof Number && right instanceof Number) {
-            return ((Number) left).doubleValue() < ((Number) right).doubleValue();
-        }
-        throw new UnsupportedOperationException("Invalid types in comparison. Comparison is supported for Number types only");
-    }
-
-
-    public boolean leq(Object left, Object right) {
-        if (left instanceof Number && right instanceof Number) {
-            return ((Number) left).doubleValue() <= ((Number) right).doubleValue();
-        }
-        throw new UnsupportedOperationException("Invalid types in comparison. Comparison is supported for Number types only");
-    }
-
-    @SuppressWarnings("unchecked")
-    private Collection<Object> obtainCollection(Object obj) {
-        if (obj == null) {
-            return Collections.emptyList();
-        }
-        if (obj instanceof Object[]) {
-            return Arrays.asList((Object[]) obj);
-        }
-        if (obj instanceof Collection) {
-            return (Collection<Object>) obj;
-        }
-        if (obj instanceof Map) {
-            return ((Map) obj).keySet();
-        }
-        if (obj instanceof Record) {
-            return ((Record) obj).properties();
-        }
-        if (obj instanceof Enumeration) {
-            return Collections.list((Enumeration<Object>) obj);
-        }
-        if (obj instanceof Iterator) {
-            return fromIterator((Iterator<Object>) obj);
-        }
-        return Collections.emptyList();
-    }
-
-    private Collection<Object> fromIterator(Iterator<Object> iterator) {
-        ArrayList<Object> result = new ArrayList<Object>();
-        while (iterator.hasNext()) {
-            result.add(iterator.next());
-        }
-        return result;
-    }
-
-    private boolean toBoolean(Object obj) {
-        if (obj == null) {
-            return false;
-        }
-
-        if (obj instanceof Number) {
-            Number number = (Number) obj;
-            //todo should we consider precision issues?
-            return !(number.doubleValue() == 0.0);
-        }
-
-        String s = obj.toString().trim();
-        if ("".equals(s)) {
-            return false;
-        } else if ("true".equalsIgnoreCase(s) || "false".equalsIgnoreCase(s)) {
-            return Boolean.parseBoolean(s);
-        }
-
-        if (obj instanceof Collection) {
-            return ((Collection) obj).size() > 0;
-        }
-
-        if (obj instanceof Map) {
-            return ((Map) obj).size() > 0;
-        }
-
-        if (obj instanceof Iterable<?>) {
-            return ((Iterable<?>) obj).iterator().hasNext();
-        }
-
-        if (obj instanceof Iterator<?>) {
-            return ((Iterator<?>) obj).hasNext();
-        }
-
-        if (obj instanceof Object[]) {
-            return ((Object[]) obj).length > 0;
-        }
-
-        return true;
-    }
-
-    private Object getProperty(Object target, Object propertyObj) {
-        String property = coerceToString(propertyObj);
-        if (StringUtils.isEmpty(property)) {
-            throw new IllegalArgumentException("Invalid property name");
-        }
-        if (target == null) {
-            return null;
-        }
-        Object result = null;
-        if (target instanceof Map) {
-            result = getMapProperty((Map) target, property);
-        }
-        if (result == null && target instanceof Record) {
-            result = ((Record) target).get(property);
-        }
-        if (result == null) {
-            result = getObjectProperty(target, property);
-        }
-        if (result == null && target instanceof Adaptable) {
-            result = getValueMapProperty(((Adaptable) target).adaptTo(ValueMap.class), property);
-        }
-        return result;
-    }
-
-    private Object getIndex(Object obj, int index) {
-        if (obj instanceof Map) {
-            Map map = (Map) obj;
-            if (map.containsKey(index)) {
-                return map.get(index);
-            }
-        }
-        Collection collection = coerceToCollection(obj);
-        if (collection instanceof List) {
-            return getIndexSafe((List) collection, index);
-        }
-        return null;
-    }
-
-    private Object getIndexSafe(List list, int index) {
-        if (index < 0 || index >= list.size()) {
-            return null;
-        }
-        return list.get(index);
-    }
-
-    private Object getValueMapProperty(ValueMap valueMap, String property) {
-        if (valueMap == null) {
-            return null;
-        }
-        return valueMap.get(property);
-    }
-
-    private Object getMapProperty(Map map, String property) {
-        return map.get(property);
-    }
-
-    private Object getObjectProperty(Object obj, String property) {
-        Object result = getObjectNoArgMethod(obj, property);
-        if (result != null) return result;
-        return getField(obj, property);
-    }
-
-    private Object getField(Object obj, String property) {
-        if (obj instanceof Object[] && "length".equals(property)) {
-            // Working around this limitation: http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getFields%28%29
-            return ((Object[]) obj).length;
-        }
-        Class<?> cls = obj.getClass();
-        try {
-            Field field = cls.getDeclaredField(property);
-            return field.get(obj);
-        } catch (Exception e) {
-            return null;
-        }
-    }
-
-    private Object getObjectNoArgMethod(Object obj, String property) {
-        Class<?> cls = obj.getClass();
-        Method method = findMethod(cls, property);
-        if (method != null) {
-            try {
-                method = extractMethodInheritanceChain(cls, method);
-                return method.invoke(obj);
-            } catch (Exception e) {
-                throw new SightlyRenderException(e);
-            }
-        }
-        return null;
-    }
-
-    private Method findMethod(Class<?> cls, String baseName) {
-        Method method;
-        String capitalized = StringUtils.capitalize(baseName);
-        method = tryMethod(cls, "get" + capitalized);
-        if (method != null) return method;
-        method = tryMethod(cls, "is" + capitalized);
-        if (method != null) return method;
-        method = tryMethod(cls, baseName);
-        return method;
-    }
-
-
-    private Method tryMethod(Class<?> cls, String name) {
-        try {
-            Method m = cls.getMethod(name);
-            Class<?> declaringClass = m.getDeclaringClass();
-            return (isMethodAllowed(m)) ? m : null;
-        } catch (NoSuchMethodException e) {
-            return null;
-        }
-    }
-
-    private boolean isMethodAllowed(Method method) {
-        Class<?> declaringClass = method.getDeclaringClass();
-        //methods of the Object.class are forbidden (except toString, which is allowed)
-        return declaringClass != Object.class || TO_STRING_METHOD.equals(method.getName());
-    }
-
-
-    private String objectToString(Object obj) {
-        String output = "";
-        if (obj != null) {
-            if (obj instanceof String) {
-                output = (String) obj;
-            } else if (isPrimitive(obj)) {
-                output = obj.toString();
-            } else {
-                Collection<?> col = obtainCollection(obj);
-                if (col != null) {
-                    output = collectionToString(col);
-                }
-            }
-        }
-        return output;
-    }
-
-    private static final Set<Class<?>> primitiveClasses = primitiveClasses();
-
-    private boolean isPrimitive(Object obj) {
-        return primitiveClasses.contains(obj.getClass());
-    }
-
-    private String collectionToString(Collection<?> col) {
-        StringBuilder builder = new StringBuilder();
-        String prefix = "";
-        for (Object o : col) {
-            builder.append(prefix).append(objectToString(o));
-            prefix = ",";
-        }
-        return builder.toString();
-    }
-
-    private static Set<Class<?>> primitiveClasses() {
-        Set<Class<?>> set = new HashSet<Class<?>>();
-        set.add(Boolean.class);
-        set.add(Character.class);
-        set.add(Byte.class);
-        set.add(Short.class);
-        set.add(Integer.class);
-        set.add(Long.class);
-        set.add(Float.class);
-        set.add(Double.class);
-        set.add(Void.class);
-        return set;
-    }
-
-    private static Method extractMethodInheritanceChain(Class type, Method m) {
-        if (m == null || Modifier.isPublic(type.getModifiers())) {
-            return m;
-        }
-        Class[] inf = type.getInterfaces();
-        Method mp;
-        for (Class<?> iface : inf) {
-            try {
-                mp = iface.getMethod(m.getName(), (Class[]) m.getParameterTypes());
-                mp = extractMethodInheritanceChain(mp.getDeclaringClass(), mp);
-                if (mp != null) {
-                    return mp;
-                }
-            } catch (NoSuchMethodException e) {
-                // do nothing
-            }
-        }
-        Class<?> sup = type.getSuperclass();
-        if (sup != null) {
-            try {
-                mp = sup.getMethod(m.getName(), (Class[]) m.getParameterTypes());
-                mp = extractMethodInheritanceChain(mp.getDeclaringClass(), mp);
-                if (mp != null) {
-                    return mp;
-                }
-            } catch (NoSuchMethodException e) {
-                // do nothing
-            }
-        }
-        return null;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/SightlyRuntimeImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/SightlyRuntimeImpl.java
deleted file mode 100644
index a098f22..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/common/SightlyRuntimeImpl.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.common;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.SightlyRenderException;
-import org.apache.sling.scripting.sightly.api.SightlyRuntime;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-
-/**
- * Implementation for apache runtime
- */
-public class SightlyRuntimeImpl implements SightlyRuntime {
-
-    private final Map<String, RuntimeExtension> mapping;
-    private final Map<String, ExtensionInstance> instanceCache = new HashMap<String, ExtensionInstance>();
-    private RenderContext renderContext;
-
-    public SightlyRuntimeImpl(Map<String, RuntimeExtension> mapping) {
-        this.mapping = mapping;
-    }
-
-    @Override
-    public Object call(String functionName, Object... arguments) {
-        ExtensionInstance instance;
-        instance = instanceCache.get(functionName);
-        if (instance == null) {
-            instance = createInstance(functionName);
-            instanceCache.put(functionName, instance);
-        }
-        return instance.call(arguments);
-    }
-
-    public RenderContext getRenderContext() {
-        return renderContext;
-    }
-
-    public void setRenderContext(RenderContext renderContext) {
-        this.renderContext = renderContext;
-    }
-
-    private ExtensionInstance createInstance(String name) {
-        RuntimeExtension extension = mapping.get(name);
-        if (extension == null) {
-            throw new SightlyRenderException("Runtime extension is not available: " + name);
-        }
-        return extension.provide(renderContext);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CodeGenVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CodeGenVisitor.java
deleted file mode 100644
index 55efe9a..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CodeGenVisitor.java
+++ /dev/null
@@ -1,277 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.HashSet;
-import java.util.Set;
-import java.util.Stack;
-
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.visitor.StateControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.visitor.StateControl;
-
-/**
- * Java code generator
- */
-class CodeGenVisitor implements CommandVisitor {
-
-    private final JavaSource source;
-    private final UnitBuilder unitBuilder;
-    private final Stack<String> loopStatusStack = new Stack<String>();
-    private final VariableAnalyzer analyzer = new VariableAnalyzer();
-    private final StateControl control;
-    private final Set<String> unitParameters;
-
-    public CodeGenVisitor(UnitBuilder unitBuilder, StateControl control) {
-        this.unitBuilder = unitBuilder;
-        this.source = unitBuilder.getSource();
-        this.control = control;
-        this.unitParameters = new HashSet<String>();
-        for (String param : unitBuilder.getParameters()) {
-            this.unitParameters.add(param.toLowerCase());
-        }
-    }
-
-    /**
-     * Complete building the source
-     */
-    public void finish() {
-        source.prepend(initializations());
-    }
-
-    private String initializations() {
-        JavaSource initSource = new JavaSource();
-        for (VariableDescriptor descriptor : analyzer.allVariables()) {
-            initVariable(descriptor, initSource);
-        }
-        return initSource.toString();
-    }
-
-    private void initVariable(VariableDescriptor descriptor, JavaSource initSource) {
-        switch (descriptor.getScope()) {
-            case DYNAMIC:
-                initSource.beginAssignment(descriptor.getAssignedName());
-                if (descriptor.isTemplateVariable()) {
-                    initSource.startCall(SourceGenConstants.OBJ_GET);
-                } else if (unitParameters.contains(descriptor.getOriginalName().toLowerCase())) {
-                    initSource.startMethodCall(SourceGenConstants.ARGUMENTS_FIELD, SourceGenConstants.BINDINGS_GET_METHOD);
-                } else {
-                    initSource.startMethodCall(SourceGenConstants.BINDINGS_FIELD, SourceGenConstants.BINDINGS_GET_METHOD);
-                }
-                initSource.stringLiteral(descriptor.getOriginalName())
-                        .endCall()
-                        .endStatement();
-                break;
-            case GLOBAL:
-                initSource.beginAssignment(descriptor.getAssignedName())
-                        .nullLiteral()
-                        .endStatement();
-                break;
-        }
-        String listCoercionVar = descriptor.getListCoercion();
-        if (listCoercionVar != null) {
-            //need to initialize the list coercion to null
-            initSource.beginAssignment(listCoercionVar, SourceGenConstants.COLLECTION_TYPE)
-                    .nullLiteral().endStatement();
-        }
-    }
-
-    @Override
-    public void visit(Conditional.Start conditional) {
-        VariableDescriptor descriptor = analyzer.descriptor(conditional.getVariable());
-        boolean negate = !conditional.getExpectedTruthValue();
-        source.beginIf();
-        if (negate) {
-            source.negation();
-        }
-        if (descriptor.getType() == Type.BOOLEAN) {
-            source.append(descriptor.getAssignedName());
-        } else {
-            source.startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, ObjectModel.BOOLEAN_COERCE)
-                    .append(descriptor.getAssignedName())
-                    .endCall();
-        }
-        source.completeIf();
-    }
-
-    @Override
-    public void visit(Conditional.End conditionalEnd) {
-        source.endIf();
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBinding) {
-        source.startBlock();
-        TypeInfo typeInfo = TypeInference.inferTypes(variableBinding.getExpression(), analyzer);
-        Type type = typeInfo.typeOf(variableBinding.getExpression());
-        String properName = declare(variableBinding.getVariableName(), type);
-        source.beginAssignment(properName, type.getNativeClass());
-        ExpressionTranslator.buildExpression(
-                variableBinding.getExpression(),
-                source,
-                analyzer,
-                typeInfo);
-        source.endStatement();
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-        VariableDescriptor descriptor = analyzer.endVariable();
-        String listCoercionVar = descriptor.getListCoercion();
-        if (listCoercionVar != null) {
-            //this variable was coerced to list at some point
-            generateCoercionClearing(listCoercionVar);
-        }
-        source.endBlock();
-    }
-
-    @Override
-    public void visit(VariableBinding.Global globalAssignment) {
-        TypeInfo typeInfo = TypeInference.inferTypes(globalAssignment.getExpression(), analyzer);
-        VariableDescriptor descriptor = analyzer.declareGlobal(globalAssignment.getVariableName());
-        String name = descriptor.getAssignedName();
-        source.append(name).assign();
-        ExpressionTranslator.buildExpression(
-                globalAssignment.getExpression(),
-                source,
-                analyzer,
-                typeInfo);
-        source.endStatement();
-        String listCoercionVar = descriptor.getListCoercion();
-        if (listCoercionVar != null) {
-            //variable was used for list coercion. Generating a coercion clearing
-            generateCoercionClearing(listCoercionVar);
-        }
-    }
-
-    @Override
-    public void visit(OutVariable outVariable) {
-        String variable = analyzer.assignedName(outVariable.getVariableName());
-        source.startStatement()
-                .startMethodCall(SourceGenConstants.OUT_BUFFER, SourceGenConstants.WRITE_METHOD)
-                .startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, ObjectModel.STRING_COERCE)
-                .append(variable)
-                .endCall()
-                .endCall()
-                .endStatement();
-    }
-
-    @Override
-    public void visit(OutText outText) {
-        source.startStatement()
-                .startMethodCall(SourceGenConstants.OUT_BUFFER, SourceGenConstants.WRITE_METHOD)
-                .stringLiteral(outText.getText())
-                .endCall()
-                .endStatement();
-    }
-
-    @Override
-    public void visit(Loop.Start loop) {
-        VariableDescriptor descriptor = analyzer.descriptor(loop.getListVariable());
-        String listVariable = descriptor.getAssignedName();
-        String collectionVar = descriptor.requireListCoercion();
-        source.beginIf().append(collectionVar).equality().nullLiteral().completeIf()
-                .startStatement()
-                .append(collectionVar)
-                .assign()
-                .startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, ObjectModel.COLLECTION_COERCE)
-                .append(listVariable)
-                .endCall()
-                .endStatement()
-                .endIf();
-        String indexVar = declare(loop.getIndexVariable(), Type.LONG);
-        source.beginAssignment(indexVar, Type.LONG.getNativeClass()).number(0).endStatement();
-        String itemVar = declare(loop.getItemVariable(), Type.UNKNOWN);
-        source.beginFor(itemVar, collectionVar);
-        loopStatusStack.push(indexVar);
-    }
-
-    @Override
-    public void visit(Loop.End loopEnd) {
-        String indexVar = loopStatusStack.pop();
-        source.startStatement().append(indexVar).increment().endStatement();
-        source.endFor();
-        analyzer.endVariable();
-        analyzer.endVariable();
-    }
-
-    @Override
-    public void visit(BufferControl.Push bufferPush) {
-        source.startStatement()
-                .startMethodCall(SourceGenConstants.OUT_BUFFER, SourceGenConstants.PUSH_BUFFER_METHOD)
-                .endCall()
-                .endStatement();
-    }
-
-    @Override
-    public void visit(BufferControl.Pop bufferPop) {
-        source.startBlock();
-        String outputVar = declare(bufferPop.getVariableName(), Type.STRING);
-        source.beginAssignment(outputVar, Type.STRING.getNativeClass())
-                .startMethodCall(SourceGenConstants.OUT_BUFFER, SourceGenConstants.POP_BUFFER_METHOD)
-                .endCall()
-                .endStatement();
-    }
-
-    @Override
-    public void visit(Procedure.Start startProcedure) {
-        UnitBuilder subTemplateUnit = unitBuilder.newSubBuilder(startProcedure.getName(), startProcedure.getParameters());
-        analyzer.declareTemplate(startProcedure.getName());
-        control.push(new CodeGenVisitor(subTemplateUnit, control));
-    }
-
-    @Override
-    public void visit(Procedure.End endProcedure) {
-        CodeGenVisitor previous = (CodeGenVisitor) control.pop();
-        previous.finish();
-    }
-
-    @Override
-    public void visit(Procedure.Call procedureCall) {
-        String templateVar = analyzer.assignedName(procedureCall.getTemplateVariable());
-        String argVar = analyzer.assignedName(procedureCall.getArgumentsVariable());
-        source.startStatement()
-                .startCall(SourceGenConstants.CALL_UNIT_METHOD, false)
-                .append(SourceGenConstants.RENDER_CONTEXT_INSTANCE)
-                .separateArgument()
-                .append(templateVar)
-                .separateArgument()
-                .append(argVar)
-                .endCall()
-                .endStatement();
-    }
-
-    private String declare(String originalName, Type type) {
-        return analyzer.declareVariable(originalName, type).getAssignedName();
-    }
-
-    private void generateCoercionClearing(String coercionVariableName) {
-        source.startStatement().append(coercionVariableName).assign().nullLiteral().endStatement();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CompilationOutput.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CompilationOutput.java
deleted file mode 100644
index ccc8a8f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/CompilationOutput.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.Map;
-
-/**
- * Result from compilation
- */
-public class CompilationOutput {
-
-    private final String mainBody;
-    private final Map<String, CompilationOutput> subTemplates;
-
-    public CompilationOutput(String mainBody, Map<String, CompilationOutput> subTemplates) {
-        this.mainBody = mainBody;
-        this.subTemplates = subTemplates;
-    }
-
-    public String getMainBody() {
-        return mainBody;
-    }
-
-    public Map<String, CompilationOutput> getSubTemplates() {
-        return subTemplates;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/ExpressionTranslator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/ExpressionTranslator.java
deleted file mode 100644
index a6b7bb3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/ExpressionTranslator.java
+++ /dev/null
@@ -1,192 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiled.operator.BinaryOpGen;
-import org.apache.sling.scripting.sightly.compiled.operator.Operators;
-import org.apache.sling.scripting.sightly.compiled.operator.UnaryOpGen;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperator;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiled.operator.BinaryOpGen;
-import org.apache.sling.scripting.sightly.compiled.operator.Operators;
-import org.apache.sling.scripting.sightly.compiled.operator.UnaryOpGen;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.*;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-
-
-/**
- * Builds expressions within a sling source file.
- */
-public final class ExpressionTranslator extends SideEffectVisitor {
-
-    private final JavaSource source;
-    private final VariableAnalyzer analyzer;
-    private final TypeInfo typeInfo;
-
-    private ExpressionTranslator(JavaSource source, VariableAnalyzer analyzer, TypeInfo typeInfo) {
-        this.source = source;
-        this.analyzer = analyzer;
-        this.typeInfo= typeInfo;
-    }
-
-    public static void buildExpression(ExpressionNode node,
-                                       JavaSource source,
-                                       VariableAnalyzer analyzer,
-                                       TypeInfo typeInfo) {
-        ExpressionTranslator builder = new ExpressionTranslator(source, analyzer, typeInfo);
-        builder.traverse(node);
-    }
-
-    public void traverse(ExpressionNode node) {
-        visit(node);
-    }
-
-    private void visit(ExpressionNode node) {
-        node.accept(this);
-    }
-
-    @Override
-    public void visit(PropertyAccess propertyAccess) {
-        if (typeInfo.typeOf(propertyAccess.getTarget()) == Type.MAP) {
-            //Special optimization for maps
-            visit(propertyAccess.getTarget());
-            source.startCall(SourceGenConstants.MAP_GET, true);
-            visit(propertyAccess.getProperty());
-            source.endCall();
-        } else {
-            source.startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, ObjectModel.PROPERTY_ACCESS);
-            visit(propertyAccess.getTarget());
-            source.separateArgument();
-            visit(propertyAccess.getProperty());
-            source.endCall();
-        }
-    }
-
-    @Override
-    public void visit(Identifier identifier) {
-        String safeName = analyzer.assignedName(identifier.getName());
-        source.append(safeName);
-    }
-
-    @Override
-    public void visit(StringConstant text) {
-        source.stringLiteral(text.getText());
-    }
-
-    @Override
-    public void visit(BinaryOperation binaryOperation) {
-        BinaryOpGen opGen = Operators.generatorFor(binaryOperation.getOperator());
-        source.startExpression();
-        opGen.generate(source, this,
-                typeInfo.getTyped(binaryOperation.getLeftOperand()),
-                typeInfo.getTyped(binaryOperation.getRightOperand()));
-        source.endExpression();
-    }
-
-    @Override
-    public void visit(BooleanConstant booleanConstant) {
-        source.append(Boolean.toString(booleanConstant.getValue()));
-    }
-
-    @Override
-    public void visit(NumericConstant numericConstant) {
-        source.append(numericConstant.getValue().toString()); //todo: check correctness
-    }
-
-    @Override
-    public void visit(UnaryOperation unaryOperation) {
-        UnaryOperator operator = unaryOperation.getOperator();
-        ExpressionNode operand = unaryOperation.getTarget();
-        UnaryOpGen unaryOpGen = Operators.generatorFor(operator);
-        source.startExpression();
-        unaryOpGen.generate(source, this, typeInfo.getTyped(operand));
-        source.endExpression();
-    }
-
-    @Override
-    public void visit(TernaryOperator ternaryOperator) {
-        GenHelper.generateTernary(source, this,
-                typeInfo.getTyped(ternaryOperator.getCondition()),
-                typeInfo.getTyped(ternaryOperator.getThenBranch()),
-                typeInfo.getTyped(ternaryOperator.getElseBranch()));
-    }
-
-    @Override
-    public void visit(RuntimeCall runtimeCall) {
-        source.startMethodCall(SourceGenConstants.RUNTIME_INSTANCE, SourceGenConstants.RUNTIME_CALL_METHOD)
-                .stringLiteral(runtimeCall.getFunctionName());
-        for (ExpressionNode arg : runtimeCall.getArguments()) {
-            source.separateArgument();
-            visit(arg);
-        }
-        source.endCall();
-    }
-
-    @Override
-    public void visit(MapLiteral mapLiteral) {
-        source.startCall(SourceGenConstants.START_MAP_METHOD).endCall();
-        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
-            source.startCall(SourceGenConstants.MAP_TYPE_ADD, true)
-                    .stringLiteral(entry.getKey())
-                    .separateArgument();
-            visit(entry.getValue());
-            source.endCall();
-        }
-    }
-
-    @Override
-    public void visit(ArrayLiteral arrayLiteral) {
-        source.startExpression().startArray();
-        boolean needsComma = false;
-        for (ExpressionNode node : arrayLiteral.getItems()) {
-            if (needsComma) {
-                source.separateArgument();
-            }
-            visit(node);
-            needsComma = true;
-        }
-        source.endArray().endExpression();
-    }
-
-    @Override
-    public void visit(NullLiteral nullLiteral) {
-        source.nullLiteral();
-    }
-
-    public VariableAnalyzer getAnalyzer() {
-        return analyzer;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/GenHelper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/GenHelper.java
deleted file mode 100644
index 940d4c5..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/GenHelper.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiled.operator.TypedNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiled.operator.TypedNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-
-/**
- * Helper for code generation
- */
-public class GenHelper {
-
-    public static void generateTernary(JavaSource source, SideEffectVisitor visitor,
-                                TypedNode condition, TypedNode thenBranch, TypedNode elseBranch) {
-        source.startExpression();
-        typeCoercion(source, visitor, condition, Type.BOOLEAN);
-        source.conditional();
-        thenBranch.getNode().accept(visitor);
-        source.conditionalBranchSep();
-        elseBranch.getNode().accept(visitor);
-        source.endExpression();
-    }
-
-    public static void typeCoercion(JavaSource source, SideEffectVisitor visitor, TypedNode node, Type type) {
-        if (type == node.getType() || type == Type.UNKNOWN) {
-            node.getNode().accept(visitor);
-        } else if (type == Type.LONG && node.getType() == Type.DOUBLE) {
-            callLongCoercion(source, visitor, node.getNode());
-        } else {
-            String coercionMethod = dynamicCoercions.get(type);
-            if (coercionMethod == null) {
-                throw new UnsupportedOperationException("Cannot generate coercion to type " + type);
-            }
-            callDynamicCoercion(source, visitor, node.getNode(), dynamicCoercions.get(type));
-        }
-    }
-
-    public static void listCoercion(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
-        ExpressionNode node = typedNode.getNode();
-        if (node instanceof Identifier) {
-            //using list coercion caching optimization
-            VariableDescriptor descriptor = visitor.getAnalyzer().descriptor(((Identifier) node).getName());
-            String listCoercionVar = descriptor.requireListCoercion();
-            source.startExpression()
-                    .append(listCoercionVar)
-                    .equality()
-                    .nullLiteral()
-                    .conditional()
-                    .startExpression()
-                    .append(listCoercionVar)
-                    .assign()
-                    .startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, ObjectModel.COLLECTION_COERCE);
-            node.accept(visitor);
-            source
-                    .endCall()
-                    .endExpression()
-                    .conditionalBranchSep()
-                    .append(listCoercionVar)
-                    .endExpression();
-        } else {
-            source.startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, ObjectModel.COLLECTION_COERCE);
-            typedNode.getNode().accept(visitor);
-            source.endCall();
-        }
-    }
-
-    private static void callLongCoercion(JavaSource source, SideEffectVisitor visitor, ExpressionNode node) {
-        source.cast(Type.LONG.getNativeClass());
-        source.startExpression();
-        node.accept(visitor);
-        source.endExpression();
-    }
-
-    private static void callDynamicCoercion(JavaSource source, SideEffectVisitor visitor, ExpressionNode node, String methodName) {
-        source.startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, methodName);
-        node.accept(visitor);
-        source.endCall();
-    }
-
-    private static final Map<Type, String> dynamicCoercions = new HashMap<Type, String>();
-
-    static {
-        dynamicCoercions.put(Type.STRING, ObjectModel.STRING_COERCE);
-        dynamicCoercions.put(Type.BOOLEAN, ObjectModel.BOOLEAN_COERCE);
-        dynamicCoercions.put(Type.LONG, ObjectModel.NUMERIC_COERCE);
-        dynamicCoercions.put(Type.DOUBLE, ObjectModel.NUMERIC_COERCE);
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaClassBackend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaClassBackend.java
deleted file mode 100644
index 9fdcf2f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaClassBackend.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiled;
-
-import org.apache.sling.scripting.sightly.compiler.CompilerBackend;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.VisitorHandler;
-import org.apache.sling.scripting.sightly.compiler.visitor.StatefulVisitor;
-import org.apache.sling.scripting.sightly.compiler.visitor.StatefulVisitor;
-
-/**
- * Backend which generates a Java class.
- */
-public class JavaClassBackend implements CompilerBackend {
-
-    private UnitBuilder unitBuilder = new UnitBuilder();
-
-    @Override
-    public void handle(CommandStream stream) {
-        StatefulVisitor statefulVisitor = new StatefulVisitor();
-        final CodeGenVisitor visitor = new CodeGenVisitor(unitBuilder, statefulVisitor.getControl());
-        statefulVisitor.initializeWith(visitor);
-        stream.addHandler(new VisitorHandler(statefulVisitor) {
-            @Override
-            public void onDone() {
-                super.onDone();
-                visitor.finish();
-            }
-        });
-    }
-
-    public CompilationOutput build() {
-        return this.unitBuilder.build();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaSource.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaSource.java
deleted file mode 100644
index 3d7ab9c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/JavaSource.java
+++ /dev/null
@@ -1,264 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiled;
-
-import org.apache.commons.lang.StringEscapeUtils;
-
-/**
- * Builder object for a Java class printing method.
- */
-public class JavaSource {
-
-    private static final String INDENT = "    ";
-
-    private int indentLevel;
-    private final StringBuilder builder = new StringBuilder();
-
-    public JavaSource prepend(String str) {
-        builder.insert(0, str);
-        return this;
-    }
-
-    public JavaSource beginIf() {
-        indent().append("if (");
-        return this;
-    }
-
-    public JavaSource completeIf() {
-        append(") {\n");
-        incIndent();
-        return this;
-    }
-
-    public JavaSource endBlock() {
-        decIndent();
-        indent().append("}\n");
-        return this;
-    }
-
-    public JavaSource comment(String text) {
-        indent().append("//").append(text).append("\n");
-        return this;
-    }
-
-    public JavaSource assign() {
-        return append(" = ");
-    }
-
-    public JavaSource number(int value) {
-        return append(Integer.toString(value));
-    }
-
-    public JavaSource increment() {
-        return append("++");
-    }
-
-    public JavaSource beginAssignment(String variable, String type) {
-        return declare(variable, type).assign();
-    }
-
-    public JavaSource beginAssignment(String variable) {
-        return beginAssignment(variable, "Object");
-    }
-
-    public JavaSource declare(String variable, String type) {
-        return startStatement().append(type).append(" ").append(variable);
-    }
-
-    public JavaSource declare(String variable) {
-        return declare(variable, "Object");
-    }
-
-    public JavaSource equality() {
-        return append(" == ");
-    }
-
-    public JavaSource startCall(String methodName, boolean useDot) {
-        if (useDot) {
-            builder.append('.');
-        }
-        builder.append(methodName).append('(');
-        return this;
-    }
-
-    public JavaSource startCall(String methodName) {
-        return startCall(methodName, false);
-    }
-
-    public JavaSource startMethodCall(String target, String method) {
-        return append(target).startCall(method, true);
-    }
-
-    public JavaSource startArray() {
-        return append("new Object[] {");
-    }
-
-    public JavaSource endArray() {
-        return append("}");
-    }
-
-    public JavaSource startStatement() {
-        indent();
-        return this;
-    }
-
-    public JavaSource nullLiteral() {
-        return append("null");
-    }
-
-    public JavaSource separateArgument() {
-        builder.append(", ");
-        return this;
-    }
-
-    public JavaSource stringLiteral(String text) {
-        builder.append('"')
-                .append(StringEscapeUtils.escapeJava(text))
-                .append('"');
-        return this;
-    }
-
-    public JavaSource startExpression() {
-        builder.append('(');
-        return this;
-    }
-
-    public JavaSource endExpression() {
-        builder.append(')');
-        return this;
-    }
-
-    public JavaSource endCall() {
-        builder.append(')');
-        return this;
-    }
-
-    public JavaSource startBlock() {
-        indent().append("{\n");
-        incIndent();
-        return this;
-    }
-
-    public JavaSource beginFor(String itemVariable, String listVariable) {
-        startStatement()
-                .append("for (Object ")
-                .append(itemVariable)
-                .append(" : ")
-                .append(listVariable)
-                .append(") {\n");
-        incIndent();
-        return this;
-    }
-
-    public JavaSource endFor() {
-        return endBlock();
-    }
-
-    public JavaSource endIf() {
-        return endBlock();
-    }
-
-    public JavaSource beginNewInstanceCall(String className) {
-        return append("new ").append(className).append("(");
-    }
-
-    public JavaSource append(String str) {
-        builder.append(str);
-        return this;
-    }
-
-    public JavaSource endStatement() {
-        builder.append(";\n");
-        return this;
-    }
-
-    public JavaSource cast(String type) {
-        return append("(").append(type).append(")");
-    }
-
-    public JavaSource operator(String op) {
-        return append(" ").append(op).append(" ");
-    }
-
-    public JavaSource beginAnonymousInstance(String className) {
-        append("new ").append(className).append("() {\n");
-        incIndent();
-        return this;
-    }
-
-    public JavaSource endAnonymousInstance() {
-        decIndent();
-        append("}");
-        return this;
-    }
-
-    public JavaSource beginMethod(String name, String returnType) {
-        return startStatement().append("public ").append(returnType).append(" ").append(name).append("(");
-    }
-
-    public JavaSource methodParameter(String name, String type) {
-        return append(type).append(" ").append(name);
-    }
-
-    public JavaSource completeMethodSignature() {
-        append(") {\n");
-        incIndent();
-        return this;
-    }
-
-    public JavaSource endMethod() {
-        return endBlock();
-    }
-
-    public JavaSource conditional() {
-        return append(" ? ");
-    }
-
-    public JavaSource conditionalBranchSep() {
-        return append(" : ");
-    }
-
-    public JavaSource negation() {
-        return append("!");
-    }
-
-    public JavaSource newLine() {
-        return append("\n");
-    }
-
-    private StringBuilder indent() {
-        for (int i = 0; i < indentLevel; i++) {
-            builder.append(INDENT);
-        }
-        return builder;
-    }
-
-    private void incIndent() {
-        indentLevel++;
-    }
-
-    private void decIndent() {
-        indentLevel--;
-    }
-
-    @Override
-    public String toString() {
-        return builder.toString();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/SourceGenConstants.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/SourceGenConstants.java
deleted file mode 100644
index 5533842..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/SourceGenConstants.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiled;
-
-/**
- * Names related to Java source generation.
- */
-public class SourceGenConstants {
-
-    public static final String OUT_BUFFER = "out";
-
-    public static final String WRITE_METHOD = "write";
-
-    public static final String COLLECTION_TYPE = "Collection";
-
-    public static final String BINDINGS_FIELD = "bindings";
-
-    public static final String BINDINGS_GET_METHOD = "get";
-
-    public static final String PUSH_BUFFER_METHOD = "push";
-
-    public static final String POP_BUFFER_METHOD = "pop";
-
-    public static final String START_MAP_METHOD = "obj";
-
-    public static final String MAP_TYPE_ADD = "with";
-
-    public static final String CALL_UNIT_METHOD = "callUnit";
-
-    public static final String RENDER_CONTEXT_INSTANCE = "renderContext";
-
-    public static final String OBJ_MODEL_INSTANCE = "objectModel";
-
-    public static final String RUNTIME_INSTANCE = "runtime";
-
-    public static final String RUNTIME_CALL_METHOD = "call";
-
-    public static final String COLLECTION_LENGTH_METHOD = "size";
-
-    public static final String MAP_GET = "get";
-    public static final String TRIM_METHOD = "trim";
-    public static final String STRING_EMPTY = "isEmpty";
-    public static final String OBJ_GET = "get";
-    public static final String ARGUMENTS_FIELD = "arguments";
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/Type.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/Type.java
deleted file mode 100644
index a6911f9..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/Type.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-/**
- * Type inferred for an expression
- */
-public enum Type {
-    UNKNOWN("Object", false),
-    STRING("String", false),
-    LONG("long", true),
-    DOUBLE("double", true),
-    BOOLEAN("boolean", true),
-    MAP("java.util.Map", false);
-
-    private final String nativeClass;
-    private final boolean isPrimitive;
-
-    Type(String nativeClass, boolean isPrimitive) {
-        this.nativeClass = nativeClass;
-        this.isPrimitive = isPrimitive;
-    }
-
-    public String getNativeClass() {
-        return nativeClass;
-    }
-
-    public boolean isPrimitive() {
-        return isPrimitive;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInference.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInference.java
deleted file mode 100644
index 002c5ad..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInference.java
+++ /dev/null
@@ -1,159 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.IdentityHashMap;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiled.operator.BinaryOpGen;
-import org.apache.sling.scripting.sightly.compiled.operator.Operators;
-import org.apache.sling.scripting.sightly.compiled.operator.UnaryOpGen;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-
-/**
- * Expression translator which uses type information
- */
-public final class TypeInference implements NodeVisitor<Type> {
-
-    private final VariableAnalyzer analyzer;
-    private final Map<ExpressionNode, Type> inferMap = new IdentityHashMap<ExpressionNode, Type>();
-
-
-    public static TypeInfo inferTypes(ExpressionNode node, VariableAnalyzer analyzer) {
-        TypeInference typeInference = new TypeInference(analyzer);
-        typeInference.infer(node);
-        return new TypeInfo(typeInference.inferMap);
-    }
-
-    private TypeInference(VariableAnalyzer analyzer) {
-        this.analyzer = analyzer;
-    }
-
-
-
-    private Type infer(ExpressionNode node) {
-        Type type = node.accept(this);
-        inferMap.put(node, type);
-        return type;
-    }
-
-    @Override
-    public Type evaluate(PropertyAccess propertyAccess) {
-        infer(propertyAccess.getTarget());
-        infer(propertyAccess.getProperty());
-        return Type.UNKNOWN;
-    }
-
-    @Override
-    public Type evaluate(Identifier identifier) {
-        return analyzer.descriptor(identifier.getName()).getType();
-    }
-
-    @Override
-    public Type evaluate(StringConstant text) {
-        return Type.STRING;
-    }
-
-    @Override
-    public Type evaluate(BinaryOperation binaryOperation) {
-        Type leftType = infer(binaryOperation.getLeftOperand());
-        Type rightType = infer(binaryOperation.getRightOperand());
-        BinaryOpGen opGen = Operators.generatorFor(binaryOperation.getOperator());
-        return opGen.returnType(leftType, rightType);
-    }
-
-    @Override
-    public Type evaluate(BooleanConstant booleanConstant) {
-        return Type.BOOLEAN;
-    }
-
-    @Override
-    public Type evaluate(NumericConstant numericConstant) {
-        Number number = numericConstant.getValue();
-        if (number instanceof Integer || number instanceof Long) {
-            return Type.LONG;
-        }
-        if (number instanceof Float || number instanceof Double) {
-            return Type.DOUBLE;
-        }
-        return Type.UNKNOWN;
-    }
-
-    @Override
-    public Type evaluate(UnaryOperation unaryOperation) {
-        infer(unaryOperation.getTarget());
-        UnaryOpGen opGen = Operators.generatorFor(unaryOperation.getOperator());
-        return opGen.returnType(infer(unaryOperation.getTarget()));
-    }
-
-    @Override
-    public Type evaluate(TernaryOperator ternaryOperator) {
-        infer(ternaryOperator.getCondition());
-        Type thenType = infer(ternaryOperator.getThenBranch());
-        Type elseType = infer(ternaryOperator.getElseBranch());
-        if (thenType.equals(elseType)) {
-            return thenType;
-        }
-        return Type.UNKNOWN;
-    }
-
-    @Override
-    public Type evaluate(RuntimeCall runtimeCall) {
-        inferAll(runtimeCall.getArguments());
-        return Type.UNKNOWN;
-    }
-
-    @Override
-    public Type evaluate(MapLiteral mapLiteral) {
-        inferAll(mapLiteral.getMap().values());
-        return Type.MAP;
-    }
-
-    @Override
-    public Type evaluate(ArrayLiteral arrayLiteral) {
-        inferAll(arrayLiteral.getItems());
-        return Type.UNKNOWN;
-    }
-
-    @Override
-    public Type evaluate(NullLiteral nullLiteral) {
-        return Type.UNKNOWN;
-    }
-
-    private void inferAll(Iterable<ExpressionNode> nodes) {
-        for (ExpressionNode node : nodes) {
-            infer(node);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInfo.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInfo.java
deleted file mode 100644
index 71aeeb4..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/TypeInfo.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiled.operator.TypedNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiled.operator.TypedNode;
-
-/**
- * Provide type information for expressions
- */
-public class TypeInfo {
-
-    private final Map<ExpressionNode, Type> typeMap;
-
-    public TypeInfo(Map<ExpressionNode, Type> typeMap) {
-        this.typeMap = typeMap;
-    }
-
-    public Type typeOf(ExpressionNode node) {
-        Type type = typeMap.get(node);
-        if (type == null) {
-            return Type.UNKNOWN;
-        }
-        return type;
-    }
-
-    public TypedNode getTyped(ExpressionNode expressionNode) {
-        return new TypedNode(expressionNode, typeOf(expressionNode));
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/UnitBuilder.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/UnitBuilder.java
deleted file mode 100644
index 32bec9a..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/UnitBuilder.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-/**
- * Builder for compiled sources
- */
-public class UnitBuilder {
-
-    private final JavaSource source = new JavaSource();
-    private final Set<String> parameters;
-    private final Map<String, UnitBuilder> subTemplates = new HashMap<String, UnitBuilder>();
-
-    public UnitBuilder() {
-        this(Collections.<String>emptySet());
-    }
-
-    public UnitBuilder(Set<String> parameters) {
-        this.parameters = parameters;
-    }
-
-    public UnitBuilder newSubBuilder(String name, Set<String> parameters) {
-        UnitBuilder unitBuilder = new UnitBuilder(parameters);
-        subTemplates.put(name, unitBuilder);
-        return unitBuilder;
-    }
-
-    public JavaSource getSource() {
-        return source;
-    }
-
-    public Set<String> getParameters() {
-        return parameters;
-    }
-
-    public CompilationOutput build() {
-        Map<String, CompilationOutput> map = new HashMap<String, CompilationOutput>();
-        for (Map.Entry<String, UnitBuilder> entry : subTemplates.entrySet()) {
-            map.put(entry.getKey(), entry.getValue().build());
-        }
-        return new CompilationOutput(source.toString(), map);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableAnalyzer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableAnalyzer.java
deleted file mode 100644
index 7f894cc..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableAnalyzer.java
+++ /dev/null
@@ -1,223 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-
-import org.apache.sling.scripting.sightly.compiler.util.VariableTracker;
-import org.apache.sling.scripting.sightly.compiler.util.VariableTracker;
-
-/**
- * Data structure used in the analysis of variables
- * during the compilation process
- */
-class VariableAnalyzer {
-
-    private static final HashSet<String> javaKeywords = new HashSet<String>();
-    private final VariableTracker<VariableDescriptor> tracker = new VariableTracker<VariableDescriptor>();
-    private final List<VariableDescriptor> variables = new ArrayList<VariableDescriptor>();
-    private final HashMap<String, VariableDescriptor> dynamicVariables = new HashMap<String, VariableDescriptor>();
-    private final HashMap<String, VariableDescriptor> staticVariables = new HashMap<String, VariableDescriptor>();
-    private static final String DYNAMIC_PREFIX = "_dynamic_";
-    private static final String GLOBAL_PREFIX = "_global_";
-
-    /**
-     * Mark the declaration of a variable in the Java code
-     * @param originalName - the original name of the variable
-     * @return - a variable descriptor uniquely assigned to this variable
-     */
-    public VariableDescriptor declareVariable(String originalName, Type type) {
-        originalName = originalName.toLowerCase();
-        String assignedName = findSafeName(originalName);
-        VariableDescriptor descriptor = new VariableDescriptor(originalName, assignedName, type, VariableScope.SCOPED);
-        tracker.pushVariable(originalName, descriptor);
-        variables.add(descriptor);
-        return descriptor;
-    }
-
-    /**
-     * Declare a global variable. Redundant declarations are ignored
-     * @param originalName - the original name of the variable
-     * @return a variable descriptor
-     */
-    public VariableDescriptor declareGlobal(String originalName) {
-        originalName = originalName.toLowerCase();
-        VariableDescriptor descriptor = staticVariables.get(originalName);
-        if (descriptor == null) {
-            String assignedName = findGlobalName(originalName);
-            descriptor = new VariableDescriptor(originalName, assignedName, Type.UNKNOWN, VariableScope.GLOBAL);
-            variables.add(descriptor);
-            staticVariables.put(originalName, descriptor);
-        }
-        return descriptor;
-    }
-
-    /**
-     * Mark this variable as a template
-     * @param originalName - the original name of the variable
-     * @return a variable descriptor
-     */
-    public VariableDescriptor declareTemplate(String originalName) {
-        originalName = originalName.toLowerCase();
-        VariableDescriptor descriptor = dynamicDescriptor(originalName);
-        descriptor.markAsTemplate();
-        return descriptor;
-    }
-
-    /**
-     * Mark the end of a variable scope
-     */
-    public VariableDescriptor endVariable() {
-        VariableDescriptor descriptor = tracker.peek().getValue();
-        tracker.popVariable();
-        return descriptor;
-    }
-
-    /**
-     * Get a the descriptor for the given variable
-     * @param name the original lowerName of the variable
-     * @return the variable descriptor. If the variable is not in scope,
-     * then a dynamic variable descriptor is provided
-     */
-    public VariableDescriptor descriptor(String name) {
-        String lowerName = name.toLowerCase();
-        VariableDescriptor descriptor = tracker.get(lowerName);
-        if (descriptor == null) {
-            descriptor = staticVariables.get(lowerName);
-        }
-        if (descriptor == null) {
-            descriptor = dynamicDescriptor(lowerName);
-        }
-        return descriptor;
-    }
-
-    /**
-     * Get the collection of all the variables encountered so far
-     * @return an unmodifiable list of all the variables tracked by this analyzer
-     */
-    public Collection<VariableDescriptor> allVariables() {
-        return Collections.unmodifiableList(variables);
-    }
-
-    /**
-     * Shortcut method that returns the assigned name for the given
-     * variable
-     * @param original the original variable name
-     * @return the assigned name for this compilation process
-     */
-    public String assignedName(String original) {
-        return descriptor(original).getAssignedName();
-    }
-
-    private VariableDescriptor dynamicDescriptor(String original) {
-        VariableDescriptor descriptor = dynamicVariables.get(original);
-        if (descriptor == null) {
-            String dynamicName = findDynamicName(original);
-            descriptor = new VariableDescriptor(original, dynamicName, Type.UNKNOWN, VariableScope.DYNAMIC);
-            dynamicVariables.put(original, descriptor);
-            variables.add(descriptor);
-        }
-        return descriptor;
-    }
-
-    private String findDynamicName(String original) {
-        return DYNAMIC_PREFIX + original;
-    }
-
-    private String findGlobalName(String original) {
-        return GLOBAL_PREFIX + syntaxSafeName(original);
-    }
-
-    private String findSafeName(String original) {
-        int occurrenceCount = tracker.getOccurrenceCount(original);
-        String syntaxSafe = syntaxSafeName(original);
-        if (occurrenceCount == 0) {
-            return syntaxSafe; //no other declarations in scope. Use this very name
-        } else {
-            return original + "_" + occurrenceCount;
-        }
-    }
-
-    private String syntaxSafeName(String original) {
-        if (javaKeywords.contains(original)) {
-            return "_" + original;
-        }
-        return original.replaceAll("-", "_");
-    }
-
-    static {
-        javaKeywords.add("abstract");
-        javaKeywords.add("continue");
-        javaKeywords.add("for");
-        javaKeywords.add("new");
-        javaKeywords.add("switch");
-        javaKeywords.add("assert");
-        javaKeywords.add("default");
-        javaKeywords.add("goto");
-        javaKeywords.add("package");
-        javaKeywords.add("synchronized");
-        javaKeywords.add("boolean");
-        javaKeywords.add("do");
-        javaKeywords.add("if");
-        javaKeywords.add("private");
-        javaKeywords.add("this");
-        javaKeywords.add("break");
-        javaKeywords.add("double");
-        javaKeywords.add("implements");
-        javaKeywords.add("protected");
-        javaKeywords.add("throw");
-        javaKeywords.add("byte");
-        javaKeywords.add("else");
-        javaKeywords.add("import");
-        javaKeywords.add("public");
-        javaKeywords.add("throws");
-        javaKeywords.add("case");
-        javaKeywords.add("enum");
-        javaKeywords.add("instanceof");
-        javaKeywords.add("return");
-        javaKeywords.add("transient");
-        javaKeywords.add("catch");
-        javaKeywords.add("extends");
-        javaKeywords.add("int");
-        javaKeywords.add("short");
-        javaKeywords.add("try");
-        javaKeywords.add("char");
-        javaKeywords.add("final");
-        javaKeywords.add("interface");
-        javaKeywords.add("static");
-        javaKeywords.add("void");
-        javaKeywords.add("class");
-        javaKeywords.add("finally");
-        javaKeywords.add("long");
-        javaKeywords.add("strictfp");
-        javaKeywords.add("volatile");
-        javaKeywords.add("const");
-        javaKeywords.add("float");
-        javaKeywords.add("native");
-        javaKeywords.add("super");
-        javaKeywords.add("while");
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableDescriptor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableDescriptor.java
deleted file mode 100644
index b5d2d0d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableDescriptor.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-/**
- * Information about a variable during the compilation process
- */
-public class VariableDescriptor {
-
-    private final String originalName;
-    private final String assignedName;
-    private VariableScope scope;
-    private String listCoercion;
-    private final Type type;
-    private boolean templateVariable;
-
-    public VariableDescriptor(String originalName, String assignedName, Type type, VariableScope scope) {
-        this.originalName = originalName;
-        this.assignedName = assignedName;
-        this.scope = scope;
-        this.type = type;
-    }
-
-    /**
-     * The name of the list coercion variable
-     * @return - the variable that will hold the list coercion
-     */
-    public String requireListCoercion() {
-        if (listCoercion == null) {
-            listCoercion = assignedName + "_list_coerced$";
-        }
-        return listCoercion;
-    }
-
-    public String getListCoercion() {
-        return listCoercion;
-    }
-
-    /**
-     * Get the original name of the variable, as it was provided
-     * by the command that introduced the variable
-     * @return - the original variable name
-     */
-    public String getOriginalName() {
-        return originalName;
-    }
-
-    /**
-     * Get the assigned name for the variable - the name that will
-     * actually be used during compilation
-     * @return - the assigned variable name
-     */
-    public String getAssignedName() {
-        return assignedName;
-    }
-
-    /**
-     * Get the scope of this variable
-     * @return the variable scope
-     */
-    public VariableScope getScope() {
-        return scope;
-    }
-
-    /**
-     * Get the inferred type fot this variable
-     * @return - the class of the variable
-     */
-    public Type getType() {
-        return type;
-    }
-
-    /**
-     * Check whether this is a template variable
-     * @return true if it is a template variable
-     */
-    public boolean isTemplateVariable() {
-        return templateVariable;
-    }
-
-    /**
-     * Signal that this variable stands for a template
-     */
-    public void markAsTemplate() {
-        if (scope != VariableScope.DYNAMIC) {
-            throw new UnsupportedOperationException("Only dynamic variables can be marked as templates");
-        }
-        templateVariable = true;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableScope.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableScope.java
deleted file mode 100644
index 500a77f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/VariableScope.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled;
-
-/**
- * The scope of a variable in a Sightly script
- */
-public enum VariableScope {
-    DYNAMIC, SCOPED, GLOBAL
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/BinaryOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/BinaryOpGen.java
deleted file mode 100644
index 05ba4b3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/BinaryOpGen.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Generator for a binary operator
- */
-public interface BinaryOpGen {
-
-    Type returnType(Type leftType, Type rightType);
-
-    void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ComparisonOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ComparisonOpGen.java
deleted file mode 100644
index 8865d82..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ComparisonOpGen.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperator;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-
-/**
- * Generator for logical operators
- */
-public class ComparisonOpGen implements BinaryOpGen {
-
-    private final String javaOperator;
-    private final boolean inverted;
-    private final String runtimeMethod;
-
-    public ComparisonOpGen(BinaryOperator operator) {
-        switch (operator) {
-            case LT: runtimeMethod = ObjectModel.LT; inverted = false; javaOperator = "<"; break;
-            case GT: runtimeMethod = ObjectModel.LEQ; inverted = true; javaOperator = ">"; break;
-            case LEQ: runtimeMethod = ObjectModel.LEQ; inverted = false; javaOperator = "<="; break;
-            case GEQ: runtimeMethod = ObjectModel.LT; inverted = true; javaOperator = ">="; break;
-            default: throw new IllegalArgumentException("Operator is not a comparison operator: " + operator);
-        }
-    }
-
-    @Override
-    public Type returnType(Type left, Type right) {
-        return Type.BOOLEAN;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
-        Type type = OpHelper.sameType(left, right);
-        if (OpHelper.isNumericType(type)) {
-            generateWithOperator(source, visitor, left.getNode(), right.getNode());
-        } else {
-            generateGeneric(source, visitor, left.getNode(), right.getNode());
-        }
-    }
-
-    private void generateGeneric(JavaSource source, SideEffectVisitor visitor, ExpressionNode leftNode, ExpressionNode rightNode) {
-        if (inverted) {
-            source.negation().startExpression();
-        }
-        source.startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, runtimeMethod);
-        leftNode.accept(visitor);
-        source.separateArgument();
-        rightNode.accept(visitor);
-        source.endCall();
-        if (inverted) {
-            source.endExpression();
-        }
-    }
-
-    private void generateWithOperator(JavaSource source, SideEffectVisitor visitor,
-                                      ExpressionNode leftNode, ExpressionNode rightNode) {
-        leftNode.accept(visitor);
-        source.append(javaOperator);
-        rightNode.accept(visitor);
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ConcatenateOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ConcatenateOpGen.java
deleted file mode 100644
index ee61bc5..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/ConcatenateOpGen.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.GenHelper;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Concatenation operator generation
- */
-public final class ConcatenateOpGen implements BinaryOpGen {
-
-    public static final ConcatenateOpGen INSTANCE = new ConcatenateOpGen();
-
-    private ConcatenateOpGen() {
-    }
-
-    @Override
-    public Type returnType(Type leftType, Type rightType) {
-        return Type.STRING;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
-        GenHelper.typeCoercion(source, visitor, left, Type.STRING);
-        source.append("+");
-        GenHelper.typeCoercion(source, visitor, right, Type.STRING);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/EquivalenceOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/EquivalenceOpGen.java
deleted file mode 100644
index ed2150c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/EquivalenceOpGen.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-
-/**
- * Generator for logical operators
- */
-public class EquivalenceOpGen implements BinaryOpGen {
-
-    private final boolean negated;
-
-    public EquivalenceOpGen(boolean negated) {
-        this.negated = negated;
-    }
-
-    @Override
-    public Type returnType(Type left, Type right) {
-        return Type.BOOLEAN;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
-        Type type = OpHelper.sameType(left, right);
-        if (type != null && OpHelper.isNumericType(type) || type == Type.BOOLEAN) {
-            generateEqualsOperator(source, visitor, left.getNode(), right.getNode());
-        } else if (type != Type.UNKNOWN) {
-            generateEqualsMethod(source, visitor, left, right);
-        } else {
-            generateCheckedEquals(source, visitor, left, right);
-        }
-    }
-
-    private void generateCheckedEquals(JavaSource source, SideEffectVisitor visitor, TypedNode leftNode, TypedNode rightNode) {
-        source.startExpression();
-        leftNode.getNode().accept(visitor);
-        source.equality().nullLiteral().conditional();
-        rightNode.getNode().accept(visitor);
-        source.equality().nullLiteral();
-        source.conditionalBranchSep();
-        generateEqualsMethod(source, visitor, leftNode, rightNode);
-    }
-
-    private void generateEqualsMethod(JavaSource source, SideEffectVisitor visitor, TypedNode leftNode, TypedNode rightNode) {
-        boolean performCast = leftNode.getType().isPrimitive();
-        if (performCast) {
-            source.startExpression();
-            source.cast(Type.UNKNOWN.getNativeClass());
-        }
-        leftNode.getNode().accept(visitor);
-        if (performCast) {
-            source.endExpression();
-        }
-        source.startCall("equals", true);
-        rightNode.getNode().accept(visitor);
-        source.endCall();
-    }
-
-    private void generateEqualsOperator(JavaSource source, SideEffectVisitor visitor, ExpressionNode leftNode, ExpressionNode rightNode) {
-        leftNode.accept(visitor);
-        source.append(operator());
-        rightNode.accept(visitor);
-    }
-
-    private String operator() {
-        return (negated) ? "!=" : "==";
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/IsWhiteSpaceGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/IsWhiteSpaceGen.java
deleted file mode 100644
index 5f85552..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/IsWhiteSpaceGen.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.GenHelper;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Generator for IS_WHITESPACE operator
- */
-public final class IsWhiteSpaceGen implements UnaryOpGen {
-
-    public static final IsWhiteSpaceGen INSTANCE = new IsWhiteSpaceGen();
-
-    private IsWhiteSpaceGen() {
-    }
-
-    @Override
-    public Type returnType(Type operandType) {
-        return Type.BOOLEAN;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
-        GenHelper.typeCoercion(source, visitor, typedNode, Type.STRING);
-        source.startCall(SourceGenConstants.TRIM_METHOD, true)
-                .endCall()
-                .startCall(SourceGenConstants.STRING_EMPTY, true)
-                .endCall();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LengthOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LengthOpGen.java
deleted file mode 100644
index f4cc91f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LengthOpGen.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.GenHelper;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Generator for the collection length operator
- */
-public final class LengthOpGen implements UnaryOpGen {
-
-    public static final LengthOpGen INSTANCE = new LengthOpGen();
-
-    private LengthOpGen() {
-    }
-
-    @Override
-    public Type returnType(Type operandType) {
-        return Type.LONG;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
-        GenHelper.listCoercion(source, visitor, typedNode);
-        source.startCall(SourceGenConstants.COLLECTION_LENGTH_METHOD, true).endCall();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LogicalOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LogicalOpGen.java
deleted file mode 100644
index 893bc52..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LogicalOpGen.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.GenHelper;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-
-/**
- * Generator for logical operators
- */
-public abstract class LogicalOpGen implements BinaryOpGen {
-
-    private final String javaOperator;
-
-    protected LogicalOpGen(String javaOperator) {
-        this.javaOperator = javaOperator;
-    }
-
-    public static final LogicalOpGen AND = new LogicalOpGen("&&") {
-        @Override
-        protected void generateGeneric(JavaSource source, SideEffectVisitor visitor, TypedNode left, TypedNode right) {
-            GenHelper.generateTernary(source, visitor, left, right, left);
-        }
-    };
-
-    public static final LogicalOpGen OR = new LogicalOpGen("||") {
-        @Override
-        protected void generateGeneric(JavaSource source, SideEffectVisitor visitor, TypedNode left, TypedNode right) {
-            GenHelper.generateTernary(source, visitor, left, left, right);
-        }
-    };
-
-    @Override
-    public Type returnType(Type leftType, Type rightType) {
-        if (leftType == rightType) {
-            return leftType;
-        }
-        return Type.UNKNOWN;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
-        if (OpHelper.sameType(left, right) == Type.BOOLEAN) {
-            generateWithOperator(source, visitor, left.getNode(), right.getNode());
-        } else {
-            generateGeneric(source, visitor, left, right);
-        }
-    }
-
-    protected abstract void generateGeneric(JavaSource source, SideEffectVisitor visitor,
-                                            TypedNode left, TypedNode right);
-
-    private void generateWithOperator(JavaSource source, SideEffectVisitor visitor,
-                                      ExpressionNode leftNode, ExpressionNode rightNode) {
-        leftNode.accept(visitor);
-        source.append(javaOperator);
-        rightNode.accept(visitor);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LongOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LongOpGen.java
deleted file mode 100644
index 396f355..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/LongOpGen.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Generator for long numeric operators
- */
-public class LongOpGen extends NumericOpGen {
-
-    public LongOpGen(String javaOperator) {
-        super(javaOperator);
-    }
-
-    @Override
-    protected Type commonType(Type leftType, Type rightType) {
-        return Type.LONG;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NotOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NotOpGen.java
deleted file mode 100644
index d469357..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NotOpGen.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.GenHelper;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Generator for the not operator
- */
-public final class NotOpGen implements UnaryOpGen {
-
-    public static final NotOpGen INSTANCE = new NotOpGen();
-
-    private NotOpGen() {
-    }
-
-    @Override
-    public Type returnType(Type operandType) {
-        return Type.BOOLEAN;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
-        source.negation();
-        GenHelper.typeCoercion(source, visitor, typedNode, Type.BOOLEAN);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NumericOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NumericOpGen.java
deleted file mode 100644
index 075828c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/NumericOpGen.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.GenHelper;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Generator for numeric value
- */
-public class NumericOpGen implements BinaryOpGen {
-
-    private final String javaOperator;
-
-    public NumericOpGen(String javaOperator) {
-        this.javaOperator = javaOperator;
-    }
-
-    @Override
-    public Type returnType(Type leftType, Type rightType) {
-        return commonType(leftType, rightType);
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
-        Type commonType = commonType(left.getType(), right.getType());
-        GenHelper.typeCoercion(source, visitor, left, commonType);
-        source.append(javaOperator);
-        GenHelper.typeCoercion(source, visitor, right, commonType);
-    }
-
-    protected Type commonType(Type leftType, Type rightType) {
-        if (leftType == rightType && leftType == Type.LONG) {
-            return Type.LONG;
-        }
-        return Type.DOUBLE;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/OpHelper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/OpHelper.java
deleted file mode 100644
index c926622..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/OpHelper.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Helper class for operator generation
- */
-public class OpHelper {
-
-    public static Type sameType(TypedNode left, TypedNode right) {
-        if (left.getType().equals(right.getType())) {
-            return left.getType();
-        }
-        return null;
-    }
-
-    public static boolean isNumericType(Type type) {
-        return type == Type.LONG || type == Type.DOUBLE;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/Operators.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/Operators.java
deleted file mode 100644
index 157607f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/Operators.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import java.util.EnumMap;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperator;
-
-/**
- * Provides mappings from operators to generators
- */
-public class Operators {
-    private static final Map<BinaryOperator, BinaryOpGen> representationMap =
-            new EnumMap<BinaryOperator, BinaryOpGen>(BinaryOperator.class);
-
-    private static final Map<UnaryOperator, UnaryOpGen> unaryMapping =
-            new EnumMap<UnaryOperator, UnaryOpGen>(UnaryOperator.class);
-
-    static {
-        representationMap.put(BinaryOperator.AND, LogicalOpGen.AND);
-        representationMap.put(BinaryOperator.OR, LogicalOpGen.OR);
-        representationMap.put(BinaryOperator.CONCATENATE, ConcatenateOpGen.INSTANCE);
-        representationMap.put(BinaryOperator.ADD, new NumericOpGen("+"));
-        representationMap.put(BinaryOperator.SUB, new NumericOpGen("-"));
-        representationMap.put(BinaryOperator.MUL, new NumericOpGen("*"));
-        representationMap.put(BinaryOperator.I_DIV, new LongOpGen("/"));
-        representationMap.put(BinaryOperator.REM, new LongOpGen("%"));
-        representationMap.put(BinaryOperator.DIV, new NumericOpGen("/"));
-        representationMap.put(BinaryOperator.EQ, new EquivalenceOpGen(false));
-        representationMap.put(BinaryOperator.NEQ, new EquivalenceOpGen(true));
-        representationMap.put(BinaryOperator.LT, new ComparisonOpGen(BinaryOperator.LT));
-        representationMap.put(BinaryOperator.LEQ, new ComparisonOpGen(BinaryOperator.LEQ));
-        representationMap.put(BinaryOperator.GT, new ComparisonOpGen(BinaryOperator.GT));
-        representationMap.put(BinaryOperator.GEQ, new ComparisonOpGen(BinaryOperator.GEQ));
-        representationMap.put(BinaryOperator.STRICT_EQ, new StrictEqGenOp(false));
-        representationMap.put(BinaryOperator.STRICT_NEQ, new StrictEqGenOp(true));
-
-        unaryMapping.put(UnaryOperator.LENGTH, LengthOpGen.INSTANCE);
-        unaryMapping.put(UnaryOperator.IS_WHITESPACE, IsWhiteSpaceGen.INSTANCE);
-        unaryMapping.put(UnaryOperator.NOT, NotOpGen.INSTANCE);
-    }
-
-
-    /**
-     * Provide the signature of the given operator
-     * @param operator - the operator
-     * @return - the signature for the operator
-     */
-    public static BinaryOpGen generatorFor(BinaryOperator operator) {
-        return provide(representationMap, operator);
-    }
-
-    /**
-     * Provide the signature of the given operator
-     * @param operator - the operator
-     * @return - the signature for the operator
-     */
-    public static UnaryOpGen generatorFor(UnaryOperator operator) {
-        return provide(unaryMapping, operator);
-    }
-
-    private static <K, V> V provide(Map<K, V> map, K key) {
-        V v = map.get(key);
-        if (v == null) {
-            throw new UnsupportedOperationException("Cannot find generator for operator: " + key);
-        }
-        return v;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/StrictEqGenOp.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/StrictEqGenOp.java
deleted file mode 100644
index a059eca..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/StrictEqGenOp.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiled.SourceGenConstants;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Generator for strict equality
- */
-public class StrictEqGenOp implements BinaryOpGen {
-
-    private final boolean negated;
-
-    public StrictEqGenOp(boolean negated) {
-        this.negated = negated;
-    }
-
-    @Override
-    public Type returnType(Type leftType, Type rightType) {
-        return Type.BOOLEAN;
-    }
-
-    @Override
-    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
-        if (negated) {
-            source.negation();
-        }
-        source.startMethodCall(SourceGenConstants.OBJ_MODEL_INSTANCE, ObjectModel.STRICT_EQ);
-        left.getNode().accept(visitor);
-        source.separateArgument();
-        right.getNode().accept(visitor);
-        source.endCall();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/TypedNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/TypedNode.java
deleted file mode 100644
index 3b5a1dd..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/TypedNode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.Type;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Expression node with type information
- */
-public class TypedNode {
-    private final ExpressionNode node;
-    private final Type type;
-
-    public TypedNode(ExpressionNode node, Type type) {
-        this.node = node;
-        this.type = type;
-    }
-
-    public ExpressionNode getNode() {
-        return node;
-    }
-
-    public Type getType() {
-        return type;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/UnaryOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/UnaryOpGen.java
deleted file mode 100644
index b985a42..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiled/operator/UnaryOpGen.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiled.operator;
-
-import org.apache.sling.scripting.sightly.compiled.ExpressionTranslator;
-import org.apache.sling.scripting.sightly.compiled.JavaSource;
-import org.apache.sling.scripting.sightly.compiled.Type;
-
-/**
- * Interface for generators of unary operators
- */
-public interface UnaryOpGen {
-
-    Type returnType(Type operandType);
-
-    void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/BaseCompiler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/BaseCompiler.java
deleted file mode 100644
index b22c6b3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/BaseCompiler.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler;
-
-import org.apache.sling.scripting.sightly.compiler.api.SightlyCompiler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.debug.SanityChecker;
-import org.apache.sling.scripting.sightly.compiler.optimization.StreamTransformer;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.SightlyCompiler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.optimization.StreamTransformer;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * A base implementation of a compiler
- */
-public abstract class BaseCompiler implements SightlyCompiler {
-
-    @Override
-    public void compile(String source, CompilerBackend backend) {
-        PushStream stream = new PushStream();
-        SanityChecker.attachChecker(stream);
-        CommandStream optimizedStream = optimizedStream(stream);
-        //optimizedStream.addHandler(LoggingHandler.INSTANCE);
-        backend.handle(optimizedStream);
-        getFrontend().compile(stream, source);
-    }
-
-    /**
-     * Get the stream optimizer for this compiler
-     * @return - a stream transformer that will optimize the command stream
-     */
-    protected abstract StreamTransformer getOptimizer();
-
-    /**
-     * Get the front-end for this compiler
-     * @return a compiler front end
-     */
-    protected abstract CompilerFrontend getFrontend();
-
-    private CommandStream optimizedStream(CommandStream stream) {
-        return getOptimizer().transform(stream);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerBackend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerBackend.java
deleted file mode 100644
index bf88ff2..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerBackend.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-
-/**
- * A compiler backend
- */
-public interface CompilerBackend {
-
-    /**
-     * Process a stream of commands
-     * @param stream - the stream of commands
-     */
-    void handle(CommandStream stream);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerException.java
deleted file mode 100644
index d8247d3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerException.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler;
-
-public class CompilerException extends RuntimeException {
-
-    public CompilerException() {
-        super();
-    }
-
-    public CompilerException(String message) {
-        super(message);
-    }
-
-    public CompilerException(String message, Throwable throwable) {
-        super(message, throwable);
-    }
-
-    public CompilerException(Throwable throwable) {
-        super(throwable);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerFrontend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerFrontend.java
deleted file mode 100644
index 960d360..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/CompilerFrontend.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler;
-
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * Sightly compiler
- */
-public interface CompilerFrontend {
-
-    /**
-     * Compile the source code to a stream of commands
-     * @param stream the output stream
-     * @param source the source code
-     */
-    void compile(PushStream stream, String source);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileService.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileService.java
deleted file mode 100644
index e781a00..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileService.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler;
-
-import org.apache.sling.api.resource.Resource;
-
-/**
- * The {@code SightlyCompileService} allows for simple instantiation of arbitrary classes that are either stored in the repository
- * or in regular OSGi bundles. It also compiles Java sources on-the-fly and can discover class' source files based on
- * Resources (typically Sling components). It supports Sling Resource type inheritance.
- *
- * The Java compiler only recompiles a class in case the source's timestamp is older than the compiled class if already
- * existing. Otherwise it will load the class directly through the Sling ClassLoaderWriter service.
- */
-public interface SightlyCompileService {
-
-    /**
-     * This method returns an Object instance based on a class that is either found through regular classloading mechanisms or on-the-fly
-     * compilation. In case the requested class does not denote a fully qualified classname, this service will try to find the class through
-     * Sling's servlet resolution mechanism and compile the class on-the-fly if required.
-     *
-     * @param resource    the lookup will be performed based on this resource
-     * @param className   name of class to use for object instantiation
-     * @param attemptLoad attempt to load the object from the class loader's cache
-     * @return object instance of the requested class
-     * @throws CompilerException in case of any runtime exception
-     */
-    public Object getInstance(Resource resource, String className, boolean attemptLoad);
-
-    /**
-     * Compiles a class using the passed fully qualified classname and based on the resource that represents the class' source.
-     *
-     * @param scriptResource resource that constitutes the class' source
-     * @param className      Fully qualified name of the class to compile
-     * @return object instance of the class to compile
-     * @throws CompilerException in case of any runtime exception
-     */
-    public Object compileSource(Resource scriptResource, String className);
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileServiceImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileServiceImpl.java
deleted file mode 100644
index 2d76f7d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompileServiceImpl.java
+++ /dev/null
@@ -1,298 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.util.List;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-
-import org.apache.felix.scr.annotations.Activate;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.resource.LoginException;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceResolverFactory;
-import org.apache.sling.commons.classloader.ClassLoaderWriter;
-import org.apache.sling.commons.compiler.CompilationResult;
-import org.apache.sling.commons.compiler.CompilationUnit;
-import org.apache.sling.commons.compiler.CompilerMessage;
-import org.apache.sling.commons.compiler.Options;
-import org.apache.sling.jcr.compiler.JcrJavaCompiler;
-import org.apache.sling.scripting.sightly.api.ResourceResolution;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-@Component
-@Service
-public class SightlyCompileServiceImpl implements SightlyCompileService {
-
-    private static final Logger LOG = LoggerFactory.getLogger(SightlyCompileServiceImpl.class);
-
-    @Reference
-    private ClassLoaderWriter classLoaderWriter = null;
-
-    @Reference
-    private JcrJavaCompiler jcrJavaCompiler = null;
-
-    @Reference
-    private ResourceResolverFactory rrf = null;
-
-    private Options options;
-
-    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
-    private Lock readLock = lock.readLock();
-    private Lock writeLock = lock.writeLock();
-
-    @Override
-    public Object getInstance(Resource resource, String className, boolean forceLoad) {
-
-        LOG.debug("Attempting to obtain bean instance of resource '{}' and class '{}'", resource.getPath(), className);
-
-        // assume fully qualified class name
-        if (className.contains(".")) {
-            Resource pojoResource = checkIfPojoIsInRepo(className);
-            if (pojoResource != null) {
-                return compileSource(pojoResource, className);
-            } else {
-                LOG.debug("fully qualified classname provided, loading object directly");
-                return loadObject(className);
-            }
-        }
-
-        LOG.debug("trying to find Java source based on resource: {}", resource.getPath());
-
-        // try to find Java source in JCR
-        // use the servlet resolver to do all the magic lookup (resource type hierarchy and search path) for us
-
-        Resource scriptResource = ResourceResolution.resolveComponentRelative(resource.getResourceResolver(), resource, className + ".java");
-        if (scriptResource != null) {
-            LOG.debug("found Java bean script resource: " + scriptResource.getPath());
-            try {
-                return compileJavaResource(new SlingResourceCompilationUnit(scriptResource), scriptResource.getPath());
-            } catch (Exception e) {
-                throw new CompilerException(e);
-            }
-        } else {
-            // not found in JCR, try to load from bundle using current resource type package
-            // /apps/project/components/foo => apps.project.components.foo.<scriptName>
-            Resource resourceType = resource.getResourceResolver().getResource(resource.getResourceType());
-
-            if (resourceType == null) {
-                resourceType = resource;
-            }
-
-            String resourceTypeDir = resourceType.getPath();
-            className = getJavaNameFromPath(resourceTypeDir) + "." + className;
-
-            LOG.debug("Java bean source not found, trying to locate using" + " component directory as packagename: {}", resourceTypeDir);
-
-            LOG.debug("loading Java class: " + className);
-            return loadObject(className);
-        }
-    }
-
-    @Override
-    public Object compileSource(Resource javaResource, String fullQualifiedClassName) {
-        LOG.debug("Compiling Sightly based Java class from resource: " + javaResource.getPath());
-        try {
-            CompilationUnit compilationUnit = new SightlyCompilationUnit(javaResource, fullQualifiedClassName);
-            return compileJavaResource(compilationUnit, javaResource.getPath());
-        } catch (Exception e) {
-            throw new CompilerException(e);
-        }
-    }
-
-    /**
-     * Instantiate and return an instance of a class.
-     *
-     * @param className class to instantiate
-     * @return instance of class
-     */
-    private Object loadObject(String className) {
-        try {
-            return loadClass(className).newInstance();
-        } catch (Exception e) {
-            throw new CompilerException(e);
-        }
-    }
-
-    /**
-     * Retrieve a class from the ClassLoaderWriter service.
-     *
-     * @param name name of class to load
-     * @return Class
-     * @throws ClassNotFoundException
-     */
-    private Class loadClass(String name) throws ClassNotFoundException {
-        readLock.lock();
-        try {
-            if (classLoaderWriter != null) {
-                return classLoaderWriter.getClassLoader().loadClass(name);
-            }
-        } finally {
-            readLock.unlock();
-        }
-        return Class.forName(name);
-    }
-
-    /**
-     * Compiles a class stored in the repository and returns an instance of the compiled class.
-     *
-     * @param compilationUnit a compilation unit
-     * @param scriptPath      the path of the script to compile
-     * @return instance of compiled class
-     * @throws Exception
-     */
-    private Object compileJavaResource(CompilationUnit compilationUnit, String scriptPath) throws Exception {
-        writeLock.lock();
-        try {
-            long start = System.currentTimeMillis();
-            CompilationResult compilationResult = jcrJavaCompiler.compile(new String[]{scriptPath}, options);
-            long end = System.currentTimeMillis();
-            List<CompilerMessage> errors = compilationResult.getErrors();
-            if (errors != null && errors.size() > 0) {
-                throw new CompilerException(createErrorMsg(errors));
-            }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("script compiled: {}", compilationResult.didCompile());
-                LOG.debug("compilation took {}ms", end - start);
-            }
-            return compilationResult.loadCompiledClass(compilationUnit.getMainClassName()).newInstance();
-        } finally {
-            writeLock.unlock();
-        }
-    }
-
-    @Activate
-    @SuppressWarnings("unused")
-    protected void activate() {
-        LOG.info("Activating {}", getClass().getName());
-
-        String version = System.getProperty("java.specification.version");
-        options = new Options();
-        options.put(Options.KEY_GENERATE_DEBUG_INFO, true);
-        options.put(Options.KEY_SOURCE_VERSION, version);
-        options.put(Options.KEY_TARGET_VERSION, version);
-        options.put(Options.KEY_CLASS_LOADER_WRITER, classLoaderWriter);
-    }
-
-    //---------------------------------- private -----------------------------------
-    /**
-     * Checks is a POJO class name is represented by a resource from the repository.
-     *
-     * @param className the class name
-     * @return the Resource in which the class is defined, {@code null} if the POJO was not found in the repository
-     */
-    private Resource checkIfPojoIsInRepo(String className) {
-        // POJOs will always be loaded through the compiler (prevents stale class loader issues)
-        String pojoPath = "/" + className.replaceAll("\\.", "/") + ".java";
-        ResourceResolver rr = null;
-        try {
-            rr = rrf.getAdministrativeResourceResolver(null);
-            Resource pojoResource = rr.getResource(pojoPath);
-            if (pojoResource != null) {
-                for (String s : rr.getSearchPath()) {
-                    if (pojoPath.startsWith(s)) {
-                        return pojoResource;
-                    }
-                }
-            }
-        } catch (LoginException le) {
-            LOG.error("Cannot search repository for POJO.", le);
-        } finally {
-            if (rr != null) {
-                rr.close();
-            }
-        }
-        return null;
-    }
-
-    private String getJavaNameFromPath(String path) {
-        if (path.endsWith(".java")) {
-            path = path.substring(0, path.length() - 5);
-        }
-        return path.substring(1).replace("/", ".").replace("-", "_");
-    }
-
-    private String createErrorMsg(List<CompilerMessage> errors) {
-        final StringBuilder buffer = new StringBuilder();
-        buffer.append("Compilation errors in ");
-        buffer.append(errors.get(0).getFile());
-        buffer.append(":");
-        StringBuilder errorsBuffer = new StringBuilder();
-        boolean duplicateVariable = false;
-        for (final CompilerMessage e : errors) {
-            if (!duplicateVariable) {
-                if (e.getMessage().contains("Duplicate local variable")) {
-                    duplicateVariable = true;
-                    buffer.append(" Maybe you defined more than one identical block elements without defining a different variable for "
-                            + "each one?");
-                }
-            }
-            errorsBuffer.append("\nLine ");
-            errorsBuffer.append(e.getLine());
-            errorsBuffer.append(", column ");
-            errorsBuffer.append(e.getColumn());
-            errorsBuffer.append(" : ");
-            errorsBuffer.append(e.getMessage());
-        }
-        buffer.append(errorsBuffer);
-        return buffer.toString();
-    }
-
-    class SlingResourceCompilationUnit implements CompilationUnit {
-        private final Resource resource;
-
-        public SlingResourceCompilationUnit(Resource resource) {
-            this.resource = resource;
-        }
-
-        public Reader getSource() throws IOException {
-            return new InputStreamReader(resource.adaptTo(InputStream.class), "UTF-8");
-        }
-
-        public String getMainClassName() {
-            return getJavaNameFromPath(resource.getPath());
-        }
-
-        public long getLastModified() {
-            return resource.getResourceMetadata().getModificationTime();
-        }
-    }
-
-    class SightlyCompilationUnit extends SlingResourceCompilationUnit {
-        private String fqcn;
-
-        public SightlyCompilationUnit(Resource resource, String fqcn) {
-            super(resource);
-            this.fqcn = fqcn;
-        }
-
-        public String getMainClassName() {
-            return fqcn;
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompilerImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompilerImpl.java
deleted file mode 100644
index 38709a3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/SightlyCompilerImpl.java
+++ /dev/null
@@ -1,210 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler;
-
-import java.util.ArrayList;
-import java.util.Dictionary;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.felix.scr.annotations.Activate;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.ReferenceCardinality;
-import org.apache.felix.scr.annotations.ReferencePolicy;
-import org.apache.felix.scr.annotations.References;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.commons.osgi.PropertiesUtil;
-import org.osgi.service.component.ComponentContext;
-
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupParser;
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.compiler.api.SightlyCompiler;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.frontend.SimpleFrontend;
-import org.apache.sling.scripting.sightly.compiler.optimization.CoalescingWrites;
-import org.apache.sling.scripting.sightly.compiler.optimization.DeadCodeRemoval;
-import org.apache.sling.scripting.sightly.compiler.optimization.SequenceStreamTransformer;
-import org.apache.sling.scripting.sightly.compiler.optimization.StreamTransformer;
-import org.apache.sling.scripting.sightly.compiler.optimization.SyntheticMapRemoval;
-import org.apache.sling.scripting.sightly.compiler.optimization.UnusedVariableRemoval;
-import org.apache.sling.scripting.sightly.compiler.optimization.reduce.ConstantFolding;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-
-/**
- * Implementation for the Sightly compiler
- */
-@Component(metatype = true, label = "Apache Sling Scripting Sightly Java Compiler", description = "The Apache Sling Sightly Java Compiler" +
-        " is responsible for translating Sightly scripts into Java source code.")
-@Service(SightlyCompiler.class)
-@References({
-        @Reference(
-                policy = ReferencePolicy.DYNAMIC,
-                referenceInterface = Filter.class,
-                name = "filterService",
-                cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
-        ),
-        @Reference(
-                policy = ReferencePolicy.DYNAMIC,
-                referenceInterface = Plugin.class,
-                name = "pluginService",
-                cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
-        )
-})
-@Properties({
-        @Property(
-                name = SightlyCompilerImpl.CONSTANT_FOLDING_OPT,
-                boolValue = true,
-                label = "Constant Folding",
-                description = "Optimises expressions by evaluating static parts in advance."
-        ),
-        @Property(
-                name = SightlyCompilerImpl.DEAD_CODE_OPT,
-                boolValue = true,
-                label = "Dead Code Removal",
-                description = "Optimises expressions evaluations by removing code that's under the false branch of an if."
-        ),
-        @Property(
-                name = SightlyCompilerImpl.SYNTHETIC_MAP_OPT,
-                boolValue = true,
-                label = "Synthetic Map Removal",
-                description = "Optimises expressions by replacing calls to map.get with the actual object from the map if the only usages" +
-                        " of that map are value retrievals."
-        ),
-        @Property(
-                name = SightlyCompilerImpl.UNUSED_VAR_OPT,
-                boolValue = true,
-                label = "Unused Variables Removal",
-                description = "Optimises expression evaluations by removing unused variables from the generated Java source code."
-        ),
-        @Property(
-                name = SightlyCompilerImpl.COALESCING_WRITES_OPT,
-                boolValue = true,
-                label = "Coalescing Writes",
-                description = "Optimises expression evaluations by merging together consecutive writes to the Java source code files."
-        )
-})
-public class SightlyCompilerImpl extends BaseCompiler {
-
-    public static final String CONSTANT_FOLDING_OPT = "org.apache.sling.scripting.sightly.compiler.constantFolding";
-    public static final String DEAD_CODE_OPT = "org.apache.sling.scripting.sightly.compiler.deadCodeRemoval";
-    public static final String SYNTHETIC_MAP_OPT = "org.apache.sling.scripting.sightly.compiler.syntheticMapRemoval";
-    public static final String UNUSED_VAR_OPT = "org.apache.sling.scripting.sightly.compiler.unusedVarRemoval";
-    public static final String COALESCING_WRITES_OPT = "org.apache.sling.scripting.sightly.compiler.coalescingWrites";
-
-    private List<Filter> filters = new ArrayList<Filter>();
-    private List<Plugin> plugins = new ArrayList<Plugin>();
-
-    private volatile StreamTransformer optimizer;
-    private volatile CompilerFrontend frontend;
-
-    @Reference
-    protected MarkupParser markupParser;
-
-    @Reference
-    protected ObjectModel objectModel;
-
-    @Override
-    protected StreamTransformer getOptimizer() {
-        return optimizer;
-    }
-
-    @Override
-    protected CompilerFrontend getFrontend() {
-        return frontend;
-    }
-
-    @Activate
-    protected void activate(ComponentContext context) {
-        Dictionary properties = context.getProperties();
-        reloadOptimizations(properties);
-        reloadFrontend();
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected void bindFilterService(Filter filter, Map<String, Object> properties) {
-        synchronized(filters) {
-            filters = add(filters, filter);
-            reloadFrontend();
-        }
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected void unbindFilterService(Filter filter, Map<String, Object> properties) {
-        synchronized (filters) {
-            filters = remove(filters, filter);
-            reloadFrontend();
-        }
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected void bindPluginService(Plugin plugin, Map<String, Object> properties) {
-        synchronized (plugins) {
-            plugins = add(plugins, plugin);
-            reloadFrontend();
-        }
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected void unbindPluginService(Plugin plugin, Map<String, Object> properties) {
-        synchronized (plugins) {
-            plugins = remove(plugins, plugin);
-            reloadFrontend();
-        }
-    }
-
-    private void reloadOptimizations(Dictionary properties) {
-        ArrayList<StreamTransformer> transformers = new ArrayList<StreamTransformer>();
-        Dynamic dynamic = new Dynamic(objectModel);
-        activateOptimization(CONSTANT_FOLDING_OPT, transformers, properties, ConstantFolding.transformer(dynamic));
-        activateOptimization(DEAD_CODE_OPT, transformers, properties, DeadCodeRemoval.transformer(dynamic));
-        activateOptimization(SYNTHETIC_MAP_OPT, transformers, properties, SyntheticMapRemoval.TRANSFORMER);
-        activateOptimization(UNUSED_VAR_OPT, transformers, properties, UnusedVariableRemoval.TRANSFORMER);
-        activateOptimization(COALESCING_WRITES_OPT, transformers, properties, CoalescingWrites.TRANSFORMER);
-        optimizer = new SequenceStreamTransformer(transformers);
-    }
-
-    private void activateOptimization(String option, ArrayList<StreamTransformer> transformers,
-                                      Dictionary dictionary, StreamTransformer transformer) {
-        boolean activate = PropertiesUtil.toBoolean(dictionary.get(option), true);
-        if (activate) {
-            transformers.add(transformer);
-        }
-    }
-
-    private void reloadFrontend() {
-        frontend = new SimpleFrontend(markupParser, plugins, filters);
-    }
-
-    private static <T> List<T> add(List<T> list, T item) {
-        ArrayList<T> result = new ArrayList<T>(list);
-        result.add(item);
-        return result;
-    }
-
-    private static <T> List<T> remove(List<T> list, T item) {
-        ArrayList<T> result = new ArrayList<T>(list);
-        result.remove(item);
-        return result;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/Syntax.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/Syntax.java
deleted file mode 100644
index a97188f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/Syntax.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler;
-
-import java.util.Arrays;
-
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-
-/**
- * Sightly Syntax specific elements
- */
-public class Syntax {
-
-    public static final String SLY_COMMENT_PREFIX = "<!--/*";
-
-    public static final String SLY_COMMENT_SUFFIX = "*/-->";
-
-    public static final String PLUGIN_ATTRIBUTE_PREFIX = "data-sly-";
-
-    public static final String DEFAULT_LIST_ITEM_VAR_NAME = "item";
-
-    public static final String ITEM_LOOP_STATUS_SUFFIX = "List";
-
-    public static final String CONTEXT_OPTION = "context";
-
-    public static final String MAP_ITEM_KEY_PROPERTY = "key";
-
-    public static final String MAP_ITEM_VALUE_PROPERTY = "value";
-
-    public static final String LENGTH_PROPERTY = "size";
-
-    /**
-     * Checks whether a piece of text represents a Sightly comment
-     * @param text - the text
-     * @return - true if it is a Sightly comment, false otherwise
-     */
-    public static boolean isSightlyComment(String text) {
-        //todo: performance concern
-        String trimmed = text.trim();
-        return trimmed.startsWith(SLY_COMMENT_PREFIX) && trimmed.endsWith(SLY_COMMENT_SUFFIX);
-    }
-
-    public static boolean isPluginAttribute(String attributeName) {
-        return attributeName.startsWith(PLUGIN_ATTRIBUTE_PREFIX);
-    }
-
-    public static PluginCallInfo parsePluginAttribute(String attributeName) {
-        if (!isPluginAttribute(attributeName)) {
-            return null;
-        }
-        String fragment = attributeName.substring(PLUGIN_ATTRIBUTE_PREFIX.length());
-        String[] parts = fragment.split("\\.");
-        if (parts.length == 0) {
-            return null;
-        }
-        return new PluginCallInfo(parts[0], Arrays.copyOfRange(parts, 1, parts.length));
-    }
-
-    public static String itemLoopStatusVariable(String itemVariable) {
-        return itemVariable + ITEM_LOOP_STATUS_SUFFIX;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/CompilerException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/CompilerException.java
deleted file mode 100644
index 1644fd5..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/CompilerException.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api;
-
-/**
- * Compile-specific exception
- */
-public class CompilerException extends RuntimeException {
-
-    public CompilerException() {
-        super();
-    }
-
-    public CompilerException(String message) {
-        super(message);
-    }
-
-    public CompilerException(String message, Throwable throwable) {
-        super(message, throwable);
-    }
-
-    public CompilerException(Throwable throwable) {
-        super(throwable);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/Filter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/Filter.java
deleted file mode 100644
index 15b67ae..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/Filter.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-
-/**
- * A filter is a transformation which performs modifications on expressions. Unlike plugins, filters
- * are always applied on an expression. Whether the filter transformation is actually necessary is
- * decided by the filter. The application order of filters is given by filter priority.
- */
-public interface Filter extends Comparable<Filter> {
-
-    /**
-     * Transform the given expression
-     * @param expression the original expression
-     * @return a transformed expression. If the filter is not applicable
-     * to the given expression, then the original expression shall be returned
-     */
-    Expression apply(Expression expression);
-
-    /**
-     * The priority with which filters are applied. This establishes order between filters. Filters with
-     * lower priority are applied first.
-     * @return an integer representing the filter's priority
-     */
-    int priority();
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupHandler.java
deleted file mode 100644
index a726b40..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupHandler.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.api;
-
-/**
- * Interface used to communicate between HTML parsers and the compiler
- * front-end.
- */
-public interface MarkupHandler {
-
-    /**
-     * Signal the start of a new element
-     * @param markup - the markup of the open tag (Something like \< div)
-     * @param tagName - the tag of the element
-     */
-    void onOpenTagStart(String markup, String tagName);
-
-    /**
-     * Signal a element attribute
-     * @param name - the name of the attribute
-     * @param value - the value of the attribute. If the attribute has no value, null should be passed
-     */
-    void onAttribute(String name, String value);
-
-    /**
-     * Signal that the start tag has ended
-     * @param markup the markup for this event
-     */
-    void onOpenTagEnd(String markup);
-
-    /**
-     * @param markup the HTML markup for this event
-     * Signal that a tag was closed
-     */
-    void onCloseTag(String markup);
-
-    /**
-     * Signal a text node
-     * @param text the raw text content
-     */
-    void onText(String text);
-
-    /**
-     * Signal a comment node
-     * @param markup - the markup for the comment
-     */
-    void onComment(String markup);
-
-    /**
-     * Signal a data node
-     * @param markup - the markup for this event
-     */
-    void onDataNode(String markup);
-
-    /**
-     * Signal a document type declaration
-     * @param markup - the markup for this event
-     */
-    void onDocType(String markup);
-
-    /**
-     * Signal that the document was fully processed
-     */
-    void onDocumentFinished();
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupParser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupParser.java
deleted file mode 100644
index e8a7607..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/MarkupParser.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.api;
-
-/**
- * Interface for markup parsers that are meant to be used in the
- * Sightly compiler front-end
- */
-public interface MarkupParser {
-
-    /**
-     * Parse the given document and use the handler to process
-     * the markup events
-     * @param document - the parsed document
-     * @param handler - a markup handler
-     */
-    void parse(String document, MarkupHandler handler);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/SightlyCompiler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/SightlyCompiler.java
deleted file mode 100644
index 40d8f35..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/SightlyCompiler.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.api;
-
-import org.apache.sling.scripting.sightly.compiler.CompilerBackend;
-
-/**
- * Created by mdanila on 2/3/14.
- */
-public interface SightlyCompiler {
-
-    /**
-     * Compile the given markup source and feed it to the given backend
-     * @param source the HTML source code
-     * @param backend the backend that will process the command stream from the source
-     */
-    void compile(String source, CompilerBackend backend);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/Expression.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/Expression.java
deleted file mode 100644
index 36d46ff..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/Expression.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * This class represent a Sightly Expression.
- */
-public class Expression {
-
-    private final Map<String, ExpressionNode> options;
-    private final ExpressionNode root;
-
-    public Expression(ExpressionNode root, Map<String, ExpressionNode> options) {
-        this.root = root;
-        this.options = new HashMap<String, ExpressionNode>(options);
-    }
-
-    public Expression(ExpressionNode root) {
-        this(root, Collections.<String, ExpressionNode>emptyMap());
-    }
-
-    /**
-     * Get the options for this expression
-     * @return - the expression options
-     */
-    public Map<String, ExpressionNode> getOptions() {
-        return Collections.unmodifiableMap(options);
-    }
-
-    /**
-     * Get the root node of this expression
-     * @return - the root expression node
-     */
-    public ExpressionNode getRoot() {
-        return root;
-    }
-
-    /**
-     * Get the option with the specified name
-     * @param name the name of the option
-     * @return the expression node for the option value, or null if the
-     * option is not in the expression
-     */
-    public ExpressionNode getOption(String name) {
-        return options.get(name);
-    }
-
-    /**
-     * Return an expression where the given options are no longer present
-     * @param removedOptions the options to be removed
-     * @return a copy where the mention options are no longer present
-     */
-    public Expression removeOptions(String ... removedOptions) {
-        HashMap<String, ExpressionNode> newOptions = new HashMap<String, ExpressionNode>(options);
-        for (String option : removedOptions) {
-            newOptions.remove(option);
-        }
-        return new Expression(root, newOptions);
-    }
-
-    /**
-     * Return a copy, but with the specified node as root
-     * @param node the new root
-     * @return a copy with a new root
-     */
-    public Expression withNode(ExpressionNode node) {
-        return new Expression(node, options);
-    }
-
-    /**
-     * Checks whether the expression has the specified option
-     * @param name the name of the option
-     * @return true if the option is present, false otherwise
-     */
-    public boolean containsOption(String name) {
-        return options.containsKey(name);
-    }
-
-    @Override
-    public String toString() {
-        return "Expression{" +
-                "options=" + getOptions() +
-                ", root=" + root +
-                '}';
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/ExpressionNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/ExpressionNode.java
deleted file mode 100644
index 81ef22f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/ExpressionNode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression;
-
-/**
- * ExpressionNode in a Sightly expression tree
- */
-public interface ExpressionNode {
-
-    /**
-     * Accept a visitor to process this node.
-     * @param visitor The visitor
-     */
-    <T> T accept(NodeVisitor<T> visitor);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/NodeVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/NodeVisitor.java
deleted file mode 100644
index c143e0c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/NodeVisitor.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.api.expression;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.*;
-
-/**
- * Visitor for all expression nodes
- */
-public interface NodeVisitor<T> {
-
-    T evaluate(PropertyAccess propertyAccess);
-
-    T evaluate(Identifier identifier);
-
-    T evaluate(StringConstant text);
-
-    T evaluate(BinaryOperation binaryOperation);
-
-    T evaluate(BooleanConstant booleanConstant);
-
-    T evaluate(NumericConstant numericConstant);
-
-    T evaluate(UnaryOperation unaryOperation);
-
-    T evaluate(TernaryOperator ternaryOperator);
-
-    T evaluate(RuntimeCall runtimeCall);
-
-    T evaluate(MapLiteral mapLiteral);
-
-    T evaluate(ArrayLiteral arrayLiteral);
-
-    T evaluate(NullLiteral nullLiteral);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/ArrayLiteral.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/ArrayLiteral.java
deleted file mode 100644
index 253f721..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/ArrayLiteral.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Syntactical structure for an array of items
- */
-public class ArrayLiteral implements ExpressionNode {
-
-    private final List<ExpressionNode> items;
-
-    public ArrayLiteral(List<ExpressionNode> items) {
-        this.items = new ArrayList<ExpressionNode>(items);
-    }
-
-    public List<ExpressionNode> getItems() {
-        return Collections.unmodifiableList(items);
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Atom.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Atom.java
deleted file mode 100644
index b5522d4..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Atom.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-
-/**
- * Nodes that can be translated to simple text, like identifiers
- * or string constants.
- */
-public interface Atom extends ExpressionNode {
-
-    /**
-     * Get the text content for this node
-     * @return The text content
-     */
-    String getText();
-
-}
-
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperation.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperation.java
deleted file mode 100644
index b47c28c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperation.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * An expression where a binary operator is applied.
- * Ex.: "a AND b"
- */
-public class BinaryOperation implements ExpressionNode {
-
-    private BinaryOperator operator;
-    private ExpressionNode leftOperand;
-    private ExpressionNode rightOperand;
-
-    public BinaryOperation(BinaryOperator operator, ExpressionNode leftOperand, ExpressionNode rightOperand) {
-        this.operator = operator;
-        this.leftOperand = leftOperand;
-        this.rightOperand = rightOperand;
-    }
-
-    public BinaryOperator getOperator() {
-        return operator;
-    }
-
-    public ExpressionNode getLeftOperand() {
-        return leftOperand;
-    }
-
-    public ExpressionNode getRightOperand() {
-        return rightOperand;
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    @Override
-    public String toString() {
-        return "BinaryOperation{" +
-                "operator=" + operator +
-                ", leftOperand=" + leftOperand +
-                ", rightOperand=" + rightOperand +
-                '}';
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperator.java
deleted file mode 100644
index 3ddfc98..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BinaryOperator.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-/**
- * Binary operators used in expressions
- */
-public enum BinaryOperator {
-    AND, //logical conjunction
-    OR, //logical disjunction
-    CONCATENATE, //string concatenation
-
-    LT, //less-than
-    LEQ, //less or equal
-    GT, // greater than
-    GEQ, // greater or equal
-    EQ, //equal
-    NEQ, //not equal
-    STRICT_EQ, //strict version of equality, restricted to just some types
-    STRICT_NEQ, //strict version of the not-equal operator
-
-    ADD, //addition
-    SUB, //difference
-    MUL, //multiplication
-    I_DIV, //integer division
-    REM, //reminder
-
-    DIV //floating point division
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BooleanConstant.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BooleanConstant.java
deleted file mode 100644
index 0daa528..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/BooleanConstant.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Boolean constant.
- * Ex: "true" or "false"
- */
-public class BooleanConstant implements Atom {
-
-    private String rawText;
-
-    public static final BooleanConstant FALSE = new BooleanConstant(Boolean.toString(false));
-    public static final BooleanConstant TRUE = new BooleanConstant(Boolean.toString(true));
-
-    public BooleanConstant(String text) {
-        this.rawText = text;
-    }
-
-    public BooleanConstant(boolean value) {
-        this(Boolean.toString(value));
-    }
-
-    public boolean getValue() {
-        return Boolean.parseBoolean(rawText);
-    }
-
-
-    @Override
-    public String getText() {
-        return rawText;
-    }
-
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    @Override
-    public String toString() {
-        return "BooleanConstant{" +
-                "rawText='" + rawText + '\'' +
-                '}';
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Identifier.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Identifier.java
deleted file mode 100644
index 0ae3d55..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/Identifier.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * A single variable. Ex: "myVar"
- */
-public class Identifier implements Atom {
-
-    private final String name;
-
-    /**
-     * Create an identifier
-     * @param name the name of the identifier
-     */
-    public Identifier(String name) {
-        this.name = name;
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    /**
-     * Retrieve the name of the identifier
-     * @return the name string
-     */
-    public String getName() {
-        return name;
-    }
-
-
-    @Override
-    public String getText() {
-        return getName();
-    }
-
-    @Override
-    public String toString() {
-        return "Identifier{" +
-                "name='" + name + '\'' +
-                '}';
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/MapLiteral.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/MapLiteral.java
deleted file mode 100644
index f134bbb..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/MapLiteral.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * A syntactical construction representing a map
- */
-public class MapLiteral implements ExpressionNode {
-
-    private Map<String, ExpressionNode> map;
-
-    public static final MapLiteral EMPTY = new MapLiteral(new HashMap<String, ExpressionNode>());
-
-    public MapLiteral(Map<String, ExpressionNode> map) {
-        this.map = new HashMap<String, ExpressionNode>();
-        this.map.putAll(map);
-    }
-
-    public Map<String, ExpressionNode> getMap() {
-        return Collections.unmodifiableMap(map);
-    }
-
-    public ExpressionNode getValue(String property) {
-        return map.get(property);
-    }
-
-    public boolean containsKey(String name) {
-        return map.containsKey(name);
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    @Override
-    public String toString() {
-        return "MapLiteral{" +
-                "map=" + map +
-                '}';
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NullLiteral.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NullLiteral.java
deleted file mode 100644
index e80827f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NullLiteral.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * The null literal
- */
-public final class NullLiteral implements ExpressionNode {
-
-    public static final NullLiteral INSTANCE = new NullLiteral();
-
-    private NullLiteral() {
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NumericConstant.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NumericConstant.java
deleted file mode 100644
index 8212018..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/NumericConstant.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Numeric constant expression.
- * Ex: "42.1"
- */
-public class NumericConstant implements Atom {
-
-    public static final NumericConstant ZERO = new NumericConstant(0);
-    public static final NumericConstant ONE = new NumericConstant(1);
-    public static final NumericConstant TWO = new NumericConstant(2);
-
-    private final String text;
-    private final Number value;
-
-    /**
-     * Create a numeric constant
-     * @param text - the text representation
-     * @throws java.lang.NumberFormatException - if the text is not in a numeric format
-     */
-    public NumericConstant(String text) {
-        this.text = text;
-        this.value = parseNumber(text);
-    }
-
-    public NumericConstant(Number value) {
-        this.value = value.longValue();
-        this.text = value.toString();
-    }
-
-    public Number getValue() {
-        return value;
-    }
-
-    @Override
-    public String getText() {
-        return text;
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    @Override
-    public String toString() {
-        return "NumericConstant{" +
-                "text='" + text + '\'' +
-                '}';
-    }
-
-    private Number parseNumber(String s) {
-        try {
-            return Long.parseLong(s);
-        } catch (NumberFormatException e) {
-            return Double.parseDouble(s);
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/PropertyAccess.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/PropertyAccess.java
deleted file mode 100644
index c54814a..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/PropertyAccess.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Expressions in which a property is queried for an object.
- * Ex.: "E.prop"
- */
-public class PropertyAccess implements ExpressionNode {
-
-    private final ExpressionNode target;
-    private final ExpressionNode property;
-
-    /**
-     * Create a property access node
-     * @param target The expression for the object being accessed
-     * @param property The name of the property
-     */
-    public PropertyAccess(ExpressionNode target, ExpressionNode property) {
-        this.target = target;
-        this.property = property;
-    }
-
-    public PropertyAccess(ExpressionNode target, String property) {
-        this.target = target;
-        this.property = new StringConstant(property);
-    }
-
-    /**
-     * Build a chained property access node with the given target and the specified properties
-     * @param target The target node
-     * @param properties A non-empty list of property names
-     * @throws IllegalArgumentException if the list of properties is empty
-     */
-    public PropertyAccess(ExpressionNode target, Iterable<String> properties) {
-        String lastProp = null;
-        ExpressionNode result = target;
-        for (String property : properties) {
-            if (lastProp != null) {
-                result = new PropertyAccess(result, new StringConstant(lastProp));
-            }
-            lastProp = property;
-        }
-        if (lastProp == null) {
-            throw new IllegalArgumentException("The list of properties must be non-empty");
-        }
-        this.target = result;
-        this.property = new StringConstant(lastProp);
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    /**
-     * The object being accessed
-     * @return a node representing the object being accessed
-     */
-    public ExpressionNode getTarget() {
-        return target;
-    }
-
-    /**
-     * Return the property name
-     * @return the property name
-     */
-    public ExpressionNode getProperty() {
-        return property;
-    }
-
-    @Override
-    public String toString() {
-        return "PropertyAccess{" +
-                "target=" + target +
-                ", property='" + property + '\'' +
-                '}';
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/RuntimeCall.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/RuntimeCall.java
deleted file mode 100644
index 5dc42b1..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/RuntimeCall.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Special expression which provides access to utility functions from
- * the runtime. This mechanism should not be abused!
- */
-public class RuntimeCall implements ExpressionNode {
-
-    private final String functionName;
-    private final List<ExpressionNode> arguments;
-
-    public RuntimeCall(String functionName, ExpressionNode... arguments) {
-        this(functionName, Arrays.asList(arguments));
-    }
-
-    public RuntimeCall(String functionName, List<ExpressionNode> arguments) {
-        this.functionName = functionName;
-        this.arguments = new ArrayList<ExpressionNode>(arguments);
-    }
-
-    /**
-     * Get the name of the function
-     * @return - the name of the function
-     */
-    public String getFunctionName() {
-        return functionName;
-    }
-
-    /**
-     * Get the nodes of the argument calls
-     * @return - an array of nodes
-     */
-    public List<ExpressionNode> getArguments() {
-        return Collections.unmodifiableList(arguments);
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/StringConstant.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/StringConstant.java
deleted file mode 100644
index 9423fce..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/StringConstant.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Simple string constant. Ex: "'hello'"
- */
-public class StringConstant implements Atom {
-
-    private String text;
-
-    public static final StringConstant EMPTY = new StringConstant("");
-
-    /**
-     * Create a string constant node
-     * @param text the string content (without it's original quotes).
-     */
-    public StringConstant(String text) {
-        this.text = text;
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    /**
-     * Get the string content - it strips the quotes from the string
-     * @return a string inner content
-     */
-    @Override
-    public String getText() {
-        return text;
-    }
-
-    @Override
-    public String toString() {
-        return "StringConstant{" +
-                "text='" + text + '\'' +
-                '}';
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/TernaryOperator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/TernaryOperator.java
deleted file mode 100644
index 98e79a8..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/TernaryOperator.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Defines the Sightly ternary operator: {@code condition ? then : else}.
- */
-public class TernaryOperator implements ExpressionNode {
-
-    private ExpressionNode condition;
-    private ExpressionNode thenBranch;
-    private ExpressionNode elseBranch;
-
-    public TernaryOperator(ExpressionNode condition, ExpressionNode thenBranch, ExpressionNode elseBranch) {
-        this.condition = condition;
-        this.thenBranch = thenBranch;
-        this.elseBranch = elseBranch;
-    }
-
-    public ExpressionNode getCondition() {
-        return condition;
-    }
-
-    public ExpressionNode getThenBranch() {
-        return thenBranch;
-    }
-
-    public ExpressionNode getElseBranch() {
-        return elseBranch;
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    @Override
-    public String toString() {
-        return "TernaryOperator{" +
-                "condition=" + condition +
-                ", thenBranch=" + thenBranch +
-                ", elseBranch=" + elseBranch +
-                '}';
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperation.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperation.java
deleted file mode 100644
index c587701..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperation.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-
-/**
- * Defines a unary operation (e.g. !variableName).
- */
-public class UnaryOperation implements ExpressionNode {
-
-    private UnaryOperator operator;
-    private ExpressionNode target;
-
-    public UnaryOperation(UnaryOperator operator, ExpressionNode target) {
-        this.operator = operator;
-        this.target = target;
-    }
-
-    @Override
-    public <T> T accept(NodeVisitor<T> visitor) {
-        return visitor.evaluate(this);
-    }
-
-    public UnaryOperator getOperator() {
-        return operator;
-    }
-
-    public ExpressionNode getTarget() {
-        return target;
-    }
-
-    @Override
-    public String toString() {
-        return "UnaryOperation{" +
-                "operator=" + operator +
-                ", operand=" + target +
-                '}';
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperator.java
deleted file mode 100644
index 140ef01..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/expression/node/UnaryOperator.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.expression.node;
-
-/**
- * Unary operators used in expressions
- */
-public enum UnaryOperator {
-    NOT, //logical negation
-    IS_WHITESPACE, //true if the operand is a string that contains only whitespace
-    LENGTH //the length of a collection
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/CompilerContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/CompilerContext.java
deleted file mode 100644
index 1b0e1da..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/CompilerContext.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.plugin;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-
-/**
- * Compiler context for plugins
- */
-public interface  CompilerContext {
-
-    /**
-     * Generate a unique variable name
-     * @param hint - a hint to be added to the variable name. Leave null
-     *             for no hint
-     * @return the variable name
-     */
-    String generateVariable(String hint);
-
-    /**
-     * Adjust the expression node to the specifics of the given context
-     * @param expression - the expression to be changed
-     * @param context - the render context
-     * @return - the adjusted expression
-     */
-    Expression adjustToContext(Expression expression, MarkupContext context);
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/MarkupContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/MarkupContext.java
deleted file mode 100644
index a15a7b5..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/MarkupContext.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.plugin;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Indicates what type of content is being rendered
- */
-public enum MarkupContext {
-
-    HTML("html"),
-    TEXT("text"),
-    ELEMENT_NAME("elementName"),
-    ATTRIBUTE_NAME("attributeName"),
-    ATTRIBUTE("attribute"),
-    URI("uri"),
-    SCRIPT_TOKEN("scriptToken"),
-    SCRIPT_STRING("scriptString"),
-    SCRIPT_COMMENT("scriptComment"),
-    SCRIPT_REGEXP("scriptRegExp"),
-    STYLE_TOKEN("styleToken"),
-    STYLE_STRING("styleString"),
-    COMMENT("comment"),
-    NUMBER("number"),
-    UNSAFE("unsafe");
-
-    private final String name;
-
-    MarkupContext(String name) {
-        this.name = name;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Return the render context with the given name
-     * @param name - the name of the render context
-     * @return - the rendering context value or null if the name matches no value
-     */
-    public static MarkupContext lookup(String name) {
-        return reverseMap.get(name);
-    }
-
-    private static final Map<String, MarkupContext> reverseMap = new HashMap<String, MarkupContext>();
-
-    static {
-        for (MarkupContext markupContext : MarkupContext.values()) {
-            reverseMap.put(markupContext.getName(), markupContext);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/Plugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/Plugin.java
deleted file mode 100644
index 70ec6e0..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/Plugin.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.plugin;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-
-/**
- * Common interface for plugins
- */
-public interface Plugin extends Comparable<Plugin> {
-
-    String SCR_PROP_NAME_BLOCK_NAME = "org.apache.sling.scripting.sightly.plugin.name";
-    String SCR_PROP_NAME_PRIORITY = "org.apache.sling.scripting.sightly.plugin.priority";
-
-    /**
-     * Given the plugin invocation provide an invoke object which will influence the rendering command
-     * stream
-     * @param expression the expression used at plugin invocation
-     * @param callInfo the parameters given to the plugin
-     * @param compilerContext a compiler context providing utility methods to plugins
-     * @return an invocation
-     * @see PluginInvoke
-     */
-    PluginInvoke invoke(Expression expression, PluginCallInfo callInfo, CompilerContext compilerContext);
-
-    /**
-     * The priority of the plugin
-     * @return a numeric value which controls when, relative to other plugins, should
-     * this plugin be applied
-     */
-    int priority();
-
-    /**
-     * The name of the plugin
-     * @return the plugin name
-     */
-    String name();
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginCallInfo.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginCallInfo.java
deleted file mode 100644
index 2cb5524..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginCallInfo.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.plugin;
-
-/**
- * Data related to a plugin call
- */
-public class PluginCallInfo {
-
-    private final String name;
-    private final String[] arguments;
-
-    public PluginCallInfo(String name, String[] arguments) {
-        this.name = name;
-        this.arguments = arguments;
-    }
-
-    /**
-     * Get the name of the called plugin
-     * @return a string with the name of the called plugin
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Get the plugin arguments
-     * @return a possibly empty array of args
-     */
-    public String[] getArguments() {
-        return arguments;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginException.java
deleted file mode 100644
index c4c211b..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginException.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.plugin;
-
-/**
- * Plugin runtime exception caused by a plugin
- */
-public class PluginException extends RuntimeException {
-
-    private Plugin plugin;
-
-    public PluginException(Plugin plugin, String message) {
-        super(message);
-        this.plugin = plugin;
-    }
-
-    public Plugin getPlugin() {
-        return plugin;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginInvoke.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginInvoke.java
deleted file mode 100644
index 55e3178..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/plugin/PluginInvoke.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.plugin;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * General interface for plugins
- */
-public interface PluginInvoke {
-
-    void beforeElement(PushStream stream, String tagName);
-
-    void beforeTagOpen(PushStream stream);
-
-    void beforeAttributes(PushStream stream);
-
-    void beforeAttribute(PushStream stream, String attributeName);
-
-    void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue);
-
-    void afterAttributeValue(PushStream stream, String attributeName);
-
-    void afterAttribute(PushStream stream, String attributeName);
-
-    void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression);
-
-    void afterAttributes(PushStream stream);
-
-    void afterTagOpen(PushStream stream);
-
-    void beforeChildren(PushStream stream);
-
-    void afterChildren(PushStream stream);
-
-    void beforeTagClose(PushStream stream, boolean isSelfClosing);
-
-    void afterTagClose(PushStream stream, boolean isSelfClosing);
-
-    void afterElement(PushStream stream);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/Command.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/Command.java
deleted file mode 100644
index dae2d8d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/Command.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris;
-
-/**
- * A text rendering command
- */
-public interface Command {
-
-    /**
-     * Accept a visitor
-     * @param visitor - the visitor that will process this command
-     */
-    void accept(CommandVisitor visitor);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandHandler.java
deleted file mode 100644
index 2bbaa1b..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandHandler.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris;
-
-/**
- * Handles commands from streams
- */
-public interface CommandHandler {
-
-    /**
-     * Handle the incoming command
-     * @param command - the received command
-     */
-    void onEmit(Command command);
-
-    /**
-     * Called when an error occurs.
-     * @param errorMessage - the message of the error
-     */
-    void onError(String errorMessage);
-
-    /**
-     * Called when the stream has finished. The contract is that after this call, no other
-     * commands or errors will be emitted.
-     */
-    void onDone();
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandStream.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandStream.java
deleted file mode 100644
index 402e683..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandStream.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris;
-
-/**
- * A push-stream of commands
- */
-public interface CommandStream {
-
-    /**
-     * Add a listening handler
-     * @param handler - a command handler
-     */
-    void addHandler(CommandHandler handler);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandVisitor.java
deleted file mode 100644
index b60d575e..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/CommandVisitor.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-
-/**
- * Processor of rendering commands
- */
-public interface CommandVisitor {
-
-    void visit(Conditional.Start conditionalStart);
-
-    void visit(Conditional.End conditionalEnd);
-
-    void visit(VariableBinding.Start variableBindingStart);
-
-    void visit(VariableBinding.End variableBindingEnd);
-
-    void visit(VariableBinding.Global globalAssignment);
-
-    void visit(OutVariable outVariable);
-
-    void visit(OutText outText);
-
-    void visit(Loop.Start loopStart);
-
-    void visit(Loop.End loopEnd);
-
-    void visit(BufferControl.Push bufferPush);
-
-    void visit(BufferControl.Pop bufferPop);
-
-    void visit(Procedure.Start startProcedure);
-
-    void visit(Procedure.End endProcedure);
-
-    void visit(Procedure.Call procedureCall);
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/BufferControl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/BufferControl.java
deleted file mode 100644
index e9422f1..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/BufferControl.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Commands to control the write buffer
- */
-public class BufferControl {
-
-    public static final Push PUSH = new Push();
-
-    public static final class Push implements Command {
-        private Push() {
-
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-    }
-
-    /**
-     * Pop the current stored buffer into a variable. This command
-     * must effectively be matched by a VariableBinding.End command
-     */
-    public static final class Pop implements Command {
-
-        private String variableName;
-
-        public Pop(String variableName) {
-            this.variableName = variableName;
-        }
-
-        /**
-         * Get the variable that will store the output
-         * @return - a variable name
-         */
-        public String getVariableName() {
-            return variableName;
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Conditional.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Conditional.java
deleted file mode 100644
index 92ef503..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Conditional.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Imposes a condition on the next rendering commands
- */
-public class Conditional {
-
-    public static class Start implements Command {
-        private String variable;
-        private boolean expectedTruthValue;
-
-        public Start(String variable, boolean expectedTruthValue) {
-            this.variable = variable;
-            this.expectedTruthValue = expectedTruthValue;
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-
-        public String getVariable() {
-            return variable;
-        }
-
-        public boolean getExpectedTruthValue() {
-            return expectedTruthValue;
-        }
-
-        @Override
-        public String toString() {
-            return "Conditional.Start{" +
-                    "variable='" + variable + '\'' +
-                    ", expectedTruthValue=" + expectedTruthValue +
-                    '}';
-        }
-    }
-
-    public static final End END = new End();
-
-    public static final class End implements Command {
-
-        private End() {
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-
-        @Override
-        public String toString() {
-            return "Conditional.End{}";
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Loop.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Loop.java
deleted file mode 100644
index 074eb3d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Loop.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Render a sequence of commands repeatedly. Must have a corresponding end loop later
- * in the stream
- */
-public class Loop {
-
-    public static class Start implements Command {
-
-        private String listVariable;
-        private String itemVariable;
-        private String indexVariable;
-
-        public Start(String listVariable, String itemVariable, String indexVariable) {
-            this.listVariable = listVariable;
-            this.itemVariable = itemVariable;
-            this.indexVariable = indexVariable;
-        }
-
-        public String getListVariable() {
-            return listVariable;
-        }
-
-        public String getItemVariable() {
-            return itemVariable;
-        }
-
-        public String getIndexVariable() {
-            return indexVariable;
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-
-        @Override
-        public String toString() {
-            return "Loop.Start{" +
-                    "listVariable='" + listVariable + '\'' +
-                    ", itemVariable='" + itemVariable + '\'' +
-                    ", indexVariable='" + indexVariable + '\'' +
-                    '}';
-        }
-    }
-
-    public static final End END = new End();
-
-    public static final class End implements Command {
-        private End() {
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-
-        @Override
-        public String toString() {
-            return "Loop.End{}";
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutText.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutText.java
deleted file mode 100644
index 6d3b1e8..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutText.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Render a text fragment
- */
-public class OutText implements Command {
-
-    private String text;
-
-    public OutText(String text) {
-        this.text = text;
-    }
-
-    @Override
-    public void accept(CommandVisitor visitor) {
-        visitor.visit(this);
-    }
-
-    public String getText() {
-        return text;
-    }
-
-    @Override
-    public String toString() {
-        return "OutText{" +
-                "text='" + text + '\'' +
-                '}';
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutVariable.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutVariable.java
deleted file mode 100644
index a66c6b6..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/OutVariable.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Render the content of a variable
- */
-public class OutVariable implements Command {
-
-    private final String variableName;
-
-    public OutVariable(String variableName) {
-        this.variableName = variableName;
-    }
-
-    @Override
-    public void accept(CommandVisitor visitor) {
-        visitor.visit(this);
-    }
-
-    public String getVariableName() {
-        return variableName;
-    }
-
-    @Override
-    public String toString() {
-        return "OutVariable{" +
-                "variableName='" + variableName + '\'' +
-                '}';
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Patterns.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Patterns.java
deleted file mode 100644
index 0ada0b5..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Patterns.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-
-/**
- * Usual command patterns
- */
-public class Patterns {
-
-    private static final String ALWAYS_FALSE_VAR = "always_false";
-
-    /**
-     * Inserts a sequence of commands that will ignore the rest of the stream until
-     * the end stream sequence is inserted
-     * @param stream - the stream
-     */
-    public static void beginStreamIgnore(PushStream stream) {
-        stream.emit(new VariableBinding.Start(ALWAYS_FALSE_VAR, BooleanConstant.FALSE));
-        stream.emit(new Conditional.Start(ALWAYS_FALSE_VAR, true));
-    }
-
-    /**
-     * Inserts a sequence of commands that cancels stream ignore
-     * @param stream - the input stream
-     */
-    public static void endStreamIgnore(PushStream stream) {
-        stream.emit(Conditional.END);
-        stream.emit(VariableBinding.END);
-    }
-
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Procedure.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Procedure.java
deleted file mode 100644
index fd24717..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/Procedure.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Commands that delimitate a procedure
- */
-public class Procedure {
-
-    public static class Start implements Command {
-
-        private String name;
-        private Set<String> parameters;
-
-        public Start(String name, Set<String> parameters) {
-            this.name = name;
-            this.parameters = new HashSet<String>(parameters);
-        }
-
-        public String getName() {
-            return name;
-        }
-
-        public Set<String> getParameters() {
-            return Collections.unmodifiableSet(parameters);
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-    }
-
-    public static final End END = new End();
-
-    public static final class End implements Command {
-
-        private End() {
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-    }
-
-    public static class Call implements Command {
-
-        private final String templateVariable;
-        private final String argumentsVariable;
-
-        public Call(String templateVariable, String argumentsVariable) {
-            this.templateVariable = templateVariable;
-            this.argumentsVariable = argumentsVariable;
-        }
-
-        public String getTemplateVariable() {
-            return templateVariable;
-        }
-
-        public String getArgumentsVariable() {
-            return argumentsVariable;
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/VariableBinding.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/VariableBinding.java
deleted file mode 100644
index 317a0dc..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/api/ris/command/VariableBinding.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.api.ris.command;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Marks the binding of a variable. Must have a corresponding binding end later in the stream
- */
-public class VariableBinding {
-
-    public static class Start implements Command {
-        private String variableName;
-        private ExpressionNode expression;
-
-        public Start(String variableName, ExpressionNode expression) {
-            this.variableName = variableName;
-            this.expression = expression;
-        }
-
-        public String getVariableName() {
-            return variableName;
-        }
-
-        public ExpressionNode getExpression() {
-            return expression;
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-
-        @Override
-        public String toString() {
-            return "VariableBinding.Start{" +
-                    "variableName='" + variableName + '\'' +
-                    ", expression=" + expression +
-                    '}';
-        }
-    }
-
-    public static final End END = new End();
-
-    public static final class End implements Command {
-
-        private End() {
-        }
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-
-        @Override
-        public String toString() {
-            return "VariableBinding.End{}";
-        }
-    }
-
-    public static final class Global implements Command {
-
-        private final String variableName;
-        private final ExpressionNode expressionNode;
-
-        public Global(String variableName, ExpressionNode expressionNode) {
-            this.variableName = variableName;
-            this.expressionNode = expressionNode;
-        }
-
-        public String getVariableName() {
-            return variableName;
-        }
-
-        public ExpressionNode getExpression() {
-            return expressionNode;
-        }
-
-
-        @Override
-        public void accept(CommandVisitor visitor) {
-            visitor.visit(this);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/common/DefaultPluginInvoke.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/common/DefaultPluginInvoke.java
deleted file mode 100644
index d4ef722..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/common/DefaultPluginInvoke.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.common;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * Empty implementation for plugin invocation. Use this to implement
- * methods selectively.
- * @see org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin
- */
-public class DefaultPluginInvoke implements PluginInvoke {
-
-    @Override
-    public void beforeElement(PushStream stream, String tagName) {
-        
-    }
-
-    @Override
-    public void beforeTagOpen(PushStream stream) {
-
-    }
-
-    @Override
-    public void beforeAttributes(PushStream stream) {
-
-    }
-
-    @Override
-    public void beforeAttribute(PushStream stream, String attributeName) {
-
-    }
-
-    @Override
-    public void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue) {
-
-    }
-
-    @Override
-    public void afterAttributeValue(PushStream stream, String attributeName) {
-
-    }
-
-    @Override
-    public void afterAttribute(PushStream stream, String attributeName) {
-
-    }
-
-    @Override
-    public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
-
-    }
-
-    @Override
-    public void afterAttributes(PushStream stream) {
-
-    }
-
-    @Override
-    public void afterTagOpen(PushStream stream) {
-
-    }
-
-    @Override
-    public void beforeChildren(PushStream stream) {
-
-    }
-
-    @Override
-    public void afterChildren(PushStream stream) {
-
-    }
-
-    @Override
-    public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
-
-    }
-
-    @Override
-    public void afterTagClose(PushStream stream, boolean isSelfClosing) {
-
-    }
-
-    @Override
-    public void afterElement(PushStream stream) {
-
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/LoggingHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/LoggingHandler.java
deleted file mode 100644
index 63a6f7f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/LoggingHandler.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.debug;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-
-/**
- * Handler which logs all commands
- */
-public final class LoggingHandler implements CommandHandler {
-
-    public static final LoggingHandler INSTANCE = new LoggingHandler();
-
-    private final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);
-
-    private LoggingHandler() {
-    }
-
-    @Override
-    public void onEmit(Command command) {
-        LOG.info("Emitting {}", command);
-    }
-
-    @Override
-    public void onError(String errorMessage) {
-        LOG.info("Error: {}", errorMessage);
-    }
-
-    @Override
-    public void onDone() {
-        LOG.info("Finished");
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/SanityChecker.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/SanityChecker.java
deleted file mode 100644
index 3d4a27e..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/debug/SanityChecker.java
+++ /dev/null
@@ -1,167 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.debug;
-
-import java.util.Stack;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.*;
-
-/**
- * A visitor which checks a stream for correct closing of things
- */
-public final class SanityChecker implements CommandVisitor, CommandHandler {
-
-    private enum NestedType {
-        CONDITIONAL, VARIABLE_BIND, LOOP
-    }
-
-    private final Stack<NestedType> stack = new Stack<NestedType>();
-    private int bufferPushCount;
-    private boolean inProcedure;
-
-    private SanityChecker() {
-    }
-
-    public static void attachChecker(CommandStream commandStream) {
-        commandStream.addHandler(new SanityChecker());
-    }
-
-    @Override
-    public void onEmit(Command command) {
-        command.accept(this);
-    }
-
-    @Override
-    public void onError(String errorMessage) {
-        throw new RuntimeException(errorMessage);
-    }
-
-    @Override
-    public void onDone() {
-        if (!stack.isEmpty()) {
-            throw new IllegalStateException("Unclosed commands left");
-        }
-        if (bufferPushCount > 0) {
-            throw new IllegalStateException("There are pushed buffer writers at stream end");
-        }
-    }
-
-
-    @Override
-    public void visit(Conditional.Start conditionalStart) {
-        stack.push(NestedType.CONDITIONAL);
-    }
-
-    @Override
-    public void visit(Conditional.End conditionalEnd) {
-        popCheck(NestedType.CONDITIONAL);
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        stack.push(NestedType.VARIABLE_BIND);
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-        popCheck(NestedType.VARIABLE_BIND);
-    }
-
-    @Override
-    public void visit(VariableBinding.Global globalAssignment) {
-    }
-
-    @Override
-    public void visit(OutVariable outVariable) {
-    }
-
-    @Override
-    public void visit(OutText outText) {
-    }
-
-    @Override
-    public void visit(Loop.Start loopStart) {
-        stack.push(NestedType.LOOP);
-    }
-
-    @Override
-    public void visit(Loop.End loopEnd) {
-        popCheck(NestedType.LOOP);
-    }
-
-    @Override
-    public void visit(BufferControl.Push bufferPush) {
-        bufferPushCount++;
-    }
-
-    @Override
-    public void visit(BufferControl.Pop bufferPop) {
-        if (bufferPushCount == 0) {
-            throw new IllegalStateException("There are more buffer pop commands than push");
-        }
-        bufferPushCount--;
-        stack.push(NestedType.VARIABLE_BIND);
-    }
-
-    @Override
-    public void visit(Procedure.Start startProcedure) {
-        if (inProcedure) {
-            throw new IllegalStateException("Cannot have nested procedures: " + startProcedure.getName());
-        }
-        inProcedure = true;
-    }
-
-    @Override
-    public void visit(Procedure.End endProcedure) {
-        if (!inProcedure) {
-            throw new IllegalStateException("Procedure closing is unmatched");
-        }
-        inProcedure = false;
-    }
-
-    @Override
-    public void visit(Procedure.Call procedureCall) {
-    }
-
-    private void popCheck(NestedType nestedType) {
-        if (stack.isEmpty()) {
-            throw new IllegalStateException("Unbalanced command: " + nestedType);
-        }
-        NestedType top = stack.pop();
-        if (top != nestedType) {
-            throw new IllegalStateException("Command closing is unmatched. Expected " + top + ", actual: " + nestedType);
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/AggregatePluginInvoke.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/AggregatePluginInvoke.java
deleted file mode 100644
index 77e034b..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/AggregatePluginInvoke.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-
-import java.util.List;
-
-/**
- * Plugin invoke which aggregates the behavior of several plugin invokes
- */
-public class AggregatePluginInvoke implements PluginInvoke {
-
-    private final List<PluginInvoke> invokes;
-
-    public AggregatePluginInvoke(List<PluginInvoke> invokes) {
-        this.invokes = invokes;
-    }
-
-    @Override
-    public void beforeElement(PushStream stream, String tagName) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.beforeElement(stream, tagName);
-        }
-    }
-
-    @Override
-    public void beforeTagOpen(PushStream stream) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.beforeTagOpen(stream);
-        }
-    }
-
-    @Override
-    public void beforeAttributes(PushStream stream) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.beforeAttributes(stream);
-        }
-    }
-
-    @Override
-    public void beforeAttribute(PushStream stream, String attributeName) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.beforeAttribute(stream, attributeName);
-        }
-    }
-
-    @Override
-    public void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.beforeAttributeValue(stream, attributeName, attributeValue);
-        }
-    }
-
-    @Override
-    public void afterAttributeValue(PushStream stream, String attributeName) {
-        for (int i = invokes.size() - 1; i >= 0; i--) {
-            PluginInvoke invoke = invokes.get(i);
-            invoke.afterAttributeValue(stream, attributeName);
-        }
-    }
-
-    @Override
-    public void afterAttribute(PushStream stream, String attributeName) {
-        for (int i = invokes.size() - 1; i >= 0; i--) {
-            PluginInvoke invoke = invokes.get(i);
-            invoke.afterAttribute(stream, attributeName);
-        }
-    }
-
-    @Override
-    public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.onPluginCall(stream, callInfo, expression);
-        }
-    }
-
-    @Override
-    public void afterAttributes(PushStream stream) {
-        for (int i = invokes.size() - 1; i >= 0; i--) {
-            PluginInvoke invoke = invokes.get(i);
-            invoke.afterAttributes(stream);
-        }
-    }
-
-    @Override
-    public void afterTagOpen(PushStream stream) {
-        for (int i = invokes.size() - 1; i >= 0; i--) {
-            PluginInvoke invoke = invokes.get(i);
-            invoke.afterTagOpen(stream);
-        }
-    }
-
-    @Override
-    public void beforeChildren(PushStream stream) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.beforeChildren(stream);
-        }
-    }
-
-    @Override
-    public void afterChildren(PushStream stream) {
-        for (int i = invokes.size() - 1; i >= 0; i--) {
-            PluginInvoke invoke = invokes.get(i);
-            invoke.afterChildren(stream);
-        }
-    }
-
-    @Override
-    public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
-        for (PluginInvoke invoke : invokes) {
-            invoke.beforeTagClose(stream, isSelfClosing);
-        }
-    }
-
-    @Override
-    public void afterTagClose(PushStream stream, boolean isSelfClosing) {
-        for (int i = invokes.size() - 1; i >= 0; i--) {
-            PluginInvoke invoke = invokes.get(i);
-            invoke.afterTagClose(stream, isSelfClosing);
-        }
-    }
-
-    @Override
-    public void afterElement(PushStream stream) {
-        for (int i = invokes.size() - 1; i >= 0; i--) {
-            PluginInvoke invoke = invokes.get(i);
-            invoke.afterElement(stream);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/DefaultCompilerContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/DefaultCompilerContext.java
deleted file mode 100644
index ab00323..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/DefaultCompilerContext.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.compiler.util.SymbolGenerator;
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.util.SymbolGenerator;
-
-
-/**
- * Default implementation for the compiler context
- * @see org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin
- */
-public class DefaultCompilerContext implements CompilerContext {
-
-    private SymbolGenerator symbolGenerator;
-    private ExpressionWrapper expressionWrapper;
-
-    DefaultCompilerContext(SymbolGenerator symbolGenerator, ExpressionWrapper wrapper) {
-        this.symbolGenerator = symbolGenerator;
-        this.expressionWrapper = wrapper;
-    }
-
-    @Override
-    public String generateVariable(String hint) {
-        return symbolGenerator.next(hint);
-    }
-
-    @Override
-    public Expression adjustToContext(Expression expression, MarkupContext context) {
-        if (!expression.getOptions().containsKey(Syntax.CONTEXT_OPTION)) {
-            return expressionWrapper.adjustToContext(expression, context);
-        }
-        return expression;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ElementContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ElementContext.java
deleted file mode 100644
index 196acc1..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ElementContext.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import java.util.AbstractMap;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-
-/**
- * Data structure used by {@link MarkupHandlerImpl}
- */
-class ElementContext {
-    private final String tagName;
-    private final String openTagStartMarkup;
-
-    private final List<PrioritizedInvoke> invokeList = new ArrayList<PrioritizedInvoke>();
-    private final List<Map.Entry<String, Object>> attributes = new ArrayList<Map.Entry<String, Object>>();
-    private PluginInvoke aggregateInvoke;
-
-    public ElementContext(String tagName, String openTagStartMarkup) {
-        this.tagName = tagName;
-        this.openTagStartMarkup = openTagStartMarkup;
-    }
-
-    public String getTagName() {
-        return tagName;
-    }
-
-    public String getOpenTagStartMarkup() {
-        return openTagStartMarkup;
-    }
-
-    public void addPlugin(PluginInvoke invoke, int priority) {
-        invokeList.add(new PrioritizedInvoke(invoke, priority));
-    }
-
-    public void addAttribute(String name, String value) {
-        attributes.add(new AbstractMap.SimpleEntry<String, Object>(name, value));
-    }
-
-    public void addPluginCall(String name, PluginCallInfo info, Expression expression) {
-        attributes.add(new AbstractMap.SimpleEntry<String, Object>(name,
-                new AbstractMap.SimpleEntry<PluginCallInfo, Expression>(info, expression)));
-    }
-
-    public Iterable<Map.Entry<String, Object>> getAttributes() {
-        return attributes;
-    }
-
-    public PluginInvoke pluginInvoke() {
-        if (aggregateInvoke == null) {
-            Collections.sort(invokeList);
-            ArrayList<PluginInvoke> result = new ArrayList<PluginInvoke>();
-            for (PrioritizedInvoke prioritizedInvoke : invokeList) {
-                result.add(prioritizedInvoke.invoke);
-            }
-            aggregateInvoke = new AggregatePluginInvoke(result);
-        }
-        return aggregateInvoke;
-    }
-
-
-    private static final class PrioritizedInvoke implements Comparable<PrioritizedInvoke> {
-
-        private final PluginInvoke invoke;
-        private final int priority;
-
-        private PrioritizedInvoke(PluginInvoke invoke, int priority) {
-            this.invoke = invoke;
-            this.priority = priority;
-        }
-
-        @Override
-        public int compareTo(PrioritizedInvoke o) {
-            if (this.priority < o.priority) {
-                return -1;
-            } else if (this.priority == o.priority) {
-                return  0;
-            }
-            return 1;
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParser.java
deleted file mode 100644
index c47fef7..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParser.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-
-/**
- * Sightly expression parser service interface
- *
- * */
-public interface ExpressionParser {
-
-    /**
-     * Parses the expression string.
-     *
-     * @param exprString as defined by the Sightly spec (http://apache.org)
-     *
-     * @return Parsed Expression object
-     *
-     * @throws NullPointerException is the given exprString is null
-     * @throws ParserException if an error occurs while parsing the expression
-     * */
-    public Interpolation parseInterpolation(String exprString);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParserImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParserImpl.java
deleted file mode 100644
index cd8e651..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionParserImpl.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import org.apache.sling.parser.expr.generated.SightlyLexer;
-import org.apache.sling.parser.expr.generated.SightlyParser;
-import org.antlr.v4.runtime.ANTLRInputStream;
-import org.antlr.v4.runtime.CommonTokenStream;
-import org.antlr.v4.runtime.RecognitionException;
-
-public class ExpressionParserImpl implements ExpressionParser {
-
-    public Interpolation parseInterpolation(String text) throws ParserException {
-        SightlyParser parser = createParser(text);
-        try {
-            return parser.interpolation().interp;
-        } catch (RecognitionException e) {
-            throw new ParserException(e);
-        }
-    }
-
-    private SightlyParser createParser(String str) {
-        SightlyLexer lexer = new SightlyLexer(new ANTLRInputStream(str));
-        CommonTokenStream tokenStream = new CommonTokenStream(lexer);
-        SightlyParser parser = new SightlyParser(tokenStream);
-        parser.removeErrorListeners();
-        parser.addErrorListener(new SightlyParserErrorListener());
-        return parser;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionWrapper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionWrapper.java
deleted file mode 100644
index 2a098c7..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ExpressionWrapper.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-
-/**
- * This object wraps expressions in filter applications depending
- * on options
- */
-class ExpressionWrapper {
-
-    private final List<Filter> filters;
-
-    ExpressionWrapper(Collection<Filter> filters) {
-        this.filters = new ArrayList<Filter>();
-        this.filters.addAll(filters);
-        Collections.sort(this.filters);
-    }
-
-    public Expression transform(Interpolation interpolation, MarkupContext markupContext) {
-        ArrayList<ExpressionNode> nodes = new ArrayList<ExpressionNode>();
-        HashMap<String, ExpressionNode> options = new HashMap<String, ExpressionNode>();
-        for (Fragment fragment : interpolation.getFragments()) {
-            if (fragment.isString()) {
-                nodes.add(new StringConstant(fragment.getText()));
-            } else {
-                Expression expression = fragment.getExpression();
-                options.putAll(expression.getOptions());
-                nodes.add(transformExpr(expression, markupContext).getRoot());
-            }
-        }
-        ExpressionNode root = join(nodes);
-        if (interpolation.size() > 1 && options.containsKey(Syntax.CONTEXT_OPTION)) {
-            //context must not be calculated by merging
-            options.remove(Syntax.CONTEXT_OPTION);
-        }
-        return new Expression(root, options);
-    }
-
-    private Expression applyFilters(Expression expression) {
-        Expression result = expression;
-        for (Filter filter : filters) {
-            result = filter.apply(result);
-        }
-        return result;
-    }
-
-    public Expression adjustToContext(Expression expression, MarkupContext markupContext) {
-        if (expression.containsOption(Syntax.CONTEXT_OPTION)) {
-            return expression;
-        }
-        Map<String, ExpressionNode> opt = addDefaultContext(Collections.<String, ExpressionNode>emptyMap(), markupContext);
-        Expression result = applyFilters(new Expression(expression.getRoot(), opt));
-        return expression.withNode(result.getRoot());
-    }
-
-    private ExpressionNode join(List<ExpressionNode> nodes) {
-        if (nodes.isEmpty()) {
-            return StringConstant.EMPTY;
-        }
-        ExpressionNode root = nodes.get(0);
-        for (int i = 1; i < nodes.size(); i++) {
-            ExpressionNode node = nodes.get(i);
-            root = new BinaryOperation(BinaryOperator.CONCATENATE, root, node);
-        }
-        return root;
-    }
-
-    private Expression transformExpr(Expression expression, MarkupContext markupContext) {
-        expression = addDefaultContext(expression, markupContext);
-        return applyFilters(expression);
-    }
-
-    private Expression addDefaultContext(Expression expression, MarkupContext context) {
-        return new Expression(expression.getRoot(), addDefaultContext(expression.getOptions(), context));
-    }
-
-    private Map<String, ExpressionNode> addDefaultContext(Map<String, ExpressionNode> options, MarkupContext context) {
-        if (context == null || options.containsKey(Syntax.CONTEXT_OPTION)) {
-            return options;
-        }
-        HashMap<String, ExpressionNode> newOptions = new HashMap<String, ExpressionNode>(options);
-        newOptions.put(Syntax.CONTEXT_OPTION, new StringConstant(context.getName()));
-        return newOptions;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Fragment.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Fragment.java
deleted file mode 100644
index 22db1a0..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Fragment.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-
-/**
- * A segment in an interpolation.
- */
-public interface Fragment {
-
-    boolean isString();
-    boolean isExpression();
-
-    Expression getExpression();
-    String getText();
-
-    /**
-     * A fragment which is an expression.
-     */
-    public static class Expr implements Fragment {
-
-        private Expression expression;
-
-        public Expr(Expression expression) {
-            this.expression = expression;
-        }
-
-        @Override
-        public Expression getExpression() {
-            return expression;
-        }
-
-        @Override
-        public String getText() {
-            throw new UnsupportedOperationException("Not a text fragment");
-        }
-
-        public boolean isString() {
-            return false;
-        }
-
-        public boolean isExpression() {
-            return true;
-        }
-
-        @Override
-        public String toString() {
-            return "Expr{" +
-                    "expression=" + expression +
-                    '}';
-        }
-    }
-
-    /**
-     * A text fragment.
-     */
-    public static class Text implements Fragment {
-        private String text;
-
-        public Text(String text) {
-            this.text = text;
-        }
-
-        @Override
-        public String getText() {
-            return text;
-        }
-
-        public boolean isString() {
-            return true;
-        }
-
-        public boolean isExpression() {
-            return false;
-        }
-
-        @Override
-        public Expression getExpression() {
-            throw new UnsupportedOperationException("Not an expression fragment");
-        }
-
-        @Override
-        public String toString() {
-            return "Text{" +
-                    "text='" + text + '\'' +
-                    '}';
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Interpolation.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Interpolation.java
deleted file mode 100644
index 50d55d7..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/Interpolation.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-
-/**
- * A sequence with alternating string fragments and Sightly expressions.
- * These result from parsing HTML attributes or string nodes.
- * For instance "Hello ${World}!" would result in 3 fragments:
- * "Hello ", ${World} and "!"
- */
-public class Interpolation {
-
-    //todo: this should be immutable to maintain the design consistent
-
-    private List<Fragment> fragments = new ArrayList<Fragment>();
-
-    public void addFragment(Fragment fragment) {
-        fragments.add(fragment);
-    }
-
-    public void addExpression(Expression expression) {
-        fragments.add(new Fragment.Expr(expression));
-    }
-
-    public void addText(String text) {
-        fragments.add(new Fragment.Text(text));
-    }
-
-    /**
-     * Get the number of fragments
-     * @return the number of fragments
-     */
-    public int size() {
-        return fragments.size();
-    }
-
-    /**
-     * Return the fragment with the specified index
-     * @param index - the index of the fragments. must be less than the size of the interpolation
-     * @return - the specified fragment
-     * @throws IndexOutOfBoundsException - if the index is negative or greater or equal than size
-     */
-    public Fragment getFragment(int index) {
-        return fragments.get(index);
-    }
-
-    public Iterable<Fragment> getFragments() {
-        return fragments;
-    }
-
-    @Override
-    public String toString() {
-        return "Interpolation{" +
-                "fragments=" + fragments +
-                '}';
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/MarkupHandlerImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/MarkupHandlerImpl.java
deleted file mode 100644
index 7c2ed8e..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/MarkupHandlerImpl.java
+++ /dev/null
@@ -1,405 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import java.util.Collection;
-import java.util.Map;
-import java.util.Stack;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupHandler;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.util.SymbolGenerator;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.html.MarkupUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Implementation for the markup handler
- */
-public class MarkupHandlerImpl implements MarkupHandler {
-
-    private static final Logger log = LoggerFactory.getLogger(MarkupHandlerImpl.class);
-
-    private final PushStream stream;
-    private final SymbolGenerator symbolGenerator = new SymbolGenerator();
-    private final ExpressionParser expressionParser = new ExpressionParserImpl();
-    private final Map<String, Plugin> pluginRegistry;
-    private final CompilerContext compilerContext;
-    private final ExpressionWrapper expressionWrapper;
-
-    private final Stack<ElementContext> elementStack = new Stack<ElementContext>();
-
-    public MarkupHandlerImpl(PushStream stream, Map<String, Plugin> pluginRegistry, Collection<Filter> filters) {
-        this.stream = stream;
-        this.pluginRegistry = pluginRegistry;
-        this.expressionWrapper = new ExpressionWrapper(filters);
-        this.compilerContext = new DefaultCompilerContext(symbolGenerator, expressionWrapper);
-    }
-
-    @Override
-    public void onOpenTagStart(String markup, String tagName) {
-        ElementContext context = new ElementContext(tagName, markup);
-        elementStack.push(context);
-    }
-
-    @Override
-    public void onAttribute(String name, String value) {
-        ElementContext context = elementStack.peek();
-        if (Syntax.isPluginAttribute(name)) {
-            handlePlugin(name, StringUtils.defaultString(value, ""), context);
-        } else {
-            context.addAttribute(name, value);
-        }
-    }
-
-    @Override
-    public void onOpenTagEnd(String markup) {
-        ElementContext context = elementStack.peek();
-        PluginInvoke invoke = context.pluginInvoke();
-        invoke.beforeElement(stream, context.getTagName());
-        invoke.beforeTagOpen(stream);
-        out(context.getOpenTagStartMarkup());
-        invoke.beforeAttributes(stream);
-        traverseAttributes(context, invoke);
-        invoke.afterAttributes(stream);
-        out(markup);
-        invoke.afterTagOpen(stream);
-        invoke.beforeChildren(stream);
-    }
-
-    private void traverseAttributes(ElementContext context, PluginInvoke invoke) {
-        for (Map.Entry<String, Object> attribute : context.getAttributes()) {
-            String attrName = attribute.getKey();
-            Object contentObj = attribute.getValue();
-            if (contentObj == null || contentObj instanceof String) {
-                String content = (String) contentObj;
-                emitAttribute(attrName, content, invoke);
-            } else if (contentObj instanceof Map.Entry) {
-                Map.Entry entry = (Map.Entry) contentObj;
-                PluginCallInfo info = (PluginCallInfo) entry.getKey();
-                Expression expression = (Expression) entry.getValue();
-                invoke.onPluginCall(stream, info, expression);
-            }
-        }
-    }
-
-    private void emitAttribute(String name, String content, PluginInvoke invoke) {
-        invoke.beforeAttribute(stream, name);
-        if (content == null) {
-            emitSimpleTextAttribute(name, null, invoke);
-        } else {
-            Interpolation interpolation = expressionParser.parseInterpolation(content);
-            String text = tryAsSimpleText(interpolation);
-            if (text != null) {
-                emitSimpleTextAttribute(name, text, invoke);
-            } else {
-                emitExpressionAttribute(name, interpolation, invoke);
-            }
-        }
-        invoke.afterAttribute(stream, name);
-    }
-
-    private void emitSimpleTextAttribute(String name, String textValue, PluginInvoke invoke) {
-        emitAttributeStart(name);
-        invoke.beforeAttributeValue(stream, name, new StringConstant(textValue));
-        if (textValue != null) {
-            emitAttributeValueStart();
-            textValue = escapeQuotes(textValue);
-            out(textValue);
-            emitAttributeEnd();
-        }
-        invoke.afterAttributeValue(stream, name);
-    }
-
-    private String escapeQuotes(String textValue) {
-        return textValue.replace("\"", "&quot;");
-    }
-
-    private void emitExpressionAttribute(String name, Interpolation interpolation, PluginInvoke invoke) {
-        interpolation = attributeChecked(name, interpolation);
-        if (interpolation.size() == 1) {
-            emitSingleFragment(name, interpolation, invoke);
-        } else {
-            emitMultipleFragment(name, interpolation, invoke);
-        }
-    }
-
-    private void emitMultipleFragment(String name, Interpolation interpolation, PluginInvoke invoke) {
-        // Simplified algorithm for attribute output, which works when the interpolation is not of size 1. In this
-        // case we are certain that the attribute value cannot be the boolean value true, so we can skip this test
-        // altogether
-        Expression expression = expressionWrapper.transform(interpolation, getAttributeMarkupContext(name));
-        String attrContent = symbolGenerator.next("attrContent");
-        String shouldDisplayAttr = symbolGenerator.next("shouldDisplayAttr");
-        stream.emit(new VariableBinding.Start(attrContent, expression.getRoot()));
-        stream.emit(
-                new VariableBinding.Start(
-                        shouldDisplayAttr,
-                        new BinaryOperation(
-                                BinaryOperator.OR,
-                                new Identifier(attrContent),
-                                new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrContent))
-                        )
-                )
-        );
-        stream.emit(new Conditional.Start(shouldDisplayAttr, true));
-        emitAttributeStart(name);
-        invoke.beforeAttributeValue(stream, name, expression.getRoot());
-        emitAttributeValueStart();
-        stream.emit(new OutVariable(attrContent));
-        emitAttributeEnd();
-        invoke.afterAttributeValue(stream, name);
-        stream.emit(Conditional.END);
-        stream.emit(VariableBinding.END);
-        stream.emit(VariableBinding.END);
-    }
-
-    private void emitSingleFragment(String name, Interpolation interpolation, PluginInvoke invoke) {
-        Expression valueExpression = expressionWrapper.transform(interpolation, null); //raw expression
-        String attrValue = symbolGenerator.next("attrValue"); //holds the raw attribute value
-        String attrContent = symbolGenerator.next("attrContent"); //holds the escaped attribute value
-        String isTrueVar = symbolGenerator.next("isTrueAttr"); // holds the comparison (attrValue == true)
-        String shouldDisplayAttr = symbolGenerator.next("shouldDisplayAttr");
-        MarkupContext markupContext = getAttributeMarkupContext(name);
-        Expression contentExpression = valueExpression.withNode(new Identifier(attrValue));
-        ExpressionNode node = valueExpression.getRoot();
-        stream.emit(new VariableBinding.Start(attrValue, node)); //attrContent = <expr>
-        stream.emit(new VariableBinding.Start(attrContent, expressionWrapper.adjustToContext(contentExpression, markupContext).getRoot()));
-        stream.emit(
-                new VariableBinding.Start(
-                        shouldDisplayAttr,
-                        new BinaryOperation(
-                                BinaryOperator.OR,
-                                new Identifier(attrContent),
-                                new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrValue))
-                        )
-                )
-        );
-        stream.emit(new Conditional.Start(shouldDisplayAttr, true)); // if (attrContent)
-        emitAttributeStart(name);   //write("attrName");
-        invoke.beforeAttributeValue(stream, name, node);
-        stream.emit(new VariableBinding.Start(isTrueVar, //isTrueAttr = (attrValue == true)
-                new BinaryOperation(BinaryOperator.EQ, new Identifier(attrValue), BooleanConstant.TRUE)));
-        stream.emit(new Conditional.Start(isTrueVar, false)); //if (!isTrueAttr)
-        emitAttributeValueStart(); // write("='");
-        stream.emit(new OutVariable(attrContent)); //write(attrContent)
-        emitAttributeEnd(); //write("'");
-        stream.emit(Conditional.END); //end if isTrueAttr
-        stream.emit(VariableBinding.END); //end scope for isTrueAttr
-        invoke.afterAttributeValue(stream, name);
-        stream.emit(Conditional.END); //end if attrContent
-        stream.emit(VariableBinding.END);
-        stream.emit(VariableBinding.END); //end scope for attrContent
-        stream.emit(VariableBinding.END); //end scope for attrValue
-    }
-
-
-    private void emitAttributeStart(String name) {
-        out(" " + name);
-    }
-
-    private void emitAttributeValueStart() {
-        out("=\"");
-    }
-
-    private void emitAttributeEnd() {
-        out("\"");
-    }
-
-    @Override
-    public void onCloseTag(String markup) {
-        ElementContext context = elementStack.pop();
-        PluginInvoke invoke = context.pluginInvoke();
-        invoke.afterChildren(stream);
-        boolean selfClosingTag = StringUtils.isEmpty(markup);
-        invoke.beforeTagClose(stream, selfClosingTag);
-        out(markup);
-        invoke.afterTagClose(stream, selfClosingTag);
-        invoke.afterElement(stream);
-    }
-
-    @Override
-    public void onText(String text) {
-        String tag = currentElementTag();
-        boolean explicitContextRequired = isExplicitContextRequired(tag);
-        MarkupContext markupContext = (explicitContextRequired) ? null : MarkupContext.TEXT;
-        outText(text, markupContext);
-    }
-
-    @Override
-    public void onComment(String markup) {
-        if (!Syntax.isSightlyComment(markup)) {
-            outText(markup, MarkupContext.COMMENT);
-        }
-    }
-
-    @Override
-    public void onDataNode(String markup) {
-        out(markup);
-    }
-
-    @Override
-    public void onDocType(String markup) {
-        out(markup);
-    }
-
-    @Override
-    public void onDocumentFinished() {
-        this.stream.signalDone();
-    }
-
-    private void outText(String content, MarkupContext context) {
-        Interpolation interpolation = expressionParser.parseInterpolation(content);
-        if (context == null) {
-            interpolation = requireContext(interpolation);
-        }
-        String text = tryAsSimpleText(interpolation);
-        if (text != null) {
-            out(text);
-        } else {
-            outExprNode(expressionWrapper.transform(interpolation, context).getRoot());
-        }
-    }
-
-    private Interpolation requireContext(Interpolation interpolation) {
-        Interpolation result = new Interpolation();
-        for (Fragment fragment : interpolation.getFragments()) {
-            Fragment addedFragment;
-            if (fragment.isString()) {
-                addedFragment = fragment;
-            } else {
-                if (fragment.getExpression().containsOption(Syntax.CONTEXT_OPTION)) {
-                    addedFragment = fragment;
-                } else {
-                    String currentTag = currentElementTag();
-                    log.warn("Element {} requires that all expressions have an explicit context specified. Expression will be " +
-                            "replaced by the empty string", currentTag);
-                    addedFragment = new Fragment.Expr(new Expression(StringConstant.EMPTY));
-                }
-            }
-            result.addFragment(addedFragment);
-        }
-        return result;
-    }
-
-    private Interpolation attributeChecked(String attributeName, Interpolation interpolation) {
-        if (!MarkupUtils.isSensitiveAttribute(attributeName)) {
-            return interpolation;
-        }
-        Interpolation newInterpolation = new Interpolation();
-        for (Fragment fragment : interpolation.getFragments()) {
-            Fragment addedFragment = fragment;
-            if (fragment.isExpression()) {
-                Expression expression = fragment.getExpression();
-                if (!expression.containsOption(Syntax.CONTEXT_OPTION)) {
-                    log.warn("All expressions within the value of attribute {} need to have an explicit context option. The expression will be erased.",
-                            attributeName);
-                    addedFragment = new Fragment.Text("");
-                }
-            }
-            newInterpolation.addFragment(addedFragment);
-        }
-        return newInterpolation;
-    }
-
-
-    private void outExprNode(ExpressionNode node) {
-        String variable = symbolGenerator.next();
-        stream.emit(new VariableBinding.Start(variable, node));
-        stream.emit(new OutVariable(variable));
-        stream.emit(VariableBinding.END);
-    }
-
-
-    private String tryAsSimpleText(Interpolation interpolation) {
-        if (interpolation.size() == 1) {
-            Fragment fragment = interpolation.getFragment(0);
-            if (fragment.isString()) {
-                return fragment.getText();
-            }
-        } else if (interpolation.size() == 0) {
-            return "";
-        }
-        return null;
-    }
-
-    private void out(String text) {
-        stream.emit(new OutText(text));
-    }
-
-    private void handlePlugin(String name, String value, ElementContext context) {
-        PluginCallInfo callInfo = Syntax.parsePluginAttribute(name);
-        if (callInfo != null) {
-            Plugin plugin = obtainPlugin(callInfo.getName());
-            Expression expr = expressionWrapper.transform(
-                    expressionParser.parseInterpolation(value), null);
-            PluginInvoke invoke = plugin.invoke(expr, callInfo, compilerContext);
-            context.addPlugin(invoke, plugin.priority());
-            context.addPluginCall(name, callInfo, expr);
-        }
-    }
-
-    private Plugin obtainPlugin(String name) {
-        Plugin plugin = pluginRegistry.get(name);
-        if (plugin == null) {
-            throw new UnsupportedOperationException(String.format("Plugin %s does not exist", name));
-        }
-        return plugin;
-    }
-
-    private MarkupContext getAttributeMarkupContext(String attributeName) {
-        if ("src".equalsIgnoreCase(attributeName) || "href".equalsIgnoreCase(attributeName)) {
-            return MarkupContext.URI;
-        }
-        return MarkupContext.ATTRIBUTE;
-    }
-
-    private String currentElementTag() {
-        if (elementStack.isEmpty()) {
-            return null;
-        }
-        ElementContext current = elementStack.peek();
-        return current.getTagName();
-    }
-
-    private boolean isExplicitContextRequired(String parentElementName) {
-        return parentElementName != null &&
-                ("script".equals(parentElementName) || "style".equals(parentElementName));
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserException.java
deleted file mode 100644
index 4f19f67..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserException.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-/**
- * Plugin runtime exception to be used for either html or expression parser exceptions.
- */
-public class ParserException extends RuntimeException {
-
-    public ParserException() {
-        super();
-    }
-
-    public ParserException(String message) {
-        super(message);
-    }
-
-    public ParserException(String message, Throwable throwable) {
-        super(message, throwable);
-    }
-
-    public ParserException(Throwable throwable) {
-        super(throwable);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserHelper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserHelper.java
deleted file mode 100644
index 889f3b7..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/ParserHelper.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import org.apache.commons.lang.StringEscapeUtils;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-
-/**
- * Helper utilities for the ANTLR parser
- */
-public class ParserHelper {
-
-    public static String unEscape(String original) {
-        return original.replaceAll("\\\\\"", "\"").replaceAll("\\\\'", "'");
-    }
-
-    public static StringConstant createStringConstant(String original) {
-        String escaped = StringEscapeUtils.unescapeJava(original);
-        String trimmed = escaped.substring(1, escaped.length() - 1);
-        return new StringConstant(trimmed);
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SightlyParserErrorListener.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SightlyParserErrorListener.java
deleted file mode 100644
index 376cd61..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SightlyParserErrorListener.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import java.util.Collections;
-import java.util.List;
-
-import org.antlr.v4.runtime.BaseErrorListener;
-import org.antlr.v4.runtime.CommonTokenStream;
-import org.antlr.v4.runtime.Parser;
-import org.antlr.v4.runtime.RecognitionException;
-import org.antlr.v4.runtime.Recognizer;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.api.SightlyParsingException;
-
-/**
- * The {@code SightlyParserErrorListener} handles parsing error reporting by sending offending input to a logger.
- */
-public class SightlyParserErrorListener extends BaseErrorListener {
-
-    private static final Logger LOG = LoggerFactory.getLogger(SightlyParserErrorListener.class);
-
-    @Override
-    public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {
-        List<String> stack = ((Parser) recognizer).getRuleInvocationStack();
-        Collections.reverse(stack);
-        StringBuilder errorMessage = new StringBuilder();
-        errorMessage.append("Sightly syntax error detected.\n");
-        errorMessage.append("rule stack: ").append(stack).append("\n");
-        errorMessage.append("error starts at column: ").append(charPositionInLine).append("\n");
-        errorMessage.append(msg);
-        throw new SightlyParsingException("Sightly syntax error detected", ((CommonTokenStream) recognizer.getInputStream()).getTokenSource().getInputStream().toString(), e);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SimpleFrontend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SimpleFrontend.java
deleted file mode 100644
index 19cdb4c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/frontend/SimpleFrontend.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.frontend;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.CompilerFrontend;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupHandler;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupParser;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupHandler;
-
-/**
- * DOM-based compiler implementation
- */
-public class SimpleFrontend implements CompilerFrontend {
-
-    private final MarkupParser parser;
-    private final Map<String, Plugin> plugins;
-    private final List<Filter> filters;
-
-    public SimpleFrontend(MarkupParser markupParser, Collection<Plugin> plugins, Collection<Filter> filters) {
-        this.plugins = new HashMap<String, Plugin>();
-        for (Plugin plugin : plugins) {
-            this.plugins.put(plugin.name(), plugin);
-        }
-        this.filters = new ArrayList<Filter>(filters);
-        this.parser = markupParser;
-    }
-
-    @Override
-    public void compile(PushStream stream, String source) {
-        MarkupHandler markupHandler = new MarkupHandlerImpl(stream, plugins, filters);
-        parser.parse(source, markupHandler);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CoalescingWrites.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CoalescingWrites.java
deleted file mode 100644
index 6b626a6..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CoalescingWrites.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-
-/**
- * Aggregate consecutive writes in bigger chunks of text
- */
-public final class CoalescingWrites implements CommandHandler {
-
-    public static final StreamTransformer TRANSFORMER = new StreamTransformer() {
-        @Override
-        public CommandStream transform(CommandStream inStream) {
-            PushStream outputStream = new PushStream();
-            CoalescingWrites instance = new CoalescingWrites(outputStream);
-            inStream.addHandler(instance);
-            return outputStream;
-        }
-    };
-
-    private StringBuilder builder = new StringBuilder();
-    private final PushStream outStream;
-
-    private CoalescingWrites(PushStream stream) {
-        this.outStream = stream;
-    }
-
-    @Override
-    public void onEmit(Command command) {
-        String text = detectText(command);
-        if (text != null) {
-            builder.append(text);
-        } else {
-            flushText();
-            outStream.emit(command);
-        }
-    }
-
-
-    @Override
-    public void onError(String errorMessage) {
-        flushText();
-        outStream.signalError(errorMessage);
-    }
-
-    @Override
-    public void onDone() {
-        flushText();
-        outStream.signalDone();
-    }
-
-    private String detectText(Command command) {
-        if (command instanceof OutText) {
-            return  ((OutText) command).getText();
-        }
-        return null;
-    }
-
-    private void flushText() {
-        if (builder.length() > 0) {
-            outStream.emit(new OutText(builder.toString()));
-            builder = new StringBuilder();
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CommandVariableUsage.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CommandVariableUsage.java
deleted file mode 100644
index 51b93db..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/CommandVariableUsage.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Extracts the variables used in a command
- */
-public class CommandVariableUsage implements CommandVisitor {
-
-    private ArrayList<String> variables = new ArrayList<String>();
-
-    public static List<String> extractVariables(Command command) {
-        CommandVariableUsage cvu = new CommandVariableUsage();
-        command.accept(cvu);
-        return cvu.variables;
-    }
-
-    @Override
-    public void visit(Conditional.Start conditionalStart) {
-        variables.add(conditionalStart.getVariable());
-    }
-
-    @Override
-    public void visit(Conditional.End conditionalEnd) {
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        addFromExpression(variableBindingStart.getExpression());
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-    }
-
-    @Override
-    public void visit(VariableBinding.Global globalAssignment) {
-        addFromExpression(globalAssignment.getExpression());
-    }
-
-    private void addFromExpression(ExpressionNode node) {
-        variables.addAll(VariableFinder.findVariables(node));
-    }
-
-    @Override
-    public void visit(OutVariable outVariable) {
-        variables.add(outVariable.getVariableName());
-    }
-
-    @Override
-    public void visit(OutText outText) {
-    }
-
-    @Override
-    public void visit(Loop.Start loopStart) {
-        variables.add(loopStart.getListVariable());
-    }
-
-    @Override
-    public void visit(Loop.End loopEnd) {
-    }
-
-    @Override
-    public void visit(BufferControl.Push bufferPush) {
-    }
-
-    @Override
-    public void visit(BufferControl.Pop bufferPop) {
-    }
-
-    @Override
-    public void visit(Procedure.Start startProcedure) {
-    }
-
-    @Override
-    public void visit(Procedure.End endProcedure) {
-    }
-
-    @Override
-    public void visit(Procedure.Call procedureCall) {
-        variables.add(procedureCall.getTemplateVariable());
-        variables.add(procedureCall.getArgumentsVariable());
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/DeadCodeRemoval.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/DeadCodeRemoval.java
deleted file mode 100644
index 2f735b1..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/DeadCodeRemoval.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import java.util.Stack;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.util.stream.EmitterVisitor;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.Streams;
-import org.apache.sling.scripting.sightly.compiler.visitor.StateControl;
-import org.apache.sling.scripting.sightly.compiler.visitor.StatefulVisitor;
-import org.apache.sling.scripting.sightly.compiler.visitor.StatefulRangeIgnore;
-import org.apache.sling.scripting.sightly.compiler.visitor.TrackingVisitor;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.util.stream.EmitterVisitor;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.Streams;
-import org.apache.sling.scripting.sightly.compiler.visitor.StateControl;
-import org.apache.sling.scripting.sightly.compiler.visitor.StatefulRangeIgnore;
-import org.apache.sling.scripting.sightly.compiler.visitor.StatefulVisitor;
-import org.apache.sling.scripting.sightly.compiler.visitor.TrackingVisitor;
-
-/**
- * Removes code under conditionals which are proven to fail. It is probably
- * a good idea to run this optimization after running
- * {@link org.apache.sling.scripting.sightly.compiler.optimization.reduce.ConstantFolding}
- */
-public class DeadCodeRemoval extends TrackingVisitor<Boolean> implements EmitterVisitor {
-    // this could be merged with constant folding for better accuracy
-
-    public static StreamTransformer transformer(final Dynamic dynamic) {
-        return new StreamTransformer() {
-            @Override
-            public CommandStream transform(CommandStream inStream) {
-                StatefulVisitor visitor = new StatefulVisitor();
-                DeadCodeRemoval dcr = new DeadCodeRemoval(visitor.getControl(), dynamic);
-                visitor.initializeWith(dcr);
-                Streams.connect(inStream, dcr.getOutputStream(), visitor);
-                return dcr.getOutputStream();
-            }
-        };
-    }
-
-    private final PushStream outStream = new PushStream();
-    private final StateControl stateControl;
-    private final Dynamic dynamic;
-    private final Stack<Boolean> keepConditionalEndStack = new Stack<Boolean>();
-
-    public DeadCodeRemoval(StateControl stateControl, Dynamic dynamic) {
-        this.stateControl = stateControl;
-        this.dynamic = dynamic;
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        Boolean truthValue = decodeConstantBool(variableBindingStart.getExpression());
-        tracker.pushVariable(variableBindingStart.getVariableName(), truthValue);
-        outStream.emit(variableBindingStart);
-    }
-
-    @Override
-    public void visit(Conditional.Start conditionalStart) {
-        Boolean truthValue = tracker.get(conditionalStart.getVariable());
-        boolean keepConditionalEnd;
-        if (truthValue == null) { //no information about the value of this variable
-            keepConditionalEnd = true;
-            outStream.emit(conditionalStart);
-        } else { //we already know what happens with this conditional. We can remove it
-            keepConditionalEnd = false;
-            if (truthValue != conditionalStart.getExpectedTruthValue()) {
-                //this conditional will always fail. We can ignore everything until
-                //the corresponding end-conditional
-                stateControl.push(new StatefulRangeIgnore(stateControl, Conditional.Start.class, Conditional.End.class));
-                return;
-            }
-        }
-        keepConditionalEndStack.push(keepConditionalEnd);
-    }
-
-    @Override
-    public void visit(Conditional.End conditionalEnd) {
-        boolean keep = keepConditionalEndStack.pop();
-        if (keep) {
-            outStream.emit(conditionalEnd);
-        }
-    }
-
-    @Override
-    public PushStream getOutputStream() {
-        return outStream;
-    }
-
-    @Override
-    protected Boolean assignDefault(Command command) {
-        return null;
-    }
-
-    @Override
-    protected void onCommand(Command command) {
-        outStream.emit(command);
-    }
-
-    private Boolean decodeConstantBool(ExpressionNode node) {
-        if (node instanceof StringConstant) {
-            return dynamic.coerceToBoolean(((StringConstant) node).getText());
-        }
-        if (node instanceof BooleanConstant) {
-            return ((BooleanConstant) node).getValue();
-        }
-        if (node instanceof NumericConstant) {
-            return dynamic.coerceToBoolean(((NumericConstant) node).getValue());
-        }
-        if (node instanceof NullLiteral) {
-            return dynamic.coerceToBoolean(null);
-        }
-        return null;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SequenceStreamTransformer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SequenceStreamTransformer.java
deleted file mode 100644
index b424404..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SequenceStreamTransformer.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-
-/**
- * Applies a list of transformations in sequence
- */
-public class SequenceStreamTransformer implements StreamTransformer {
-
-    private List<StreamTransformer> transformers;
-
-    public SequenceStreamTransformer(List<StreamTransformer> transformers) {
-        this.transformers = new ArrayList<StreamTransformer>(transformers);
-    }
-
-    @Override
-    public CommandStream transform(CommandStream inStream) {
-        CommandStream stream = inStream;
-        for (StreamTransformer transformer : transformers) {
-            stream = transformer.transform(stream);
-        }
-        return stream;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/StreamTransformer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/StreamTransformer.java
deleted file mode 100644
index ffeeb61..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/StreamTransformer.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-
-/**
- * Interface for stream transformations
- */
-public interface StreamTransformer {
-
-    /**
-     * Given the input stream, return a transformed out stream
-     * @param inStream the input stream
-     * @return the result stream
-     */
-    CommandStream transform(CommandStream inStream);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SyntheticMapRemoval.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SyntheticMapRemoval.java
deleted file mode 100644
index df7daca..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/SyntheticMapRemoval.java
+++ /dev/null
@@ -1,166 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.util.expression.NodeTransformer;
-import org.apache.sling.scripting.sightly.compiler.util.stream.EmitterVisitor;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.Streams;
-import org.apache.sling.scripting.sightly.compiler.visitor.TrackingVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.util.expression.NodeTransformer;
-import org.apache.sling.scripting.sightly.compiler.util.stream.EmitterVisitor;
-import org.apache.sling.scripting.sightly.compiler.util.stream.Streams;
-
-/**
- * This optimization handles variables initialized to map literals. It
- * initially assigns the values in the map to variables and wherever
- * the map literal is accessed, the property access is replaced with
- * the value variable, thus removing the need for a map lookup.
- */
-public final class SyntheticMapRemoval extends TrackingVisitor<MapLiteral> implements EmitterVisitor {
-
-    public static final StreamTransformer TRANSFORMER = new StreamTransformer() {
-        @Override
-        public CommandStream transform(CommandStream inStream) {
-            return Streams.map(inStream, new SyntheticMapRemoval());
-        }
-    };
-
-    private static final String VARIABLE_MARKER = "_field$_";
-
-    private final PushStream outputStream = new PushStream();
-    private final NodeTransformer transformer = new PropertyAccessTransformer();
-
-    private SyntheticMapRemoval() {
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        ExpressionNode node = variableBindingStart.getExpression();
-        String variable = variableBindingStart.getVariableName();
-        ExpressionNode transformed = transform(node);
-        if (transformed instanceof MapLiteral) {
-            MapLiteral newLiteral = overrideMap(variable, (MapLiteral) transformed);
-            tracker.pushVariable(variable, newLiteral);
-            transformed = newLiteral;
-        } else {
-            tracker.pushVariable(variable, null);
-        }
-        outputStream.emit(new VariableBinding.Start(variable, transformed));
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-        Map.Entry<String, MapLiteral> entry = tracker.peek();
-        super.visit(variableBindingEnd);
-        MapLiteral literal = entry.getValue();
-        if (literal != null) {
-            //need to un-bind all the introduced variables
-            for (int i = 0; i < literal.getMap().size(); i++) {
-                outputStream.emit(VariableBinding.END);
-            }
-        }
-    }
-
-    private ExpressionNode transform(ExpressionNode node) {
-        return transformer.transform(node);
-    }
-
-    private MapLiteral overrideMap(String variableName, MapLiteral mapLiteral) {
-        Map<String, ExpressionNode> newLiteral = new HashMap<String, ExpressionNode>();
-        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
-            String property = entry.getKey();
-            ExpressionNode valueNode = entry.getValue();
-            String valueVariable = valueVariableName(variableName, property);
-            newLiteral.put(property, new Identifier(valueVariable));
-            outputStream.emit(new VariableBinding.Start(valueVariable, valueNode));
-        }
-        return new MapLiteral(newLiteral);
-    }
-
-    private String valueVariableName(String variableName, String propertyName) {
-        return variableName + VARIABLE_MARKER + propertyName;
-    }
-
-    @Override
-    protected MapLiteral assignDefault(Command command) {
-        return null;
-    }
-
-    @Override
-    public void onCommand(Command command) {
-        outputStream.emit(command);
-    }
-
-    @Override
-    public PushStream getOutputStream() {
-        return outputStream;
-    }
-
-    private class PropertyAccessTransformer extends NodeTransformer {
-        @Override
-        public ExpressionNode evaluate(PropertyAccess propertyAccess) {
-            ExpressionNode target = propertyAccess.getTarget();
-            String variable = extractIdentifier(target);
-            if (variable != null) {
-                MapLiteral literal = tracker.get(variable);
-                if (literal != null) {
-                    String property = extractProperty(propertyAccess.getProperty());
-                    if (property != null) {
-                        ExpressionNode replacementNode = literal.getValue(property);
-                        if (replacementNode == null) {
-                            replacementNode = NullLiteral.INSTANCE;
-                        }
-                        return replacementNode;
-                    }
-                }
-            }
-            return super.evaluate(propertyAccess);
-        }
-
-        private String extractProperty(ExpressionNode expressionNode) {
-            if (expressionNode instanceof StringConstant) {
-                return ((StringConstant) expressionNode).getText();
-            }
-            return null;
-        }
-
-        private String extractIdentifier(ExpressionNode node) {
-            if (node instanceof Identifier) {
-                return ((Identifier) node).getName();
-            }
-            return null;
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/UnusedVariableRemoval.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/UnusedVariableRemoval.java
deleted file mode 100644
index c766cb4..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/UnusedVariableRemoval.java
+++ /dev/null
@@ -1,161 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Stack;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.util.stream.EmitterVisitor;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.Streams;
-import org.apache.sling.scripting.sightly.compiler.visitor.TrackingVisitor;
-
-/**
- * This optimization removes variables which are bound but
- * never used in the command stream
- */
-public final class UnusedVariableRemoval extends TrackingVisitor<UnusedVariableRemoval.VariableActivity> implements EmitterVisitor {
-
-    public static final StreamTransformer TRANSFORMER = new StreamTransformer() {
-        @Override
-        public CommandStream transform(CommandStream inStream) {
-            return Streams.map(inStream, new UnusedVariableRemoval());
-        }
-    };
-
-    private final PushStream outputStream = new PushStream();
-    private final Stack<List<Command>> storedCommandsStack = new Stack<List<Command>>();
-
-    private UnusedVariableRemoval() {
-    }
-
-    @Override
-    public PushStream getOutputStream() {
-        return outputStream;
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        //push a new buffer where we will store the following commands
-        //these commands will be emitted only if this variable will be used in
-        //it's scope
-        storedCommandsStack.push(new ArrayList<Command>());
-        //start tracking the variable
-        tracker.pushVariable(variableBindingStart.getVariableName(), new VariableActivity(variableBindingStart));
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-        // Get the activity of the exiting variable
-        VariableActivity variableActivity = tracker.peek().getValue();
-        tracker.popVariable();
-        boolean emitBindingEnd = true;
-        if (variableActivity != null) {
-            //this was a tracked variable. Popping all the commands
-            //which were delayed for this variable
-            List<Command> commands = storedCommandsStack.pop();
-            //if the variable binding is emitted than this binding
-            //end must be emitted as well
-            emitBindingEnd = variableActivity.isUsed();
-            if (variableActivity.isUsed()) {
-                VariableBinding.Start variableBindingStart = variableActivity.getCommand();
-                //variable was used. we can let it pass through
-                emit(variableBindingStart);
-                //register the usage of all the variables that appear in the bound expression
-                registerUsage(variableBindingStart);
-            }
-            //emit all the delayed commands
-            for (Command command : commands) {
-                emit(command);
-            }
-        }
-        if (emitBindingEnd) {
-            emit(variableBindingEnd);
-        }
-    }
-
-    @Override
-    protected VariableActivity assignDefault(Command command) {
-        return null;
-    }
-
-    @Override
-    protected void onCommand(Command command) {
-        registerUsage(command);
-        emit(command);
-    }
-
-    /**
-     * Emit the current command. If the command is delayed by
-     * a variable tracking process, than add it to the top command list
-     * @param command a stream command
-     */
-    private void emit(Command command) {
-        if (storedCommandsStack.isEmpty()) {
-            outputStream.emit(command);
-        } else {
-            List<Command> list = storedCommandsStack.peek();
-            list.add(command);
-        }
-    }
-
-    /**
-     * Extract all the variables in this command and mark them
-     * as used
-     * @param command - a stream command
-     */
-    private void registerUsage(Command command) {
-        List<String> usedVariables = CommandVariableUsage.extractVariables(command);
-        for (String usedVariable : usedVariables) {
-            VariableActivity activity = tracker.get(usedVariable);
-            if (activity != null) {
-                activity.markUsed();
-            }
-        }
-    }
-
-    /**
-     * Track the activity of a variable binding
-     */
-    static class VariableActivity {
-        private boolean used;
-        private VariableBinding.Start command;
-
-        VariableActivity(VariableBinding.Start command) {
-            this.command = command;
-        }
-
-        public void markUsed() {
-            used = true;
-        }
-
-        public boolean isUsed() {
-            return used;
-        }
-
-        public VariableBinding.Start getCommand() {
-            return command;
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/VariableFinder.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/VariableFinder.java
deleted file mode 100644
index 2d669e6..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/VariableFinder.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.optimization;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.util.expression.SideEffectVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-
-/**
- * SideEffectVisitor which extracts all the variables from an expression
- */
-public class VariableFinder extends SideEffectVisitor {
-
-    private final Set<String> variables;
-
-    public VariableFinder(Set<String> variables) {
-        this.variables = variables;
-    }
-
-    private void traverse(ExpressionNode node) {
-        if (node != null) {
-            node.accept(this);
-        }
-    }
-
-    public static Set<String> findVariables(ExpressionNode node) {
-        HashSet<String> result = new HashSet<String>();
-        VariableFinder finder = new VariableFinder(result);
-        finder.traverse(node);
-        return result;
-    }
-
-    @Override
-    public void visit(PropertyAccess propertyAccess) {
-        traverse(propertyAccess.getTarget());
-        traverse(propertyAccess.getProperty());
-    }
-
-    @Override
-    public void visit(Identifier identifier) {
-        variables.add(identifier.getName());
-    }
-
-    @Override
-    public void visit(StringConstant text) {
-    }
-
-    @Override
-    public void visit(BinaryOperation binaryOperation) {
-        traverse(binaryOperation.getLeftOperand());
-        traverse(binaryOperation.getRightOperand());
-    }
-
-    @Override
-    public void visit(BooleanConstant booleanConstant) {
-    }
-
-    @Override
-    public void visit(NumericConstant numericConstant) {
-    }
-
-    @Override
-    public void visit(UnaryOperation unaryOperation) {
-        traverse(unaryOperation.getTarget());
-    }
-
-    @Override
-    public void visit(TernaryOperator ternaryOperator) {
-        traverse(ternaryOperator.getCondition());
-        traverse(ternaryOperator.getThenBranch());
-        traverse(ternaryOperator.getElseBranch());
-    }
-
-    @Override
-    public void visit(RuntimeCall runtimeCall) {
-        for (ExpressionNode node : runtimeCall.getArguments()) {
-            traverse(node);
-        }
-    }
-
-    @Override
-    public void visit(MapLiteral mapLiteral) {
-        for (ExpressionNode value : mapLiteral.getMap().values()) {
-            traverse(value);
-        }
-    }
-
-    @Override
-    public void visit(ArrayLiteral arrayLiteral) {
-        for (ExpressionNode item : arrayLiteral.getItems()) {
-            traverse(item);
-        }
-    }
-
-    @Override
-    public void visit(NullLiteral nullLiteral) {
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ConstantFolding.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ConstantFolding.java
deleted file mode 100644
index 46e0091..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ConstantFolding.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization.reduce;
-
-import java.util.Collection;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.util.stream.EmitterVisitor;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.Streams;
-import org.apache.sling.scripting.sightly.compiler.optimization.StreamTransformer;
-import org.apache.sling.scripting.sightly.compiler.visitor.TrackingVisitor;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.optimization.StreamTransformer;
-import org.apache.sling.scripting.sightly.compiler.util.stream.EmitterVisitor;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.Streams;
-import org.apache.sling.scripting.sightly.compiler.visitor.TrackingVisitor;
-
-/**
- * Optimization which evaluates constant expressions during compilation-time
- */
-public final class ConstantFolding extends TrackingVisitor<EvalResult> implements EmitterVisitor {
-
-    private final Dynamic dynamic;
-    private final PushStream outStream = new PushStream();
-
-    private ConstantFolding(Dynamic dynamic) {
-        this.dynamic = dynamic;
-    }
-
-    public static StreamTransformer transformer(final Dynamic dynamic) {
-        return new StreamTransformer() {
-            @Override
-            public CommandStream transform(CommandStream inStream) {
-                return Streams.map(inStream, new ConstantFolding(dynamic));
-            }
-        };
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        String variable = variableBindingStart.getVariableName();
-        ExpressionNode node = variableBindingStart.getExpression();
-        EvalResult result = ExpressionReducer.reduce(node, tracker, dynamic);
-        result = avoidFoldingDataStructures(result);
-        tracker.pushVariable(variable, result);
-        outStream.emit(new VariableBinding.Start(variable, result.getNode()));
-    }
-
-    private EvalResult avoidFoldingDataStructures(EvalResult evalResult) {
-        //this prevents us from replacing variables that are bound to maps & collections
-        //in expressions since that would mean we rebuild the same constant data structures
-        //each time
-        if (evalResult.isConstant() && isDataStructure(evalResult.getValue())) {
-            return EvalResult.nonConstant(evalResult.getNode());
-        }
-        return evalResult;
-    }
-
-    private boolean isDataStructure(Object obj) {
-        return (obj instanceof Collection) || (obj instanceof Map);
-    }
-
-    @Override
-    protected EvalResult assignDefault(Command command) {
-        return null;
-    }
-
-    @Override
-    protected void onCommand(Command command) {
-        outStream.emit(command);
-    }
-
-    @Override
-    public PushStream getOutputStream() {
-        return outStream;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/EvalResult.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/EvalResult.java
deleted file mode 100644
index 6ef7806..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/EvalResult.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization.reduce;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.CompilerException;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-
-/**
- * Data structure used in expression reducing
- */
-public final class EvalResult {
-    private final ExpressionNode node;
-    private final Object value;
-
-    public static EvalResult constant(Object obj) {
-        return new EvalResult(null, obj);
-    }
-
-    public static EvalResult nonConstant(ExpressionNode node) {
-        return new EvalResult(node, null);
-    }
-
-    private EvalResult(ExpressionNode node, Object value) {
-        this.node = node;
-        this.value = value;
-    }
-
-    public boolean isConstant() {
-        return node == null;
-    }
-
-    public Object getValue() {
-        if (!isConstant()) {
-            throw new CompilerException(new UnsupportedOperationException("Cannot get constant value from non-constant result"));
-        }
-        return value;
-    }
-
-    public ExpressionNode getNode() {
-        return (isConstant()) ? asLiteral(getValue()) : node;
-    }
-
-    private static ExpressionNode asLiteral(Object value) {
-        if (value instanceof Boolean) {
-            return new BooleanConstant((Boolean) value);
-        }
-        if (value instanceof String) {
-            return new StringConstant((String) value);
-        }
-        if (value instanceof Number) {
-            return new NumericConstant((Number) value);
-        }
-        if (value instanceof Map) {
-            //noinspection unchecked
-            return asMapLiteral((Map<String, Object>) value);
-        }
-        if (value instanceof List) {
-            //noinspection unchecked
-            return asArrayLiteral((List<Object>) value);
-        }
-        if (value == null) {
-            return NullLiteral.INSTANCE;
-        }
-        throw new CompilerException(new UnsupportedOperationException("Cannot transform to literal: " + value));
-    }
-
-    private static MapLiteral asMapLiteral(Map<String, Object> map) {
-        HashMap<String, ExpressionNode> literal = new HashMap<String, ExpressionNode>();
-        for (Map.Entry<String, Object> entry : map.entrySet()) {
-            literal.put(entry.getKey(), asLiteral(entry.getValue()));
-        }
-        return new MapLiteral(literal);
-    }
-
-    private static ArrayLiteral asArrayLiteral(List<Object> list) {
-        ArrayList<ExpressionNode> literal = new ArrayList<ExpressionNode>();
-        for (Object obj : list) {
-            literal.add(asLiteral(obj));
-        }
-        return new ArrayLiteral(literal);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ExpressionReducer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ExpressionReducer.java
deleted file mode 100644
index 69f5c92..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/optimization/reduce/ExpressionReducer.java
+++ /dev/null
@@ -1,248 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.optimization.reduce;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.CompilerException;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperator;
-import org.apache.sling.scripting.sightly.compiler.util.VariableTracker;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-
-/**
- * Try to evaluate constant parts in expressions
- */
-public class ExpressionReducer implements NodeVisitor<EvalResult> {
-
-    private final Dynamic dynamic;
-    private final VariableTracker<EvalResult> tracker;
-
-    public static EvalResult reduce(ExpressionNode node, VariableTracker<EvalResult> tracker, Dynamic dynamic) {
-        ExpressionReducer reducer = new ExpressionReducer(dynamic, tracker);
-        return reducer.eval(node);
-    }
-
-    public ExpressionReducer(Dynamic dynamic, VariableTracker<EvalResult> tracker) {
-        this.dynamic = dynamic;
-        this.tracker = tracker;
-    }
-
-    private EvalResult eval(ExpressionNode node) {
-        try {
-            return node.accept(this);
-        } catch (CompilerException e) {
-            throw e;
-        } catch (Exception e) {
-            //evaluating constant expressions may lead to errors (like division by zero)
-            //in this case we leave the node as-is.
-            return EvalResult.nonConstant(node);
-        }
-    }
-
-    @Override
-    public EvalResult evaluate(PropertyAccess propertyAccess) {
-        EvalResult target = eval(propertyAccess.getTarget());
-        EvalResult property = eval(propertyAccess.getProperty());
-        if (!target.isConstant() || !property.isConstant()) {
-            return EvalResult.nonConstant(new PropertyAccess(
-                    target.getNode(),
-                    property.getNode()));
-        }
-
-        return EvalResult.constant(dynamic.resolveProperty(
-                target.getValue(), property.getValue()));
-    }
-
-    @Override
-    public EvalResult evaluate(Identifier identifier) {
-        EvalResult result = tracker.get(identifier.getName());
-        if (result != null && result.isConstant()) {
-            return EvalResult.constant(result.getValue());
-        }
-        return EvalResult.nonConstant(identifier);
-    }
-
-    @Override
-    public EvalResult evaluate(StringConstant text) {
-        return EvalResult.constant(text.getText());
-    }
-
-    @Override
-    public EvalResult evaluate(BinaryOperation binaryOperation) {
-        EvalResult left = eval(binaryOperation.getLeftOperand());
-        EvalResult right = eval(binaryOperation.getRightOperand());
-        if (!(left.isConstant() && right.isConstant())) {
-            return EvalResult.nonConstant(new BinaryOperation(
-                    binaryOperation.getOperator(),
-                    left.getNode(),
-                    right.getNode()));
-        }
-        return EvalResult.constant(evalBinary(
-                binaryOperation.getOperator(), left.getValue(), right.getValue()));
-    }
-
-    @Override
-    public EvalResult evaluate(BooleanConstant booleanConstant) {
-        return EvalResult.constant(booleanConstant.getValue());
-    }
-
-    @Override
-    public EvalResult evaluate(NumericConstant numericConstant) {
-        return EvalResult.constant(numericConstant.getValue());
-    }
-
-    @Override
-    public EvalResult evaluate(UnaryOperation unaryOperation) {
-        EvalResult target = eval(unaryOperation.getTarget());
-        if (!target.isConstant()) {
-            return EvalResult.nonConstant(new UnaryOperation(
-                    unaryOperation.getOperator(), target.getNode()));
-        }
-        return EvalResult.constant(evalUnary(unaryOperation.getOperator(), target.getValue()));
-    }
-
-    @Override
-    public EvalResult evaluate(TernaryOperator ternaryOperator) {
-        EvalResult condition = eval(ternaryOperator.getCondition());
-        if (!condition.isConstant()) {
-            return EvalResult.nonConstant(new TernaryOperator(
-                    condition.getNode(),
-                    ternaryOperator.getThenBranch(),
-                    ternaryOperator.getElseBranch()));
-        }
-        return (dynamic.coerceToBoolean(condition.getValue()))
-                ? eval(ternaryOperator.getThenBranch())
-                : eval(ternaryOperator.getElseBranch());
-    }
-
-    @Override
-    public EvalResult evaluate(RuntimeCall runtimeCall) {
-        List<ExpressionNode> nodes = new ArrayList<ExpressionNode>();
-        for (ExpressionNode node : runtimeCall.getArguments()) {
-            EvalResult result = eval(node);
-            nodes.add(result.getNode());
-        }
-        return EvalResult.nonConstant(new RuntimeCall(runtimeCall.getFunctionName(), nodes));
-    }
-
-    @Override
-    public EvalResult evaluate(MapLiteral mapLiteral) {
-        HashMap<String, EvalResult> results = new HashMap<String, EvalResult>();
-        boolean isConstant = true;
-        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
-            EvalResult result = eval(entry.getValue());
-            results.put(entry.getKey(), result);
-            isConstant = isConstant && result.isConstant();
-        }
-        if (isConstant) {
-            HashMap<String, Object> map = new HashMap<String, Object>();
-            for (Map.Entry<String, EvalResult> entry : results.entrySet()) {
-                map.put(entry.getKey(), entry.getValue().getValue());
-            }
-            return EvalResult.constant(map);
-        } else {
-            HashMap<String, ExpressionNode> literal = new HashMap<String, ExpressionNode>();
-            for (Map.Entry<String, EvalResult> entry : results.entrySet()) {
-                literal.put(entry.getKey(), entry.getValue().getNode());
-            }
-            return EvalResult.nonConstant(new MapLiteral(literal));
-        }
-    }
-
-    @Override
-    public EvalResult evaluate(ArrayLiteral arrayLiteral) {
-        ArrayList<EvalResult> results = new ArrayList<EvalResult>();
-        boolean isConstant = true;
-        for (ExpressionNode node : arrayLiteral.getItems()) {
-            EvalResult result = eval(node);
-            results.add(result);
-            isConstant = isConstant && result.isConstant();
-        }
-        if (isConstant) {
-            ArrayList<Object> list = new ArrayList<Object>();
-            for (EvalResult result : results) {
-                list.add(result.getValue());
-            }
-            return EvalResult.constant(list);
-        } else {
-            ArrayList<ExpressionNode> literal = new ArrayList<ExpressionNode>();
-            for (EvalResult result : results) {
-                literal.add(result.getNode());
-            }
-            return EvalResult.nonConstant(new ArrayLiteral(literal));
-        }
-    }
-
-    @Override
-    public EvalResult evaluate(NullLiteral nullLiteral) {
-        return EvalResult.constant(null);
-    }
-
-    private Object evalBinary(BinaryOperator operator, Object left, Object right) {
-        switch (operator) {
-            case AND: return dynamic.and(left, right);
-            case OR: return dynamic.or(left, right);
-            case CONCATENATE: return dynamic.concatenate(left, right);
-            case LT: return dynamic.lt(left, right);
-            case LEQ: return dynamic.leq(left, right);
-            case GT: return dynamic.gt(left, right);
-            case GEQ: return dynamic.geq(left, right);
-            case EQ: return dynamic.eq(left, right);
-            case NEQ: return dynamic.neq(left, right);
-            case STRICT_EQ: return dynamic.strictEq(left, right);
-            case STRICT_NEQ: return dynamic.strictNeq(left, right);
-            case ADD: return dynamic.add(left, right);
-            case SUB: return dynamic.sub(left, right);
-            case MUL: return dynamic.mult(left, right);
-            case I_DIV: return dynamic.iDiv(left, right);
-            case REM: return dynamic.rem(left, right);
-            case DIV: return dynamic.div(left, right);
-        }
-        throw new CompilerException(new UnsupportedOperationException("Cannot reduce operator " + operator));
-    }
-
-    private Object evalUnary(UnaryOperator operator, Object operand) {
-        switch (operator) {
-            case IS_WHITESPACE: return dynamic.isWhiteSpace(operand);
-            case LENGTH: return dynamic.length(operand);
-            case NOT: return dynamic.not(operand);
-        }
-        throw new CompilerException(new UnsupportedOperationException("Cannot reduce unary operator " + operator));
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowCheckBackend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowCheckBackend.java
deleted file mode 100644
index a76240e..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowCheckBackend.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.util;
-
-import java.util.Set;
-
-import org.apache.sling.scripting.sightly.compiler.CompilerBackend;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.util.stream.VisitorHandler;
-
-/**
- * Wrapping backend that checks for global bindings shadowing
- */
-public class GlobalShadowCheckBackend implements CompilerBackend {
-
-    private final CompilerBackend baseBackend;
-    private final Set<String> globals;
-
-    public GlobalShadowCheckBackend(CompilerBackend baseBackend, Set<String> globals) {
-        this.baseBackend = baseBackend;
-        this.globals = globals;
-    }
-
-    @Override
-    public void handle(CommandStream stream) {
-        stream.addHandler(new VisitorHandler(new GlobalShadowChecker(globals)));
-        baseBackend.handle(stream);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowChecker.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowChecker.java
deleted file mode 100644
index a7576cb..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/GlobalShadowChecker.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.util;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-
-/**
- * Checks whether variable declarations shadow global bindings
- */
-public class GlobalShadowChecker implements CommandVisitor {
-
-    private static final Logger log = LoggerFactory.getLogger(GlobalShadowChecker.class);
-    private final Map<String, String> globals;
-
-    public GlobalShadowChecker(Set<String> globals) {
-        this.globals = new HashMap<String, String>();
-        for (String global : globals) {
-            this.globals.put(global.toLowerCase(), global);
-        }
-    }
-
-    @Override
-    public void visit(Conditional.Start conditionalStart) {
-    }
-
-    @Override
-    public void visit(Conditional.End conditionalEnd) {
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        checkVariable(variableBindingStart.getVariableName());
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-
-    }
-
-    @Override
-    public void visit(VariableBinding.Global globalAssignment) {
-        checkVariable(globalAssignment.getVariableName());
-    }
-
-    @Override
-    public void visit(OutVariable outVariable) {
-
-    }
-
-    @Override
-    public void visit(OutText outText) {
-
-    }
-
-    @Override
-    public void visit(Loop.Start loopStart) {
-        checkVariable(loopStart.getItemVariable());
-        checkVariable(loopStart.getIndexVariable());
-    }
-
-    @Override
-    public void visit(Loop.End loopEnd) {
-    }
-
-    @Override
-    public void visit(BufferControl.Push bufferPush) {
-    }
-
-    @Override
-    public void visit(BufferControl.Pop bufferPop) {
-    }
-
-    @Override
-    public void visit(Procedure.Start startProcedure) {
-        checkVariable(startProcedure.getName());
-    }
-
-    @Override
-    public void visit(Procedure.End endProcedure) {
-    }
-
-    @Override
-    public void visit(Procedure.Call procedureCall) {
-    }
-
-    private void checkVariable(String variableName) {
-        variableName = variableName.toLowerCase();
-        if (globals.containsKey(variableName)) {
-            String originalName = globals.get(variableName);
-            log.warn("Global variable '{}' is being overridden in template", originalName);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/SymbolGenerator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/SymbolGenerator.java
deleted file mode 100644
index 4bcf741..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/SymbolGenerator.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.util;
-
-/**
- * Created by mdanila on 12/4/13.
- */
-public class SymbolGenerator {
-
-    public static final String DEFAULT_VAR_PREFIX = "var_";
-
-    private int counter = 0;
-    private final String prefix;
-
-    public SymbolGenerator() {
-        this(DEFAULT_VAR_PREFIX);
-    }
-
-    public SymbolGenerator(String prefix) {
-        this.prefix = prefix;
-    }
-
-    public String next(String hint) {
-        String middle = (hint != null) ? hint.replaceAll("\\-", "_") : "";
-        return prefix + middle + counter++;
-    }
-
-    public String next() {
-        return next(null);
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/VariableTracker.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/VariableTracker.java
deleted file mode 100644
index 99bee0b..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/VariableTracker.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.util;
-
-import java.util.AbstractMap;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Stack;
-
-/**
- * Track information related to Sightly variables
- */
-public class VariableTracker<T> {
-
-    private final Map<String, Stack<T>> variableData = new HashMap<String, Stack<T>>();
-    private final Stack<String> declarationStack = new Stack<String>();
-
-    public boolean isDeclared(String name) {
-        name = name.toLowerCase();
-        Stack<T> dataStack = variableData.get(name);
-        return dataStack != null;
-    }
-
-    /**
-     * Push a variable. Use this at a variable declaration
-     * @param name - the name of the variable
-     * @param data - data associated with the variable
-     */
-    public void pushVariable(String name, T data) {
-        name = name.toLowerCase();
-        Stack<T> dataStack = variableData.get(name);
-        if (dataStack == null) {
-            dataStack = new Stack<T>();
-            variableData.put(name, dataStack);
-        }
-        dataStack.push(data);
-        declarationStack.push(name);
-    }
-
-    /**
-     * Pop a variable. Use this when a variable goes out of scope
-     * @return - the name of the popped variable
-     * @throws java.util.NoSuchElementException - if there are no declared variables in the scope
-     */
-    public String popVariable() {
-        String variable = declarationStack.pop();
-        Stack<T> dataStack = variableData.get(variable);
-        assert dataStack != null;
-        dataStack.pop();
-        if (dataStack.isEmpty()) {
-            variableData.remove(variable);
-        }
-        return variable;
-    }
-
-    /**
-     * Peek at the top of the declaration stack
-     * @return - the most recently declared variable and it's associated data
-     * @throws java.util.NoSuchElementException - if there are no variables in scope
-     */
-    public Map.Entry<String, T> peek() {
-        String variable = declarationStack.peek();
-        Stack<T> dataStack = variableData.get(variable);
-        assert dataStack != null;
-        T data = dataStack.peek();
-        return new AbstractMap.SimpleImmutableEntry<String, T>(variable, data);
-    }
-
-    public boolean isEmpty() {
-        return declarationStack.isEmpty();
-    }
-
-    /**
-     * Get the data associated with the given variable
-     * @param name - the name of the variable
-     * @return the associated data or null if that variable is not in scope
-     */
-    public T get(String name) {
-        name = name.toLowerCase();
-        Stack<T> dataStack = variableData.get(name);
-        if (dataStack == null) {
-            return null;
-        }
-        assert !dataStack.isEmpty();
-        return dataStack.peek();
-    }
-
-    /**
-     * Check whether a variable was declared and is visible in the current scope
-     * @param name - the name of the variable
-     * @return - the visibility of the variable in the current scope
-     */
-    public boolean isInScope(String name) {
-        name = name.toLowerCase();
-        return variableData.get(name) != null;
-    }
-
-    /**
-     * Get an immutable view of all the data items associated with the specified
-     * variable.
-     * @param name - the name of the variable
-     * @return - a list of all the data associated with this variable name. If the
-     * variable is not declared in the current scope then that list will be empty. Otherwise
-     * it will contain all the data associated for the current scope starting with the data
-     * associated at the topmost scope and ending with the most recently associated data
-     */
-    public List<T> getAll(String name) {
-        name = name.toLowerCase();
-        Stack<T> dataStack = variableData.get(name);
-        if (dataStack == null) {
-            return Collections.emptyList();
-        }
-        return Collections.unmodifiableList(dataStack);
-    }
-
-    /**
-     * Get how many times a variable was declared in the current scope
-     * @param name - the name of the variable
-     * @return - the number of declarations for a variable in the current scope
-     */
-    public int getOccurrenceCount(String name) {
-        name = name.toLowerCase();
-        Stack<T> dataStack = variableData.get(name);
-        if (dataStack == null) {
-            return 0;
-        }
-        return dataStack.size();
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/HomogenousNodeVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/HomogenousNodeVisitor.java
deleted file mode 100644
index d1be592..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/HomogenousNodeVisitor.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.util.expression;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-
-/**
- * Apply the same evaluation for all expression nodes
- */
-public abstract class HomogenousNodeVisitor<T> implements NodeVisitor<T> {
-
-    protected abstract T evaluateDefault(ExpressionNode node);
-
-    @Override
-    public T evaluate(PropertyAccess propertyAccess) {
-        return evaluateDefault(propertyAccess);
-    }
-
-    @Override
-    public T evaluate(Identifier identifier) {
-        return evaluateDefault(identifier);
-    }
-
-    @Override
-    public T evaluate(StringConstant text) {
-        return evaluateDefault(text);
-    }
-
-    @Override
-    public T evaluate(BinaryOperation binaryOperation) {
-        return evaluateDefault(binaryOperation);
-    }
-
-    @Override
-    public T evaluate(BooleanConstant booleanConstant) {
-        return evaluateDefault(booleanConstant);
-    }
-
-    @Override
-    public T evaluate(NumericConstant numericConstant) {
-        return evaluateDefault(numericConstant);
-    }
-
-    @Override
-    public T evaluate(UnaryOperation unaryOperation) {
-        return evaluateDefault(unaryOperation);
-    }
-
-    @Override
-    public T evaluate(TernaryOperator ternaryOperator) {
-        return evaluateDefault(ternaryOperator);
-    }
-
-    @Override
-    public T evaluate(RuntimeCall runtimeCall) {
-        return evaluateDefault(runtimeCall);
-    }
-
-    @Override
-    public T evaluate(MapLiteral mapLiteral) {
-        return evaluateDefault(mapLiteral);
-    }
-
-    @Override
-    public T evaluate(ArrayLiteral arrayLiteral) {
-        return evaluateDefault(arrayLiteral);
-    }
-
-    @Override
-    public T evaluate(NullLiteral nullLiteral) {
-        return evaluateDefault(nullLiteral);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/NodeTransformer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/NodeTransformer.java
deleted file mode 100644
index 4762013..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/NodeTransformer.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.util.expression;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-
-/**
- * Created by mdanila on 2/2/14.
- */
-public class NodeTransformer implements NodeVisitor<ExpressionNode> {
-
-    public final ExpressionNode transform(ExpressionNode node) {
-        return node.accept(this);
-    }
-
-    @Override
-    public ExpressionNode evaluate(PropertyAccess propertyAccess) {
-        return new PropertyAccess(transform(propertyAccess.getTarget()), transform(propertyAccess.getProperty()));
-    }
-
-    @Override
-    public ExpressionNode evaluate(Identifier identifier) {
-        return identifier;
-    }
-
-    @Override
-    public ExpressionNode evaluate(StringConstant text) {
-        return text;
-    }
-
-    @Override
-    public ExpressionNode evaluate(BinaryOperation binaryOperation) {
-        return new BinaryOperation(binaryOperation.getOperator(),
-                transform(binaryOperation.getLeftOperand()),
-                transform(binaryOperation.getRightOperand()));
-    }
-
-    @Override
-    public ExpressionNode evaluate(BooleanConstant booleanConstant) {
-        return booleanConstant;
-    }
-
-    @Override
-    public ExpressionNode evaluate(NumericConstant numericConstant) {
-        return numericConstant;
-    }
-
-    @Override
-    public ExpressionNode evaluate(UnaryOperation unaryOperation) {
-        return new UnaryOperation(unaryOperation.getOperator(), transform(unaryOperation.getTarget()));
-    }
-
-    @Override
-    public ExpressionNode evaluate(TernaryOperator ternaryOperator) {
-        return new TernaryOperator(
-                transform(ternaryOperator.getCondition()),
-                transform(ternaryOperator.getThenBranch()),
-                transform(ternaryOperator.getElseBranch()));
-    }
-
-    @Override
-    public ExpressionNode evaluate(RuntimeCall runtimeCall) {
-        List<ExpressionNode> children = transformList(runtimeCall.getArguments());
-        return new RuntimeCall(runtimeCall.getFunctionName(), children);
-    }
-
-    @Override
-    public ExpressionNode evaluate(MapLiteral mapLiteral) {
-        HashMap<String, ExpressionNode> map = new HashMap<String, ExpressionNode>();
-        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
-            map.put(entry.getKey(), transform(entry.getValue()));
-        }
-        return new MapLiteral(map);
-    }
-
-    @Override
-    public ExpressionNode evaluate(ArrayLiteral arrayLiteral) {
-        return new ArrayLiteral(transformList(arrayLiteral.getItems()));
-    }
-
-    @Override
-    public ExpressionNode evaluate(NullLiteral nullLiteral) {
-        return nullLiteral;
-    }
-
-    private List<ExpressionNode> transformList(List<ExpressionNode> nodes) {
-        ArrayList<ExpressionNode> result = new ArrayList<ExpressionNode>();
-        for (ExpressionNode node : nodes) {
-            result.add(transform(node));
-        }
-        return result;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/SideEffectVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/SideEffectVisitor.java
deleted file mode 100644
index 3c732f2..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/expression/SideEffectVisitor.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.util.expression;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.NodeVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.ArrayLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.TernaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.*;
-
-/**
- * Expression visitor which does not return anything for a node. Instead
- * it performs specific side-effects depending on the expression node type.
- */
-public abstract class SideEffectVisitor implements NodeVisitor<Object> {
-
-    public abstract void visit(PropertyAccess propertyAccess);
-
-    public abstract void visit(Identifier identifier);
-
-    public abstract void visit(StringConstant text);
-
-    public abstract void visit(BinaryOperation binaryOperation);
-
-    public abstract void visit(BooleanConstant booleanConstant);
-
-    public abstract void visit(NumericConstant numericConstant);
-
-    public abstract void visit(UnaryOperation unaryOperation);
-
-    public abstract void visit(TernaryOperator ternaryOperator);
-
-    public abstract void visit(RuntimeCall runtimeCall);
-
-    public abstract void visit(MapLiteral mapLiteral);
-
-    public abstract void visit(ArrayLiteral arrayLiteral);
-
-    public abstract void visit(NullLiteral nullLiteral);
-
-    @Override
-    public Object evaluate(PropertyAccess propertyAccess) {
-        visit(propertyAccess);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(Identifier identifier) {
-        visit(identifier);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(StringConstant text) {
-        visit(text);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(BinaryOperation binaryOperation) {
-        visit(binaryOperation);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(BooleanConstant booleanConstant) {
-        visit(booleanConstant);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(NumericConstant numericConstant) {
-        visit(numericConstant);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(UnaryOperation unaryOperation) {
-        visit(unaryOperation);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(TernaryOperator ternaryOperator) {
-        visit(ternaryOperator);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(RuntimeCall runtimeCall) {
-        visit(runtimeCall);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(MapLiteral mapLiteral) {
-        visit(mapLiteral);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(ArrayLiteral arrayLiteral) {
-        visit(arrayLiteral);
-        return null;
-    }
-
-    @Override
-    public Object evaluate(NullLiteral nullLiteral) {
-        visit(nullLiteral);
-        return null;
-    }
-}
-
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/BroadcastHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/BroadcastHandler.java
deleted file mode 100644
index ad20465..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/BroadcastHandler.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.util.stream;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-
-import java.util.ArrayList;
-
-/**
- * Broadcasts commands to other handlers
- */
-public class BroadcastHandler implements CommandHandler {
-
-    private ArrayList<CommandHandler> handlers = new ArrayList<CommandHandler>();
-
-    /**
-     * Add a new child handler
-     * @param handler - the listening handler
-     */
-    public void addHandler(CommandHandler handler) {
-        handlers.add(handler);
-    }
-
-
-    @Override
-    public void onEmit(Command command) {
-        for (CommandHandler handler : handlers) {
-            handler.onEmit(command);
-        }
-    }
-
-    @Override
-    public void onError(String errorMessage) {
-        for (CommandHandler handler : handlers) {
-            handler.onError(errorMessage);
-        }
-    }
-
-    @Override
-    public void onDone() {
-        for (CommandHandler handler : handlers) {
-            handler.onDone();
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/EmitterVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/EmitterVisitor.java
deleted file mode 100644
index e253d09..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/EmitterVisitor.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.util.stream;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Command visitor which writes to an output stream
- */
-public interface EmitterVisitor extends CommandVisitor {
-
-    /**
-     * Get the output stream
-     * @return - the output stream of this visitor
-     */
-    PushStream getOutputStream();
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/PushStream.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/PushStream.java
deleted file mode 100644
index 69f1e16..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/PushStream.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.util.stream;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-
-/**
- * A stream that can be written into
- */
-public class PushStream implements CommandStream {
-
-    private BroadcastHandler handler = new BroadcastHandler();
-    private boolean closed;
-
-    /**
-     * Add a command handler
-     * @param handler - a command handler
-     */
-    @Override
-    public void addHandler(CommandHandler handler) {
-        this.handler.addHandler(handler);
-    }
-
-    /**
-     * Emit the specified command
-     * @param command - the emitted command
-     * @throws UnsupportedOperationException - if the stream is closed
-     */
-    public void emit(Command command) {
-        if (closed) {
-            throw new UnsupportedOperationException("Stream is closed");
-        }
-        this.handler.onEmit(command);
-    }
-
-    /**
-     * Signal an error
-     * @param message - the error message
-     * @throws UnsupportedOperationException - if the stream is already closed
-     */
-    public void signalError(String message) {
-        if (closed) {
-            throw new UnsupportedOperationException("Stream is closed");
-        }
-        closed = true;
-        this.handler.onError(message);
-    }
-
-    /**
-     * Close the stream
-     * @throws UnsupportedOperationException - if the stream is already closed
-     */
-    public void signalDone() {
-        if (closed) {
-            throw new UnsupportedOperationException("Stream is already closed");
-        }
-        closed = true;
-        this.handler.onDone();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/ReplayStream.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/ReplayStream.java
deleted file mode 100644
index b2ad5ad..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/ReplayStream.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.util.stream;
-
-import java.util.List;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-
-/**
- * A stream which replays the same commands for all handlers
- */
-public class ReplayStream implements CommandStream {
-
-    private final List<Command> commands;
-
-    public ReplayStream(List<Command> commands) {
-        this.commands = commands;
-    }
-
-    @Override
-    public void addHandler(CommandHandler handler) {
-        for (Command command : commands) {
-            handler.onEmit(command);
-        }
-        handler.onDone();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/Streams.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/Streams.java
deleted file mode 100644
index 3651fc8..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/Streams.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.util.stream;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandStream;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Utility functions for streams
- */
-public class Streams {
-
-    /**
-     * Attach the visitor as a handle to the inStream and propagate
-     * the done signal from the inStream to the outStream
-     * @param inStream - the input stream
-     * @param outStream - the output stream
-     * @param visitor - a command visitor
-     */
-    public static void connect(CommandStream inStream, final PushStream outStream, CommandVisitor visitor) {
-        inStream.addHandler(new VisitorHandler(visitor) {
-            @Override
-            public void onDone() {
-                outStream.signalDone();
-            }
-        });
-    }
-
-    /**
-     * Attach the emitting visitor to the inStream.
-     * @param inStream - the input stream
-     * @param emitterVisitor - the emitter visitor
-     * @return - the output stream of the emitter
-     */
-    public static CommandStream map(CommandStream inStream, EmitterVisitor emitterVisitor) {
-        PushStream outStream = emitterVisitor.getOutputStream();
-        connect(inStream, outStream, emitterVisitor);
-        return outStream;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/VisitorHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/VisitorHandler.java
deleted file mode 100644
index 31295b0..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/util/stream/VisitorHandler.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.util.stream;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandHandler;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Delegates commands to a visitor
- */
-public class VisitorHandler implements CommandHandler {
-
-    private CommandVisitor visitor;
-
-    public VisitorHandler(CommandVisitor visitor) {
-        this.visitor = visitor;
-    }
-
-    @Override
-    public void onEmit(Command command) {
-        command.accept(visitor);
-    }
-
-    @Override
-    public void onError(String errorMessage) {
-        throw new RuntimeException(errorMessage);
-    }
-
-    @Override
-    public void onDone() {
-
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/IgnoreRange.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/IgnoreRange.java
deleted file mode 100644
index e070b52..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/IgnoreRange.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.visitor;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-
-/**
- * Ignore a nested range of commands
- */
-public abstract class IgnoreRange extends UniformVisitor {
-
-    private final Class<? extends Command> rangeStart;
-    private final Class<? extends Command> rangeEnd;
-
-    private int skipCount = 1;
-
-    public IgnoreRange(Class<? extends Command> rangeStart, Class<? extends Command> rangeEnd) {
-        this.rangeStart = rangeStart;
-        this.rangeEnd = rangeEnd;
-    }
-
-    @Override
-    public void onCommand(Command command) {
-        Class<? extends Command> commandClass = command.getClass();
-        if (commandClass.equals(rangeStart)) {
-            skipCount++;
-        } else if (commandClass.equals(rangeEnd)) {
-            skipCount--;
-        }
-        if (skipCount == 0) {
-            onCompleted();
-        }
-    }
-
-    protected abstract void onCompleted();
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StateControl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StateControl.java
deleted file mode 100644
index 6cec13a..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StateControl.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.visitor;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Interface to control stateful visitors
- */
-public interface StateControl {
-
-    /**
-     * Push a new visitor as the current state
-     * @param visitor - the new active visitor
-     */
-    void push(CommandVisitor visitor);
-
-    /**
-     * Pop the current visitor and set the previous visitor active
-     * @return - the previously active visitor
-     */
-    CommandVisitor pop();
-
-    /**
-     * Replace the current active visitor with another
-     * @param visitor the new active visitor
-     * @return the previously active visitor
-     */
-    CommandVisitor replace(CommandVisitor visitor);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulRangeIgnore.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulRangeIgnore.java
deleted file mode 100644
index daf3900..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulRangeIgnore.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.visitor;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-
-/**
- * Variant of {@link IgnoreRange} to be used
- * in stateful visitors.
- */
-public class StatefulRangeIgnore extends IgnoreRange {
-
-    private final StateControl stateControl;
-
-    public StatefulRangeIgnore(StateControl stateControl, Class<? extends Command> rangeStart, Class<? extends Command> rangeEnd) {
-        super(rangeStart, rangeEnd);
-        this.stateControl = stateControl;
-    }
-
-    @Override
-    protected void onCompleted() {
-        stateControl.pop();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulVisitor.java
deleted file mode 100644
index 092ddd2..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/StatefulVisitor.java
+++ /dev/null
@@ -1,173 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.visitor;
-
-import java.util.Stack;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-
-/**
- * Implements the state pattern for command visitors
- */
-public class StatefulVisitor implements CommandVisitor {
-
-    private final Stack<CommandVisitor> stack = new Stack<CommandVisitor>();
-    private CommandVisitor visitor;
-    private Control control = new Control();
-
-    public StatefulVisitor() {
-        this.visitor = InvalidState.INSTANCE;
-    }
-
-    public StateControl getControl() {
-        return control;
-    }
-
-    public void initializeWith(CommandVisitor initialState) {
-        if (this.visitor != InvalidState.INSTANCE) {
-            throw new IllegalStateException("Initial state is already set");
-        }
-        this.visitor = initialState;
-    }
-
-    @Override
-    public void visit(Conditional.Start conditionalStart) {
-        visitor.visit(conditionalStart);
-    }
-
-    @Override
-    public void visit(Conditional.End conditionalEnd) {
-        visitor.visit(conditionalEnd);
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        visitor.visit(variableBindingStart);
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-        visitor.visit(variableBindingEnd);
-    }
-
-    @Override
-    public void visit(VariableBinding.Global globalAssignment) {
-        visitor.visit(globalAssignment);
-    }
-
-    @Override
-    public void visit(OutVariable outVariable) {
-        visitor.visit(outVariable);
-    }
-
-    @Override
-    public void visit(OutText outText) {
-        visitor.visit(outText);
-    }
-
-    @Override
-    public void visit(Loop.Start loopStart) {
-        visitor.visit(loopStart);
-    }
-
-    @Override
-    public void visit(Loop.End loopEnd) {
-        visitor.visit(loopEnd);
-    }
-
-    @Override
-    public void visit(BufferControl.Push bufferPush) {
-        visitor.visit(bufferPush);
-    }
-
-    @Override
-    public void visit(BufferControl.Pop bufferPop) {
-        visitor.visit(bufferPop);
-    }
-
-    @Override
-    public void visit(Procedure.Start startProcedure) {
-        visitor.visit(startProcedure);
-    }
-
-    @Override
-    public void visit(Procedure.End endProcedure) {
-        visitor.visit(endProcedure);
-    }
-
-    @Override
-    public void visit(Procedure.Call procedureCall) {
-        visitor.visit(procedureCall);
-    }
-
-    private void pushVisitor(CommandVisitor visitor) {
-        stack.push(this.visitor);
-        this.visitor = visitor;
-    }
-
-    private CommandVisitor popVisitor() {
-        CommandVisitor top = this.visitor;
-        this.visitor = this.stack.pop();
-        return top;
-    }
-
-    private final class Control implements StateControl {
-
-        @Override
-        public void push(CommandVisitor visitor) {
-            pushVisitor(visitor);
-        }
-
-        @Override
-        public CommandVisitor pop() {
-            return popVisitor();
-        }
-
-        @Override
-        public CommandVisitor replace(CommandVisitor visitor) {
-            CommandVisitor current = pop();
-            push(visitor);
-            return current;
-        }
-    }
-
-    private static final class InvalidState extends UniformVisitor {
-
-        public static final InvalidState INSTANCE = new InvalidState();
-
-        private InvalidState() {
-        }
-
-        @Override
-        public void onCommand(Command command) {
-            throw new IllegalStateException("StatefulVisitor has not been initialized");
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/TrackingVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/TrackingVisitor.java
deleted file mode 100644
index f9799ea..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/TrackingVisitor.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.compiler.visitor;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.util.VariableTracker;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.util.VariableTracker;
-
-/**
- * Command visitor which tracks variables in commands
- */
-public abstract class TrackingVisitor<T> extends UniformVisitor {
-
-    protected final VariableTracker<T> tracker = new VariableTracker<T>();
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        super.visit(variableBindingStart);
-        tracker.pushVariable(variableBindingStart.getVariableName(), assignDefault(variableBindingStart));
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-        super.visit(variableBindingEnd);
-        tracker.popVariable();
-    }
-
-    @Override
-    public void visit(Loop.Start loopStart) {
-        super.visit(loopStart);
-        tracker.pushVariable(loopStart.getIndexVariable(), assignDefault(loopStart));
-        tracker.pushVariable(loopStart.getItemVariable(), assignDefault(loopStart));
-    }
-
-    @Override
-    public void visit(Loop.End loopEnd) {
-        super.visit(loopEnd);
-        tracker.popVariable();
-        tracker.popVariable();
-    }
-
-    @Override
-    public void visit(BufferControl.Pop bufferPop) {
-        super.visit(bufferPop);
-        tracker.pushVariable(bufferPop.getVariableName(), assignDefault(bufferPop));
-    }
-
-    protected abstract T assignDefault(Command command);
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/UniformVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/UniformVisitor.java
deleted file mode 100644
index 8be5b81..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/compiler/visitor/UniformVisitor.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.compiler.visitor;
-
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.BufferControl;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.CommandVisitor;
-
-/**
- * Do not dispatch for different command types
- */
-public abstract class UniformVisitor implements CommandVisitor {
-
-    protected abstract void onCommand(Command command);
-
-    @Override
-    public void visit(Conditional.Start conditionalStart) {
-        onCommand(conditionalStart);
-    }
-
-    @Override
-    public void visit(Conditional.End conditionalEnd) {
-        onCommand(conditionalEnd);
-    }
-
-    @Override
-    public void visit(VariableBinding.Start variableBindingStart) {
-        onCommand(variableBindingStart);
-    }
-
-    @Override
-    public void visit(VariableBinding.End variableBindingEnd) {
-        onCommand(variableBindingEnd);
-    }
-
-    @Override
-    public void visit(VariableBinding.Global globalAssignment) {
-        onCommand(globalAssignment);
-    }
-
-    @Override
-    public void visit(OutVariable outVariable) {
-        onCommand(outVariable);
-    }
-
-    @Override
-    public void visit(OutText outText) {
-        onCommand(outText);
-    }
-
-    @Override
-    public void visit(Loop.Start loopStart) {
-        onCommand(loopStart);
-    }
-
-    @Override
-    public void visit(Loop.End loopEnd) {
-        onCommand(loopEnd);
-    }
-
-    @Override
-    public void visit(BufferControl.Push bufferPush) {
-        onCommand(bufferPush);
-    }
-
-    @Override
-    public void visit(BufferControl.Pop bufferPop) {
-        onCommand(bufferPop);
-    }
-
-    @Override
-    public void visit(Procedure.Start startProcedure) {
-        onCommand(startProcedure);
-    }
-
-    @Override
-    public void visit(Procedure.End endProcedure) {
-        onCommand(endProcedure);
-    }
-
-    @Override
-    public void visit(Procedure.Call procedureCall) {
-        onCommand(procedureCall);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryService.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryService.java
deleted file mode 100644
index 3918dc3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryService.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine;
-
-import java.util.Map;
-
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-
-/**
- * Aggregator for all runtime extensions.
- */
-public interface ExtensionRegistryService {
-
-    /**
-     * A map from extension names to extensions
-     * @return a name-extension map
-     */
-    Map<String, RuntimeExtension> extensions();
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryServiceImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryServiceImpl.java
deleted file mode 100644
index bf133bb..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/ExtensionRegistryServiceImpl.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.ReferenceCardinality;
-import org.apache.felix.scr.annotations.ReferencePolicy;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.commons.osgi.PropertiesUtil;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.osgi.framework.Constants;
-
-/**
- * Implementation for {@link ExtensionRegistryService}.
- */
-@Component
-@Service(ExtensionRegistryService.class)
-@Reference(
-        policy = ReferencePolicy.DYNAMIC,
-        referenceInterface = RuntimeExtension.class,
-        name = "extensionService",
-        cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
-)
-@SuppressWarnings("unused")
-public class ExtensionRegistryServiceImpl implements ExtensionRegistryService {
-
-    private volatile Map<String, RuntimeExtension> mapping = new HashMap<String, RuntimeExtension>();
-    private Map<String, Integer> mappingPriorities = new HashMap<String, Integer>(10, 0.9f);
-
-    @Override
-    public Map<String, RuntimeExtension> extensions() {
-        return mapping;
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected synchronized void bindExtensionService(RuntimeExtension extension, Map<String, Object> properties) {
-        Integer newPriority = PropertiesUtil.toInteger(properties.get(Constants.SERVICE_RANKING), 0);
-        Integer priority = PropertiesUtil.toInteger(mappingPriorities.get(extension.name()), 0);
-        if (newPriority > priority) {
-                mapping = Collections.unmodifiableMap(add(mapping, extension));
-                mappingPriorities.put(extension.name(), newPriority);
-        } else {
-            if (!mapping.containsKey(extension.name())) {
-                mapping = Collections.unmodifiableMap(add(mapping, extension));
-                mappingPriorities.put(extension.name(), newPriority);
-            }
-        }
-
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected synchronized void unbindExtensionService(RuntimeExtension extension, Map<String, Object> properties) {
-        mappingPriorities.remove(extension.name());
-        mapping = Collections.unmodifiableMap(remove(mapping, extension));
-    }
-
-    private Map<String, RuntimeExtension> add(Map<String, RuntimeExtension> oldMap, RuntimeExtension extension) {
-        HashMap<String, RuntimeExtension> newMap = new HashMap<String, RuntimeExtension>(oldMap);
-        newMap.put(extension.name(), extension);
-        return newMap;
-    }
-
-    private Map<String, RuntimeExtension> remove(Map<String, RuntimeExtension> oldMap, RuntimeExtension extension) {
-        HashMap<String, RuntimeExtension> newMap = new HashMap<String, RuntimeExtension>(oldMap);
-        newMap.remove(extension.name());
-        return newMap;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyBindingsValuesProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyBindingsValuesProvider.java
deleted file mode 100644
index 7ea45f7..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyBindingsValuesProvider.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine;
-
-import javax.script.Bindings;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ValueMap;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.scripting.api.BindingsValuesProvider;
-
-/**
- * Sightly specific {@code BindingsValuesProvider}.
- */
-@Component()
-@Service(BindingsValuesProvider.class)
-@Properties({
-        @Property(name = "javax.script.name", value = "sightly", propertyPrivate = true)
-})
-public class SightlyBindingsValuesProvider implements BindingsValuesProvider {
-
-    public static final String PROPERTIES = "properties";
-
-    @Override
-    public void addBindings(Bindings bindings) {
-        if (!bindings.containsKey(PROPERTIES)) {
-            Resource currentResource = (Resource) bindings.get(SlingBindings.RESOURCE);
-            if (currentResource != null) {
-                bindings.put(PROPERTIES, currentResource.adaptTo(ValueMap.class));
-            }
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyEngineConfiguration.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyEngineConfiguration.java
deleted file mode 100644
index d9e3127..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyEngineConfiguration.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Dictionary;
-import java.util.jar.Attributes;
-import java.util.jar.Manifest;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.commons.osgi.PropertiesUtil;
-import org.osgi.service.component.ComponentContext;
-
-/**
- * Holds various Sightly engine global configurations.
- */
-@Component(
-        metatype = true,
-        label = "Apache Sling Scripting Sightly Engine Configuration",
-        description = "Sightly Engine Configuration Options"
-)
-@Service(SightlyEngineConfiguration.class)
-@Properties({
-        @Property(
-                name = SightlyEngineConfiguration.SCR_PROP_NAME_DEVMODE,
-                boolValue = SightlyEngineConfiguration.SCR_PROP_DEFAULT_DEVMODE,
-                label = "Development Mode",
-                description = "If enabled, Sightly components will be recompiled at every request instead of loading objects from memory."
-        ),
-        @Property(
-                name = SightlyEngineConfiguration.SCR_PROP_NAME_ENCODING,
-                value = SightlyEngineConfiguration.SCR_PROP_DEFAULT_ENCODING,
-                label = "Template Files Default Encoding",
-                description = "The default encoding used for reading Sightly template files (this directly affects how Sightly templates" +
-                        "are rendered)."
-        )
-})
-public class SightlyEngineConfiguration {
-
-    public static final String SCR_PROP_NAME_DEVMODE = "org.apache.sling.scripting.sightly.devmode";
-    public static final boolean SCR_PROP_DEFAULT_DEVMODE = false;
-
-    public static final String SCR_PROP_NAME_ENCODING = "org.apache.sling.scripting.sightly.encoding";
-    public static final String SCR_PROP_DEFAULT_ENCODING = "UTF-8";
-
-    private String engineVersion = "0";
-    private boolean devMode = false;
-    private String encoding = SCR_PROP_DEFAULT_ENCODING;
-
-    public String getEngineVersion() {
-        return engineVersion;
-    }
-
-    public boolean isDevMode() {
-        return devMode;
-    }
-
-    public String getEncoding() {
-        return encoding;
-    }
-
-    protected void activate(ComponentContext componentContext) {
-        InputStream ins = null;
-        try {
-            ins = getClass().getResourceAsStream("/META-INF/MANIFEST.MF");
-            if (ins != null) {
-                Manifest manifest = new Manifest(ins);
-                Attributes attrs = manifest.getMainAttributes();
-                String version = attrs.getValue("ScriptEngine-Version");
-                if (version != null) {
-                    engineVersion = version;
-                }
-            }
-        } catch (IOException ioe) {
-        } finally {
-            if (ins != null) {
-                try {
-                    ins.close();
-                } catch (IOException ignore) {
-                }
-            }
-        }
-        Dictionary properties = componentContext.getProperties();
-        devMode = PropertiesUtil.toBoolean(properties.get(SCR_PROP_NAME_DEVMODE), SCR_PROP_DEFAULT_DEVMODE);
-        encoding = PropertiesUtil.toString(properties.get(SCR_PROP_NAME_ENCODING), SCR_PROP_DEFAULT_ENCODING);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngine.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngine.java
deleted file mode 100644
index dcac709..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngine.java
+++ /dev/null
@@ -1,183 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine;
-
-import java.io.PrintWriter;
-import java.io.Reader;
-import java.util.Collections;
-
-import javax.script.Bindings;
-import javax.script.ScriptContext;
-import javax.script.ScriptEngineFactory;
-import javax.script.ScriptException;
-import javax.script.SimpleBindings;
-
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.api.resource.LoginException;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceResolverFactory;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-import org.apache.sling.commons.classloader.DynamicClassLoader;
-import org.apache.sling.scripting.api.AbstractSlingScriptEngine;
-import org.apache.sling.scripting.sightly.api.*;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.common.SightlyRuntimeImpl;
-import org.apache.sling.scripting.sightly.engine.runtime.UnitLocatorImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.api.SightlyEngineException;
-import org.apache.sling.scripting.sightly.engine.runtime.UnitLocatorImpl;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RenderUnit;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.common.SightlyRuntimeImpl;
-import org.apache.sling.scripting.sightly.api.StackedWriter;
-import org.apache.sling.scripting.sightly.api.UnitLocator;
-
-/**
- * The Sightly Script engine
- */
-public class SightlyScriptEngine extends AbstractSlingScriptEngine {
-
-    private static final Logger LOG = LoggerFactory.getLogger(SightlyScriptEngine.class);
-    private static final Bindings EMPTY_BINDINGS = new SimpleBindings(Collections.<String, Object>emptyMap());
-    private static final int MAX_CLASSLOADER_RETRIES = 5;
-
-    private final UnitLoader unitLoader;
-    private final Dynamic dynamic;
-    private final ExtensionRegistryService extensionRegistryService;
-
-    public SightlyScriptEngine(ScriptEngineFactory scriptEngineFactory,
-                               UnitLoader unitLoader,
-                               Dynamic dynamic,
-                               ExtensionRegistryService extensionRegistryService) {
-        super(scriptEngineFactory);
-        this.unitLoader = unitLoader;
-        this.dynamic = dynamic;
-        this.extensionRegistryService = extensionRegistryService;
-    }
-
-    @Override
-    public Object eval(Reader reader, ScriptContext scriptContext) throws ScriptException {
-        ClassLoader old = Thread.currentThread().getContextClassLoader();
-        Thread.currentThread().setContextClassLoader(((SightlyScriptEngineFactory) getFactory()).getClassLoader());
-        checkArguments(reader, scriptContext);
-        Bindings bindings = scriptContext.getBindings(ScriptContext.ENGINE_SCOPE);
-        SlingScriptHelper slingScriptHelper = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-        Resource scriptResource = slingScriptHelper.getScript().getScriptResource();
-
-        final SlingBindings slingBindings = new SlingBindings();
-        slingBindings.putAll(bindings);
-
-        Bindings globalBindings = new SimpleBindings(slingBindings);
-
-        final SlingHttpServletRequest request = slingBindings.getRequest();
-        final Object oldValue = request.getAttribute(SlingBindings.class.getName());
-        try {
-            request.setAttribute(SlingBindings.class.getName(), slingBindings);
-            evaluateScript(scriptResource, globalBindings);
-        } finally {
-            request.setAttribute(SlingBindings.class.getName(), oldValue);
-            Thread.currentThread().setContextClassLoader(old);
-        }
-
-        return null;
-    }
-
-    private void evaluateScript(Resource scriptResource, Bindings bindings) {
-        RenderUnit renderUnit = unitLoader.createUnit(scriptResource, bindings);
-        ResourceResolver resourceResolver = null;
-        RenderContext context = null;
-        try {
-            resourceResolver = getAdminResourceResolver(bindings);
-            context = provideContext(scriptResource, bindings, resourceResolver);
-            renderUnit.render(context, EMPTY_BINDINGS);
-        } catch (NoClassDefFoundError defFoundError) {
-            if (context != null) {
-                ClassLoader dcl = renderUnit.getClass().getClassLoader().getParent();
-                if (dcl instanceof DynamicClassLoader && !((DynamicClassLoader) dcl).isLive()) {
-                    boolean defError = true;
-                    int retries = 0;
-                    while (defError) {
-                        try {
-                            renderUnit = unitLoader.createUnit(scriptResource, bindings);
-                            renderUnit.render(context, EMPTY_BINDINGS);
-                            defError = false;
-                        } catch (Throwable t) {
-                            if (!(t instanceof NoClassDefFoundError)) {
-                                // break immediately if there's a different error than a classloader one
-                                if (t instanceof Error) {
-                                    throw (Error) t;
-                                }
-                                throw (RuntimeException) t;
-                            }
-                            retries++;
-                            if (retries > MAX_CLASSLOADER_RETRIES) {
-                                LOG.error("Max number of retries (" + MAX_CLASSLOADER_RETRIES +
-                                        ") for obtaining a valid RenderUnit was exceeded.");
-                                throw defFoundError;
-                            }
-                        }
-                    }
-                } else {
-                    // if we can't recover from this just throw the original exception
-                    throw defFoundError;
-                }
-            }
-        }
-        finally {
-            if (resourceResolver != null) {
-                resourceResolver.close();
-            }
-        }
-    }
-
-    private RenderContext provideContext(Resource scriptResource, Bindings bindings, ResourceResolver resourceResolver) {
-        PrintWriter printWriter = (PrintWriter) bindings.get(SlingBindings.OUT);
-        StackedWriter writer = new StackedWriter(printWriter);
-        UnitLocator unitLocator = new UnitLocatorImpl(unitLoader, resourceResolver, bindings, scriptResource);
-        SightlyRuntimeImpl runtime = new SightlyRuntimeImpl(extensionRegistryService.extensions());
-        RenderContext renderContext = new RenderContext(writer, bindings, dynamic, runtime, unitLocator);
-        runtime.setRenderContext(renderContext);
-        return renderContext;
-    }
-
-    private void checkArguments(Reader reader, ScriptContext scriptContext) {
-        if (reader == null) {
-            throw new NullPointerException("Reader cannot be null");
-        }
-        if (scriptContext == null) {
-            throw new NullPointerException("ScriptContext cannot be null");
-        }
-    }
-
-    private ResourceResolver getAdminResourceResolver(Bindings bindings) {
-        SlingScriptHelper sling = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-        ResourceResolverFactory rrf = sling.getService(ResourceResolverFactory.class);
-        try {
-            return rrf.getAdministrativeResourceResolver(null);
-        } catch (LoginException e) {
-            throw new SightlyEngineException(e);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngineFactory.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngineFactory.java
deleted file mode 100644
index f3b3cbc..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/SightlyScriptEngineFactory.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine;
-
-import javax.script.ScriptEngine;
-import javax.script.ScriptEngineFactory;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.commons.classloader.DynamicClassLoaderManager;
-import org.apache.sling.scripting.api.AbstractScriptEngineFactory;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.osgi.service.component.ComponentContext;
-
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-
-/**
- * Sightly template engine factory
- */
-@Component()
-@Service(ScriptEngineFactory.class)
-@Properties({
-        @Property(name = "service.description", value = "Sightly Templating Engine"),
-        @Property(name = "compatible.javax.script.name", value = "sly")
-})
-public class SightlyScriptEngineFactory extends AbstractScriptEngineFactory {
-
-    @Reference
-    private UnitLoader unitLoader = null;
-
-    @Reference
-    private ExtensionRegistryService extensionRegistryService = null;
-
-    @Reference
-    private ObjectModel objectModel = null;
-
-    @Reference()
-    private DynamicClassLoaderManager dynamicClassLoaderManager;
-
-    private ClassLoader dynamicClassLoader;
-
-    protected Dynamic dynamic;
-
-    public final static String SHORT_NAME = "sightly";
-
-    public final static String LANGUAGE_NAME = "The Sightly Templating Language";
-
-    public final static String LANGUAGE_VERSION = "1.0";
-
-    public final static String EXTENSION = "html";
-
-    public SightlyScriptEngineFactory() {
-        setNames(SHORT_NAME);
-        setExtensions(EXTENSION);
-    }
-
-    @Override
-    public String getLanguageName() {
-        return LANGUAGE_NAME;
-    }
-
-    @Override
-    public String getLanguageVersion() {
-        return LANGUAGE_VERSION;
-    }
-
-    @Override
-    public ScriptEngine getScriptEngine() {
-        return new SightlyScriptEngine(this, unitLoader, dynamic, extensionRegistryService);
-    }
-
-    protected void activate(ComponentContext componentContext) {
-        dynamic = new Dynamic(objectModel);
-    }
-
-    protected void bindDynamicClassLoaderManager(final DynamicClassLoaderManager dclm) {
-        if (this.dynamicClassLoader != null) {
-            this.dynamicClassLoader = null;
-            this.dynamicClassLoaderManager = null;
-        }
-        this.dynamicClassLoaderManager = dclm;
-        dynamicClassLoader = dclm.getDynamicClassLoader();
-    }
-
-    protected void unbindDynamicClassLoaderManager(final DynamicClassLoaderManager dclm) {
-        if (this.dynamicClassLoaderManager == dclm) {
-            this.dynamicClassLoader = null;
-            this.dynamicClassLoaderManager = null;
-        }
-    }
-
-    protected ClassLoader getClassLoader() {
-        return dynamicClassLoader;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/UnitLoader.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/UnitLoader.java
deleted file mode 100644
index c0a2b35..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/UnitLoader.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine;
-
-import javax.script.Bindings;
-
-import org.apache.sling.api.resource.Resource;
-
-import org.apache.sling.scripting.sightly.api.RenderUnit;
-
-/**
- * Create rendering units from resources
- */
-public interface UnitLoader {
-
-    /**
-     * Create a render unit from the given resource
-     *
-     * @param resource      the resource
-     * @param bindings      the bindings
-     * @return the render unit
-     */
-    RenderUnit createUnit(Resource resource, Bindings bindings);
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/ClassUnitLoader.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/ClassUnitLoader.java
deleted file mode 100644
index 0d06ac8..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/ClassUnitLoader.java
+++ /dev/null
@@ -1,440 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.compiled;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.util.Calendar;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
-
-import javax.script.Bindings;
-
-import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringEscapeUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Activate;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.SlingConstants;
-import org.apache.sling.api.SlingHttpServletResponse;
-import org.apache.sling.api.resource.LoginException;
-import org.apache.sling.api.resource.PersistenceException;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceResolverFactory;
-import org.apache.sling.api.resource.ResourceUtil;
-import org.apache.sling.api.resource.ValueMap;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.scripting.sightly.api.RenderUnit;
-import org.apache.sling.scripting.sightly.api.SightlyEngineException;
-import org.apache.sling.scripting.sightly.api.SightlyParsingException;
-import org.apache.sling.scripting.sightly.api.SightlyRenderException;
-import org.apache.sling.scripting.sightly.compiled.CompilationOutput;
-import org.apache.sling.scripting.sightly.compiled.JavaClassBackend;
-import org.apache.sling.scripting.sightly.compiler.SightlyCompileService;
-import org.apache.sling.scripting.sightly.compiler.api.SightlyCompiler;
-import org.apache.sling.scripting.sightly.compiler.util.GlobalShadowCheckBackend;
-import org.apache.sling.scripting.sightly.engine.SightlyEngineConfiguration;
-import org.apache.sling.scripting.sightly.engine.SightlyScriptEngineFactory;
-import org.apache.sling.scripting.sightly.engine.UnitLoader;
-import org.apache.sling.settings.SlingSettingsService;
-import org.osgi.service.component.ComponentContext;
-import org.osgi.service.event.Event;
-import org.osgi.service.event.EventConstants;
-import org.osgi.service.event.EventHandler;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Obtain render units by compiling Sightly to Java
- */
-@Component
-@Service({UnitLoader.class, EventHandler.class})
-@Properties({
-        @Property(
-                name = EventConstants.EVENT_TOPIC,
-                value = {SlingConstants.TOPIC_RESOURCE_ADDED, SlingConstants.TOPIC_RESOURCE_CHANGED, SlingConstants.TOPIC_RESOURCE_REMOVED}
-        ),
-        @Property(
-                name = EventConstants.EVENT_FILTER,
-                value = "(|(" + SlingConstants.PROPERTY_PATH + "=/apps/**/*." + SightlyScriptEngineFactory.EXTENSION + ")(" +
-                        SlingConstants.PROPERTY_PATH + "=/libs/**/*." + SightlyScriptEngineFactory.EXTENSION + "))"
-        )
-})
-@SuppressWarnings("unused")
-public class ClassUnitLoader implements UnitLoader, EventHandler {
-
-    public static final String DEFAULT_REPO_BASE_PATH = "/var/classes";
-    private static final Logger log = LoggerFactory.getLogger(ClassUnitLoader.class);
-    private static final String CLASS_NAME_PREFIX = "SightlyJava_";
-    private static final String MAIN_TEMPLATE_PATH = "templates/compiled_unit_template.txt";
-    private static final String CHILD_TEMPLATE_PATH = "templates/subtemplate.txt";
-
-    private static final String NT_FOLDER = "nt:folder";
-    private static final String NT_FILE = "nt:file";
-    private static final String NT_RESOURCE = "nt:resource";
-    private static final String JCR_PRIMARY_TYPE = "jcr:primaryType";
-    private static final String JCR_CONTENT = "jcr:content";
-    private static final String JCR_DATA = "jcr:data";
-    private static final String JCR_LASTMODIFIED = "jcr:lastModified";
-    private static final String JCR_ENCODING = "jcr:encoding";
-
-    private String mainTemplate;
-    private String childTemplate;
-    private String basePath;
-    private Map<String, Long> slyScriptsMap = new ConcurrentHashMap<String, Long>();
-
-    private final Map<String, Lock> activeWrites = new HashMap<String, Lock>();
-
-    @Reference
-    private SightlyCompiler compiler = null;
-
-    @Reference
-    private SightlyCompileService sightlyCompileService = null;
-
-    @Reference
-    private SightlyEngineConfiguration sightlyEngineConfiguration = null;
-
-    @Reference
-    private ResourceResolverFactory rrf = null;
-
-    @Reference
-    private SlingSettingsService slingSettings = null;
-
-    private static long getLastModifiedDate(ResourceResolver resolver, String path) {
-        try {
-            Resource ntResource = getNtResource(resolver, path);
-            if (ntResource != null) {
-                ValueMap ntResourceProperties = ntResource.adaptTo(ValueMap.class);
-                /**
-                 * make sure to use 0L for the default value; otherwise we get an Integer
-                 * overflow due to the long value stored in JCR
-                 */
-                return ntResourceProperties.get(JCR_LASTMODIFIED, 0L);
-            }
-        } catch (Exception e) {
-            log.error("Error while reading last modification date: ", e);
-        }
-        return 0L;
-    }
-
-    private static Resource getNtResource(ResourceResolver resolver, String path) {
-        Resource resource = resolver.getResource(path);
-        if (resource != null) {
-            if (path.endsWith(JCR_CONTENT) && resource.isResourceType(NT_RESOURCE)) {
-                return resource;
-            } else {
-                Resource ntResource = resource.getChild(JCR_CONTENT);
-                if (ntResource != null && ntResource.isResourceType(NT_RESOURCE)) {
-                    return ntResource;
-                }
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public RenderUnit createUnit(Resource scriptResource, Bindings bindings) {
-        Lock lock = null;
-        ResourceResolver adminResolver = null;
-        try {
-            SourceIdentifier sourceIdentifier = obtainIdentifier(scriptResource);
-            adminResolver = rrf.getAdministrativeResourceResolver(null);
-            Object obj;
-            ValueMap templateProperties = adminResolver.getResource(scriptResource.getPath()).getChild(JCR_CONTENT).adaptTo(ValueMap.class);
-            String encoding = templateProperties.get(JCR_ENCODING, sightlyEngineConfiguration.getEncoding());
-            SlingHttpServletResponse response = (SlingHttpServletResponse) bindings.get(SlingBindings.RESPONSE);
-            response.setCharacterEncoding(encoding);
-            if (needsUpdate(adminResolver, sourceIdentifier)) {
-                synchronized (activeWrites) {
-                    String sourceFullPath = sourceIdentifier.getSourceFullPath();
-                    lock = activeWrites.get(sourceFullPath);
-                    if (lock == null) {
-                        lock = new ReentrantLock();
-                        activeWrites.put(sourceFullPath, lock);
-                    }
-                    lock.lock();
-                }
-                createClass(adminResolver, sourceIdentifier, bindings, encoding);
-                Resource javaClassResource = adminResolver.getResource(sourceIdentifier.getSourceFullPath());
-                obj = sightlyCompileService.compileSource(javaClassResource, sourceIdentifier.getFullyQualifiedName());
-            } else {
-                Resource javaClassResource = adminResolver.getResource(sourceIdentifier.getSourceFullPath());
-                obj = sightlyCompileService.getInstance(javaClassResource, sourceIdentifier.getFullyQualifiedName(), true);
-            }
-            if (!(obj instanceof RenderUnit)) {
-                throw new SightlyEngineException("Class is not a RenderUnit instance");
-            }
-            return (RenderUnit) obj;
-        } catch (LoginException e) {
-            throw new SightlyRenderException("Unable to create a RenderUnit.", e);
-        } finally {
-            if (adminResolver != null) {
-                adminResolver.close();
-            }
-            if (lock != null) {
-                lock.unlock();
-            }
-        }
-    }
-
-    @Override
-    public void handleEvent(Event event) {
-        String path = (String) event.getProperty(SlingConstants.PROPERTY_PATH);
-        String topic = event.getTopic();
-        if (SlingConstants.TOPIC_RESOURCE_ADDED.equals(topic) || SlingConstants.TOPIC_RESOURCE_CHANGED.equals(topic)) {
-            slyScriptsMap.put(path, Calendar.getInstance().getTimeInMillis());
-        } else if (SlingConstants.TOPIC_RESOURCE_REMOVED.equals(topic)) {
-            slyScriptsMap.remove(path);
-        }
-    }
-
-    @Activate
-    @SuppressWarnings("unused")
-    protected void activate(ComponentContext componentContext) {
-        mainTemplate = resourceFile(componentContext, MAIN_TEMPLATE_PATH);
-        childTemplate = resourceFile(componentContext, CHILD_TEMPLATE_PATH);
-        String basePath =
-                DEFAULT_REPO_BASE_PATH + "/" + slingSettings.getSlingId() + "/sightly/";
-        ResourceResolver adminResolver = null;
-        try {
-            adminResolver = rrf.getAdministrativeResourceResolver(null);
-            Resource basePathResource;
-            if ((basePathResource = adminResolver.getResource(basePath)) != null) {
-                for (Resource resource : basePathResource.getChildren()) {
-                    if (!resource.getName().equals(sightlyEngineConfiguration.getEngineVersion())) {
-                        adminResolver.delete(resource);
-                    }
-                }
-                if (adminResolver.hasChanges()) {
-                    adminResolver.commit();
-                }
-            }
-        } catch (Exception e) {
-            log.error("Cannot delete stale Sightly Java classes.", e);
-        } finally {
-            if (adminResolver != null) {
-                adminResolver.close();
-            }
-        }
-    }
-
-    private synchronized void writeSource(ResourceResolver resolver, String sourceFullPath, String source) {
-        try {
-            String sourceParentPath = ResourceUtil.getParent(sourceFullPath);
-            Map<String, Object> sourceFolderProperties = new HashMap<String, Object>();
-            sourceFolderProperties.put(JCR_PRIMARY_TYPE, NT_FOLDER);
-            Resource sourceFolder = createResource(resolver, sourceParentPath, sourceFolderProperties, NT_FOLDER, true, false);
-
-            Map<String, Object> sourceFileProperties = new HashMap<String, Object>();
-            sourceFileProperties.put(JCR_PRIMARY_TYPE, NT_FILE);
-            Resource sourceFileResource = createResource(resolver, sourceFullPath, sourceFileProperties, null, false, false);
-
-            Map<String, Object> ntResourceProperties = new HashMap<String, Object>();
-            ntResourceProperties.put(JCR_PRIMARY_TYPE, NT_RESOURCE);
-            ntResourceProperties.put(JCR_DATA, new ByteArrayInputStream(source.getBytes()));
-            ntResourceProperties.put(JCR_LASTMODIFIED, Calendar.getInstance());
-            Resource sourceFileContentResource =
-                    createResource(resolver, sourceFullPath + "/" + JCR_CONTENT, ntResourceProperties, NT_RESOURCE, true, true);
-            log.debug("Successfully written Java source file to repository: {}", sourceFullPath);
-        } catch (PersistenceException e) {
-            log.error("Repository error while writing Java source file: " + sourceFullPath, e);
-        }
-    }
-
-    private SourceIdentifier obtainIdentifier(Resource resource) {
-        String basePath =
-                DEFAULT_REPO_BASE_PATH + "/" + slingSettings.getSlingId() + "/sightly/" + sightlyEngineConfiguration.getEngineVersion();
-        return new SourceIdentifier(resource, CLASS_NAME_PREFIX, basePath);
-    }
-
-    private void createClass(ResourceResolver resolver, SourceIdentifier identifier, Bindings bindings, String encoding) {
-        String scriptSource = null;
-        try {
-            Resource scriptResource = resolver.getResource(identifier.getResource().getPath());
-            if (scriptResource != null) {
-                scriptSource = IOUtils.toString(scriptResource.adaptTo(InputStream.class), encoding);
-                String javaSourceCode = obtainResultSource(scriptSource, identifier, bindings);
-                writeSource(resolver, identifier.getSourceFullPath(), javaSourceCode);
-            }
-        } catch (SightlyParsingException e) {
-            String offendingInput = e.getOffendingInput();
-            if (StringUtils.isNotEmpty(offendingInput)) {
-                offendingInput = StringEscapeUtils.unescapeHtml(offendingInput.trim());
-                int errorLine = getLineWhereErrorOccurred(scriptSource, offendingInput);
-                throw new SightlyParsingException("Parsing error in template " + identifier.getResource().getPath() + " at line " +
-                        errorLine + ":\n" + offendingInput + "\n", e);
-            }
-        } catch (IOException e) {
-            throw new SightlyRenderException(e);
-        }
-    }
-
-    private String obtainResultSource(String scriptSource, SourceIdentifier identifier, Bindings bindings) {
-        JavaClassTemplate classTemplate = newMainTemplate();
-        classTemplate.setClassName(identifier.getClassName());
-        classTemplate.setPackageName(identifier.getPackageName());
-        CompilationOutput compilationOutput = obtainOutput(scriptSource, bindings);
-        processCompilationResult(compilationOutput, classTemplate);
-        return classTemplate.toString();
-    }
-
-    private CompilationOutput obtainOutput(String source, Bindings bindings) {
-        JavaClassBackend backend =  new JavaClassBackend();
-        compiler.compile(source, new GlobalShadowCheckBackend(backend, bindings.keySet()));
-        return backend.build();
-    }
-
-    private void processCompilationResult(CompilationOutput result, JavaClassTemplate mainTemplate) {
-        mainTemplate.writeMainBody(result.getMainBody());
-        for (Map.Entry<String, CompilationOutput> entry : result.getSubTemplates().entrySet()) {
-            JavaClassTemplate childTemplate = newChildTemplate();
-            processCompilationResult(entry.getValue(), childTemplate);
-            mainTemplate.writeSubTemplate(entry.getKey(), childTemplate.toString());
-        }
-    }
-
-    private JavaClassTemplate newMainTemplate() {
-        return new JavaClassTemplate(mainTemplate);
-    }
-
-    private JavaClassTemplate newChildTemplate() {
-        return new JavaClassTemplate(childTemplate);
-    }
-
-    private String resourceFile(ComponentContext componentContext, String path) {
-        InputStream inputStream = null;
-        try {
-            URL url = componentContext.getBundleContext().getBundle().getEntry(path);
-            if (url == null) {
-                throw new SightlyEngineException("No bundle resource resides at " + path);
-            }
-            inputStream = componentContext.getBundleContext().getBundle().getEntry(path).openStream();
-            return IOUtils.toString(inputStream);
-        } catch (IOException e) {
-            throw new SightlyEngineException("Java class templates could not be found");
-        } finally {
-            if (inputStream != null) {
-                try {
-                    inputStream.close();
-                } catch (IOException e) {
-                    log.error("Error when closing bundle resource stream", e);
-                }
-            }
-        }
-    }
-
-    private int getLineWhereErrorOccurred(String documentFragment, String offendingInput) {
-        int offendingInputIndex = documentFragment.indexOf(offendingInput);
-        String textBeforeError = documentFragment.substring(0, offendingInputIndex);
-        int line = 0;
-        int newLine = 0;
-        while (textBeforeError.length() > 0 && newLine != -1) {
-            newLine = textBeforeError.indexOf("\n");
-            if (newLine != -1) {
-                line++;
-                textBeforeError = textBeforeError.substring(newLine + 1, textBeforeError.length());
-            }
-        }
-        return ++line;
-    }
-
-    private boolean needsUpdate(ResourceResolver resolver, SourceIdentifier sourceIdentifier) {
-        if (sightlyEngineConfiguration.isDevMode()) {
-            return true;
-        }
-        String javaPath = sourceIdentifier.getSourceFullPath();
-        String slyPath = sourceIdentifier.getResource().getPath();
-        Long javaFileDate = getLastModifiedDate(resolver, javaPath);
-        if (javaFileDate != 0) {
-
-            Long slyScriptChangeDate = slyScriptsMap.get(slyPath);
-            if (slyScriptChangeDate != null) {
-                if (slyScriptChangeDate < javaFileDate) {
-                    return false;
-                }
-            } else {
-                slyScriptsMap.put(slyPath, Calendar.getInstance().getTimeInMillis());
-            }
-            return true;
-        }
-        slyScriptsMap.put(slyPath, Calendar.getInstance().getTimeInMillis());
-        return true;
-    }
-
-    private Resource createResource(ResourceResolver resolver, String path, Map<String, Object> resourceProperties, String intermediateType,
-            boolean autoCommit, boolean forceOverwrite) throws PersistenceException {
-        Resource rsrc = resolver.getResource(path);
-        if (rsrc == null || forceOverwrite) {
-            final int lastPos = path.lastIndexOf('/');
-            final String name = path.substring(lastPos + 1);
-
-            final Resource parentResource;
-            if (lastPos == 0) {
-                parentResource = resolver.getResource("/");
-            } else {
-                final String parentPath = path.substring(0, lastPos);
-                Map<String, Object> parentProperties = new HashMap<String, Object>();
-                parentProperties.put(JCR_PRIMARY_TYPE, intermediateType);
-                parentResource = createResource(resolver, parentPath, parentProperties, intermediateType, autoCommit, false);
-            }
-            if (autoCommit) {
-                resolver.refresh();
-            }
-            if (forceOverwrite) {
-                Resource resource = resolver.getResource(parentResource, name);
-                if (resource != null) {
-                    resolver.delete(resource);
-                }
-            }
-            try {
-                rsrc = resolver.create(parentResource, name, resourceProperties);
-                if (autoCommit) {
-                    resolver.commit();
-                    resolver.refresh();
-                    rsrc = resolver.getResource(parentResource, name);
-                }
-            } catch (PersistenceException pe) {
-                resolver.revert();
-                resolver.refresh();
-                rsrc = resolver.getResource(parentResource, name);
-                if (rsrc == null) {
-                    rsrc = resolver.create(parentResource, name, resourceProperties);
-                }
-            } finally {
-                if (autoCommit) {
-                    resolver.commit();
-                    resolver.refresh();
-                    rsrc = resolver.getResource(parentResource, name);
-                }
-            }
-        }
-        return rsrc;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/JavaClassTemplate.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/JavaClassTemplate.java
deleted file mode 100644
index 8425b2e..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/JavaClassTemplate.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.compiled;
-
-/**
- * Template for generated Java classes.
- */
-public class JavaClassTemplate {
-
-
-    private String classTemplate;
-
-    private static final String MAIN_BODY = "MainBody";
-    private static final String CLASS_NAME = "ClassName";
-    private static final String PACKAGE_NAME = "PackageName";
-    private static final String TEMPLATE_INIT = "SubTemplateMapInit";
-    private static final String NAME = "Name";
-
-    private StringBuilder templateInitBuilder = new StringBuilder();
-
-    public JavaClassTemplate(String template) {
-        this.classTemplate = template;
-    }
-
-    public void writeMainBody(String content) {
-        setPart(MAIN_BODY, content);
-    }
-
-    public void writeSubTemplate(String name, String content) {
-        templateInitBuilder.append(insertPart(NAME, content, name));
-    }
-
-    public void setClassName(String name) {
-        setPart(CLASS_NAME, name);
-    }
-
-    public void setPackageName(String name) {
-        setPart(PACKAGE_NAME, name);
-    }
-
-    @Override
-    public String toString() {
-        return insertPart(TEMPLATE_INIT, classTemplate, templateInitBuilder.toString());
-    }
-
-    private void setPart(String partName, String content) {
-        classTemplate = insertPart(partName, classTemplate, content);
-    }
-
-    private String insertPart(String partName, String original, String content) {
-        String id = "##" + partName + "##";
-        return original.replace(id, content);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/SourceIdentifier.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/SourceIdentifier.java
deleted file mode 100644
index c484da8..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/compiled/SourceIdentifier.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine.compiled;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceUtil;
-
-/**
- * Identifies a Java source file in a JCR repository.
- */
-public class SourceIdentifier {
-
-    private final String className;
-    private final Resource resource;
-    private final String packageName;
-    private final String sourceFileName;
-    private final String sourceFullPath;
-    private final String fullyQualifiedName;
-
-    public SourceIdentifier(Resource resource, String classNamePrefix, String basePath) {
-        this.resource = resource;
-        this.className = buildClassName(resource, classNamePrefix);
-        this.packageName = buildPackageName(resource);
-        this.sourceFileName = buildSourceFileName(this.className);
-        this.sourceFullPath = buildSourceFullPath(resource, basePath, this.sourceFileName);
-        this.fullyQualifiedName = buildFullyQualifiedName(packageName, className);
-    }
-
-    public String getClassName() {
-        return className;
-    }
-
-    public Resource getResource() {
-        return resource;
-    }
-
-    public String getPackageName() {
-        return packageName;
-    }
-
-    public String getSourceFileName() {
-        return sourceFileName;
-    }
-
-    public String getSourceFullPath() {
-        return sourceFullPath;
-    }
-
-    public String getFullyQualifiedName() {
-        return fullyQualifiedName;
-    }
-
-    private String buildFullyQualifiedName(String packageName, String className) {
-        return packageName + "." + className;
-    }
-
-    private String buildClassName(Resource resource, String classNamePrefix) {
-        String scriptName = ResourceUtil.getName(resource.getPath());
-        scriptName = scriptName.substring(0, scriptName.lastIndexOf(getExtension(scriptName)));
-        String className = classNamePrefix + scriptName;
-        return className.replaceAll("-", "_").replaceAll("\\.", "_");
-    }
-
-    private String buildPackageName(Resource resource) {
-        return ResourceUtil.getParent(resource.getPath())
-                .replaceAll("/", ".")
-                .substring(1)
-                .replaceAll("-", "_");
-    }
-
-    private String buildSourceFileName(String className) {
-        return className + ".java";
-    }
-
-    private String buildSourceFullPath(Resource resource, String basePath, String sourceFileName) {
-        String sourceParentPath = basePath + ResourceUtil.getParent(resource.getPath());
-        return sourceParentPath + "/" + sourceFileName;
-    }
-
-    private String getExtension(String scriptName) {
-        if (StringUtils.isEmpty(scriptName)) {
-            return null;
-        }
-        int lastDotIndex = scriptName.lastIndexOf('.');
-        return scriptName.substring(lastDotIndex);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/I18nRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/I18nRuntimeExtension.java
deleted file mode 100644
index 525c7ea..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/I18nRuntimeExtension.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.extension;
-
-import java.util.Enumeration;
-import java.util.List;
-import java.util.Locale;
-import java.util.ResourceBundle;
-import javax.script.Bindings;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-import org.apache.sling.i18n.RequestLocaleResolver;
-import org.apache.sling.i18n.ResourceBundleProvider;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionComponent;
-import org.apache.sling.scripting.sightly.filter.I18nFilter;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-@Component
-@Service(RuntimeExtension.class)
-@Properties({
-        @Property(name = RuntimeExtensionComponent.SCR_PROP_NAME, value = I18nFilter.FUNCTION)
-})
-public class I18nRuntimeExtension extends RuntimeExtensionComponent {
-
-    private static final Logger LOG = LoggerFactory.getLogger(I18nRuntimeExtension.class);
-
-    @Override
-    public ExtensionInstance provide(RenderContext renderContext) {
-        final ObjectModel model = renderContext.getObjectModel();
-        final Bindings bindings = renderContext.getBindings();
-
-        return new ExtensionInstance() {
-            @Override
-            public Object call(Object... arguments) {
-                checkArgumentCount(arguments, 3);
-                String text = model.coerceToString(arguments[0]);
-                String locale = model.coerceToString(arguments[1]);
-                String hint = model.coerceToString(arguments[2]);
-                return get(text, locale, hint);
-            }
-
-            private String get(String text, String locale, String hint) {
-                final SlingScriptHelper slingScriptHelper = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-                final SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
-                final ResourceBundleProvider resourceBundleProvider = slingScriptHelper.getService(ResourceBundleProvider.class);
-                if (resourceBundleProvider != null) {
-                    String key = text;
-                    if (StringUtils.isNotEmpty(hint)) {
-                        key += " ((" + hint + "))";
-                    }
-                    if (StringUtils.isEmpty(locale)) {
-                        Enumeration<Locale> requestLocales = request.getLocales();
-                        while (requestLocales.hasMoreElements()) {
-                            Locale l = requestLocales.nextElement();
-                            ResourceBundle resourceBundle = resourceBundleProvider.getResourceBundle(l);
-                            if (resourceBundle != null && resourceBundle.containsKey(key)) {
-                                return resourceBundle.getString(key);
-                            }
-                        }
-                    } else {
-                        Locale l = new Locale(locale);
-                        ResourceBundle resourceBundle = resourceBundleProvider.getResourceBundle(l);
-                        if (resourceBundle != null && resourceBundle.containsKey(key)) {
-                            return resourceBundle.getString(key);
-                        }
-                    }
-                }
-                LOG.warn("No translation found for string '{}' using expression provided locale '{}' or default locale '{}'",
-                        new String[] {text, locale, resourceBundleProvider.getDefaultLocale().getLanguage()});
-                return text;
-            }
-
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/IncludeRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/IncludeRuntimeExtension.java
deleted file mode 100644
index d492887..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/IncludeRuntimeExtension.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.extension;
-
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.Map;
-
-import javax.script.Bindings;
-import javax.servlet.Servlet;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.api.SlingHttpServletResponse;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-import org.apache.sling.api.servlets.ServletResolver;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionComponent;
-import org.apache.sling.scripting.sightly.api.SightlyRenderException;
-import org.apache.sling.scripting.sightly.plugin.IncludePlugin;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-@Component
-@Service(RuntimeExtension.class)
-@Properties({
-        @Property(name = RuntimeExtensionComponent.SCR_PROP_NAME, value = IncludePlugin.FUNCTION)
-})
-@SuppressWarnings("unused")
-/**
- * Runtime support for including resources in a Sightly script through {@code data-sly-include}. For more details check the implementation
- * of the {@link org.apache.sling.scripting.sightly.plugin.IncludePlugin}.
- */
-public class IncludeRuntimeExtension extends RuntimeExtensionComponent {
-
-    private static final Logger LOG = LoggerFactory.getLogger(IncludeRuntimeExtension.class);
-
-    private static final String OPTION_FILE = "file";
-    private static final String OPTION_PREPEND_PATH = "prependPath";
-    private static final String OPTION_APPEND_PATH = "appendPath";
-
-
-    @Override
-    public ExtensionInstance provide(final RenderContext renderContext) {
-
-        return new ExtensionInstance() {
-
-            private final Bindings bindings = renderContext.getBindings();
-
-            @Override
-            public Object call(Object... arguments) {
-                checkArgumentCount(arguments, 2);
-                String originalPath = renderContext.getObjectModel().coerceToString(arguments[0]);
-                Map options = (Map) arguments[1];
-                String path = buildPath(originalPath, options);
-                if (path == null) {
-                    throw new SightlyRenderException("Path for include is empty");
-                }
-                StringWriter output = new StringWriter();
-                includeScript(path, new PrintWriter(output));
-                return output.toString();
-
-            }
-
-            private String buildPath(String path, Map options) {
-                if (StringUtils.isEmpty(path)) {
-                    path = (String) options.get(OPTION_FILE);
-                }
-                if (StringUtils.isEmpty(path)) {
-                    return null;
-                }
-                String prependPath = (String) options.get(OPTION_PREPEND_PATH);
-                String appendPath = (String) options.get(OPTION_APPEND_PATH);
-                if (StringUtils.isNotEmpty(prependPath)) {
-                    path = prependPath + path;
-                }
-                if (StringUtils.isNotEmpty(appendPath)) {
-                    path = path + appendPath;
-                }
-                return path;
-            }
-
-            private void includeScript(String script, PrintWriter out) {
-                if (StringUtils.isEmpty(script)) {
-                    LOG.error("Script path cannot be empty");
-                } else {
-                    SlingScriptHelper slingScriptHelper = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-                    ServletResolver servletResolver = slingScriptHelper.getService(ServletResolver.class);
-                    if (servletResolver != null) {
-                        SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
-                        Servlet servlet = servletResolver.resolveServlet(request.getResource(), script);
-                        if (servlet != null) {
-                            try {
-                                SlingHttpServletResponse response = (SlingHttpServletResponse) bindings.get(SlingBindings.RESPONSE);
-                                PrintWriterResponseWrapper resWrapper = new PrintWriterResponseWrapper(out, response);
-                                servlet.service(request, resWrapper);
-                            } catch (Exception e) {
-                                LOG.error("Failed to include script {}", script, e);
-                            }
-                        } else {
-                            LOG.error("Failed to locate script {}", script);
-                        }
-                    } else {
-                        LOG.error("Sling ServletResolver service is unavailable, failed to include {}", script);
-                    }
-                }
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/PrintWriterResponseWrapper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/PrintWriterResponseWrapper.java
deleted file mode 100644
index d55c239..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/PrintWriterResponseWrapper.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.extension;
-
-import java.io.IOException;
-import java.io.PrintWriter;
-
-import org.apache.sling.api.SlingHttpServletResponse;
-import org.apache.sling.api.wrappers.SlingHttpServletResponseWrapper;
-
-/**
- * Wrapper response to redirect the output into a specified print writer
- */
-public class PrintWriterResponseWrapper extends SlingHttpServletResponseWrapper {
-
-    private final PrintWriter writer;
-
-    /**
-     * Create a wrapper for the supplied wrappedRequest
-     *
-     * @param writer - the base writer
-     * @param wrappedResponse - the wrapped response
-     */
-    public PrintWriterResponseWrapper(PrintWriter writer, SlingHttpServletResponse wrappedResponse) {
-        super(wrappedResponse);
-        this.writer = writer;
-    }
-
-    @Override
-    public PrintWriter getWriter() throws IOException {
-        return writer;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/ResourceRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/ResourceRuntimeExtension.java
deleted file mode 100644
index 82a994a..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/ResourceRuntimeExtension.java
+++ /dev/null
@@ -1,243 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.extension;
-
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.HashMap;
-import java.util.Map;
-import javax.script.Bindings;
-import javax.servlet.RequestDispatcher;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.api.SlingHttpServletResponse;
-import org.apache.sling.api.request.RequestDispatcherOptions;
-import org.apache.sling.api.resource.NonExistingResource;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceUtil;
-import org.apache.sling.api.resource.SyntheticResource;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionComponent;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionException;
-import org.apache.sling.scripting.sightly.plugin.ResourcePlugin;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Runtime support for including resources in a Sightly script through {@code data-sly-resource}. For more details check the implementation
- * of the {@link org.apache.sling.scripting.sightly.plugin.ResourcePlugin}.
- */
-@Component
-@Service(RuntimeExtension.class)
-@Properties(
-        @Property(name = RuntimeExtensionComponent.SCR_PROP_NAME, value = ResourcePlugin.FUNCTION)
-)
-@SuppressWarnings("unused")
-public class ResourceRuntimeExtension extends RuntimeExtensionComponent {
-
-    private static final Logger LOG = LoggerFactory.getLogger(ResourceRuntimeExtension.class);
-    private static final String OPTION_RESOURCE_TYPE = "resourceType";
-    private static final String OPTION_PATH = "path";
-    private static final String OPTION_PREPEND_PATH = "prependPath";
-    private static final String OPTION_APPEND_PATH = "appendPath";
-    private static final String OPTION_SELECTORS = "selectors";
-    private static final String OPTION_REMOVE_SELECTORS = "removeSelectors";
-    private static final String OPTION_ADD_SELECTORS = "addSelectors";
-    private static final String OPTION_REPLACE_SELECTORS = "replaceSelectors";
-
-    @Override
-    public ExtensionInstance provide(final RenderContext renderContext) {
-        return new ExtensionInstance() {
-
-            private final Bindings bindings = renderContext.getBindings();
-
-            @Override
-            @SuppressWarnings("unchecked")
-            public Object call(Object... arguments) {
-                if (arguments.length != 2) {
-                    throw new RuntimeExtensionException("Invalid number of arguments for resource extension");
-                }
-                return provideResource(arguments[0], (Map<String, Object>) arguments[1]);
-            }
-
-            private String provideResource(Object pathObj, Map<String, Object> options) {
-                Map<String, Object> opts = new HashMap<String, Object>(options);
-                String path = buildPath(pathObj, opts);
-                String resourceType = getAndRemoveOption(opts, OPTION_RESOURCE_TYPE);
-                handleSelectors(path, opts);
-                String dispatcherOptions = createDispatcherOptions(opts);
-                StringWriter writer = new StringWriter();
-                PrintWriter printWriter = new PrintWriter(writer);
-                includeResource(printWriter, path, dispatcherOptions, resourceType);
-                return writer.toString();
-            }
-
-            private void handleSelectors(String path, Map<String, Object> options) {
-                String selectors = getAndRemoveOption(options, OPTION_SELECTORS);
-                if (StringUtils.isNotEmpty(selectors)) {
-                    // handle the selectors option
-                    options.put(OPTION_ADD_SELECTORS, selectors);
-                    options.put(OPTION_REPLACE_SELECTORS, " ");
-                } else {
-                    if (options.containsKey(OPTION_REMOVE_SELECTORS)) {
-                        String removeSelectors = getAndRemoveOption(options, OPTION_REMOVE_SELECTORS);
-                        if (StringUtils.isEmpty(removeSelectors)) {
-                            options.put(OPTION_REPLACE_SELECTORS, " ");
-                        } else {
-                            String currentSelectors = getSelectorsFromPath(path);
-                            if (StringUtils.isEmpty(currentSelectors)) {
-                                currentSelectors = ((SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST)).getRequestPathInfo()
-                                        .getSelectorString();
-                            }
-                            if (StringUtils.isNotEmpty(currentSelectors)) {
-                                options.put(OPTION_REPLACE_SELECTORS, " ");
-                                String addSelectors = currentSelectors.replace(removeSelectors, "").replaceAll("\\.\\.", "\\.");
-                                if (addSelectors.startsWith(".")) {
-                                    addSelectors = addSelectors.substring(1);
-                                }
-                                if (addSelectors.endsWith(".")) {
-                                    addSelectors = addSelectors.substring(0, addSelectors.length() - 1);
-                                }
-                                options.put(OPTION_ADD_SELECTORS, addSelectors);
-                            }
-                        }
-                    }
-                }
-            }
-
-            private String buildPath(Object pathObj, Map<String, Object> options) {
-                String path = coerceString(pathObj);
-                String prependPath = getAndRemoveOption(options, OPTION_PREPEND_PATH);
-                String appendPath = getAndRemoveOption(options, OPTION_APPEND_PATH);
-                if (StringUtils.isEmpty(path)) {
-                    path = getOption(options, OPTION_PATH);
-                }
-                if (StringUtils.isNotEmpty(prependPath)) {
-                    path = prependPath + "/" + path;
-                }
-                if (StringUtils.isNotEmpty(appendPath)) {
-                    path = path + "/" + appendPath;
-                }
-
-                return path;
-            }
-
-            private String createDispatcherOptions(Map<String, Object> options) {
-                if (options == null || options.isEmpty()) {
-                    return null;
-                }
-                StringBuilder buffer = new StringBuilder();
-                boolean hasPreceding = false;
-                for (Map.Entry<String, Object> option : options.entrySet()) {
-                    if (hasPreceding) {
-                        buffer.append(", ");
-                    }
-                    String key = option.getKey();
-                    buffer.append(key).append("=");
-                    String strVal = coerceString(option.getValue());
-                    if (strVal == null) {
-                        strVal = "";
-                    }
-                    buffer.append(strVal);
-                    hasPreceding = true;
-                }
-                return buffer.toString();
-            }
-
-            private String coerceString(Object obj) {
-                if (obj instanceof String) {
-                    return (String) obj;
-                }
-                return null;
-            }
-
-            private String getOption(Map<String, Object> options, String property) {
-                return (String) options.get(property);
-            }
-
-            private String getAndRemoveOption(Map<String, Object> options, String property) {
-                return (String) options.remove(property);
-            }
-
-            private String getSelectorsFromPath(String path) {
-                String filePath;
-                if (path.contains("/")) {
-                    filePath = path.substring(path.lastIndexOf('/') + 1, path.length());
-                } else {
-                    filePath = path;
-                }
-                String[] parts = filePath.split("\\.");
-                if (parts.length > 2) {
-                    StringBuilder sb = new StringBuilder();
-                    for (int i = 1; i < parts.length - 1; i++) {
-                        sb.append(parts[i]);
-                        if (i != parts.length - 2) {
-                            sb.append(".");
-                        }
-                    }
-                    if (sb.length() > 0) {
-                        return sb.toString();
-                    }
-                }
-                return null;
-            }
-
-            private void includeResource(PrintWriter out, String script, String dispatcherOptions, String resourceType) {
-                if (StringUtils.isEmpty(script)) {
-                    LOG.error("Script path cannot be empty");
-                } else {
-                    SlingHttpServletResponse customResponse = new PrintWriterResponseWrapper(out, (SlingHttpServletResponse) bindings.get(SlingBindings.RESPONSE));
-                    SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
-                    script = normalizePath(request, script);
-
-                    Resource includeRes = request.getResourceResolver().resolve(script);
-                    if (includeRes instanceof NonExistingResource || includeRes.isResourceType(Resource.RESOURCE_TYPE_NON_EXISTING)) {
-                        includeRes = new SyntheticResource(request.getResourceResolver(), script, resourceType);
-                    }
-                    try {
-                        RequestDispatcherOptions opts = new RequestDispatcherOptions(dispatcherOptions);
-                        if (StringUtils.isNotEmpty(resourceType)) {
-                            opts.setForceResourceType(resourceType);
-                        }
-                        RequestDispatcher dispatcher = request.getRequestDispatcher(includeRes, opts);
-                        dispatcher.include(request, customResponse);
-                    } catch (Exception e) {
-                        LOG.error("Failed to include resource {}", script, e);
-                    }
-                }
-            }
-
-            private String normalizePath(SlingHttpServletRequest request, String path) {
-                if (!path.startsWith("/")) {
-                    path = request.getResource().getPath() + "/" + path;
-                }
-                return ResourceUtil.normalize(path);
-            }
-
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/XSSRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/XSSRuntimeExtension.java
deleted file mode 100644
index a4e84be..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/XSSRuntimeExtension.java
+++ /dev/null
@@ -1,242 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine.extension;
-
-import java.util.HashSet;
-import java.util.Set;
-import java.util.regex.Pattern;
-
-import javax.script.Bindings;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionComponent;
-import org.apache.sling.xss.XSSAPI;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionException;
-import org.apache.sling.scripting.sightly.compiler.api.CompilerException;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.filter.XSSFilter;
-import org.apache.sling.scripting.sightly.html.MarkupUtils;
-
-/**
- * Runtime support for XSS filtering
- */
-@Component
-@Service(RuntimeExtension.class)
-@Properties(
-        @Property(name = RuntimeExtensionComponent.SCR_PROP_NAME, value = XSSFilter.FUNCTION_NAME)
-)
-public class XSSRuntimeExtension extends RuntimeExtensionComponent {
-
-    private static final Set<String> elementNameWhiteList = new HashSet<String>();
-    private static final Logger log = LoggerFactory.getLogger(XSSRuntimeExtension.class);
-
-    private static final Pattern VALID_ATTRIBUTE = Pattern.compile("^[a-zA-Z_:][\\-a-zA-Z0-9_:\\.]*$");
-
-
-    @Override
-    public ExtensionInstance provide(final RenderContext runtimeContext) {
-
-        final XSSAPI xssapi = obtainAPI(runtimeContext.getBindings());
-
-        return new ExtensionInstance() {
-            @Override
-            public Object call(Object... arguments) {
-                if (arguments.length < 2) {
-                    throw new RuntimeExtensionException(String.format("Extension %s requires at least %d arguments", name(), 2));
-                }
-                Object original = arguments[0];
-                Object option = arguments[1];
-                Object hint = null;
-                if (arguments.length >= 3) {
-                    hint = arguments[2];
-                }
-                MarkupContext markupContext = null;
-                if (option != null && option instanceof String) {
-                    String name = (String) option;
-                    markupContext = MarkupContext.lookup(name);
-                }
-                if (markupContext == MarkupContext.UNSAFE) {
-                    return original;
-                }
-                if (markupContext == null) {
-                    log.warn("Expression context {} is invalid, expression will be replaced by the empty string", option);
-                    return "";
-                }
-                String text = runtimeContext.getObjectModel().coerceToString(original);
-                return applyXSSFilter(text, hint, markupContext);
-            }
-
-            private String applyXSSFilter(String text, Object hint, MarkupContext xssContext) {
-                if (xssContext.equals(MarkupContext.ATTRIBUTE) && hint instanceof String) {
-                    String attributeName = (String) hint;
-                    MarkupContext attrMarkupContext = getAttributeMarkupContext(attributeName);
-                    return applyXSSFilter(text, attrMarkupContext);
-                }
-                return applyXSSFilter(text, xssContext);
-            }
-
-            private String applyXSSFilter(String text, MarkupContext xssContext) {
-                switch (xssContext) {
-                    case ATTRIBUTE:
-                        return xssapi.encodeForHTMLAttr(text);
-                    case COMMENT:
-                    case TEXT:
-                        return xssapi.encodeForHTML(text);
-                    case ATTRIBUTE_NAME:
-                        return escapeAttributeName(text);
-                    case NUMBER:
-                        return xssapi.getValidLong(text, 0).toString();
-                    case URI:
-                        return xssapi.getValidHref(text);
-                    case SCRIPT_TOKEN:
-                    case SCRIPT_COMMENT:
-                        return xssapi.getValidJSToken(text, "");
-                    case STYLE_TOKEN:
-                        return xssapi.getValidStyleToken(text, "");
-                    case SCRIPT_STRING:
-                        return xssapi.encodeForJSString(text);
-                    case ELEMENT_NAME:
-                        return escapeElementName(text);
-                    case HTML:
-                        return xssapi.filterHTML(text);
-                }
-                return text; //todo: apply the rest of XSS filters
-            }
-        };
-    }
-
-    private String escapeElementName(String original) {
-        original = original.trim();
-        if (elementNameWhiteList.contains(original.toLowerCase())) {
-            return original;
-        }
-        return "";
-    }
-
-    private XSSAPI obtainAPI(Bindings bindings) {
-        SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get("request");
-        if (request == null) {
-            throw new CompilerException("Cannot obtain request from bindings");
-        }
-        return request.adaptTo(XSSAPI.class);
-    }
-
-    private MarkupContext getAttributeMarkupContext(String attributeName) {
-        if ("src".equalsIgnoreCase(attributeName) || "href".equalsIgnoreCase(attributeName)) {
-            return MarkupContext.URI;
-        }
-        return MarkupContext.ATTRIBUTE;
-    }
-
-    private String escapeAttributeName(String attributeName) {
-        if (attributeName == null) {
-            return null;
-        }
-        attributeName = attributeName.trim();
-        if (matchPattern(VALID_ATTRIBUTE, attributeName) && !MarkupUtils.isSensitiveAttribute(attributeName)) {
-            return attributeName;
-        }
-        return null;
-    }
-
-    private boolean matchPattern(Pattern pattern, String str) {
-        return pattern.matcher(str).matches();
-    }
-
-    static {
-        elementNameWhiteList.add("section");
-        elementNameWhiteList.add("nav");
-        elementNameWhiteList.add("article");
-        elementNameWhiteList.add("aside");
-        elementNameWhiteList.add("h1");
-        elementNameWhiteList.add("h2");
-        elementNameWhiteList.add("h3");
-        elementNameWhiteList.add("h4");
-        elementNameWhiteList.add("h5");
-        elementNameWhiteList.add("h6");
-        elementNameWhiteList.add("header");
-        elementNameWhiteList.add("footer");
-        elementNameWhiteList.add("address");
-        elementNameWhiteList.add("main");
-        elementNameWhiteList.add("p");
-        elementNameWhiteList.add("pre");
-        elementNameWhiteList.add("blockquote");
-        elementNameWhiteList.add("ol");
-        elementNameWhiteList.add("li");
-        elementNameWhiteList.add("dl");
-        elementNameWhiteList.add("dt");
-        elementNameWhiteList.add("dd");
-        elementNameWhiteList.add("figure");
-        elementNameWhiteList.add("figcaption");
-        elementNameWhiteList.add("div");
-        elementNameWhiteList.add("a");
-        elementNameWhiteList.add("em");
-        elementNameWhiteList.add("strong");
-        elementNameWhiteList.add("small");
-        elementNameWhiteList.add("s");
-        elementNameWhiteList.add("cite");
-        elementNameWhiteList.add("q");
-        elementNameWhiteList.add("dfn");
-        elementNameWhiteList.add("abbbr");
-        elementNameWhiteList.add("data");
-        elementNameWhiteList.add("time");
-        elementNameWhiteList.add("code");
-        elementNameWhiteList.add("var");
-        elementNameWhiteList.add("samp");
-        elementNameWhiteList.add("kbd");
-        elementNameWhiteList.add("sub");
-        elementNameWhiteList.add("sup");
-        elementNameWhiteList.add("i");
-        elementNameWhiteList.add("b");
-        elementNameWhiteList.add("u");
-        elementNameWhiteList.add("mark");
-        elementNameWhiteList.add("ruby");
-        elementNameWhiteList.add("rt");
-        elementNameWhiteList.add("rp");
-        elementNameWhiteList.add("bdi");
-        elementNameWhiteList.add("bdo");
-        elementNameWhiteList.add("span");
-        elementNameWhiteList.add("br");
-        elementNameWhiteList.add("wbr");
-        elementNameWhiteList.add("ins");
-        elementNameWhiteList.add("del");
-        elementNameWhiteList.add("table");
-        elementNameWhiteList.add("caption");
-        elementNameWhiteList.add("colgroup");
-        elementNameWhiteList.add("col");
-        elementNameWhiteList.add("tbody");
-        elementNameWhiteList.add("thead");
-        elementNameWhiteList.add("tfoot");
-        elementNameWhiteList.add("tr");
-        elementNameWhiteList.add("td");
-        elementNameWhiteList.add("th");
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ClassUseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ClassUseProvider.java
deleted file mode 100644
index 0bb9f21..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ClassUseProvider.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine.extension.use;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.script.Bindings;
-import javax.servlet.ServletRequest;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-import org.apache.sling.commons.classloader.DynamicClassLoaderManager;
-
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-import org.apache.sling.scripting.sightly.api.UseProviderComponent;
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-
-/**
- * Interprets the identifier as a class name and tries to load that class
- * using a dynamic class loader
- */
-@Component
-@Service(UseProvider.class)
-@Property(name = UseProviderComponent.PRIORITY, intValue = 0)
-public class ClassUseProvider extends UseProviderComponent {
-
-    @Override
-    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
-        Bindings globalBindings = renderContext.getBindings();
-        Bindings bindings = merge(globalBindings, arguments);
-        SlingScriptHelper sling = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-        Resource resource = (Resource) bindings.get(SlingBindings.RESOURCE);
-        final SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
-        Map<String, Object> overrides = setRequestAttributes(request, arguments);
-        
-        DynamicClassLoaderManager classLoaderManager = sling.getService(DynamicClassLoaderManager.class);
-        Object obj;
-        try {
-            Class<?> cls = classLoaderManager.getDynamicClassLoader().loadClass(identifier);
-            obj = resource.adaptTo(cls);
-            if (obj == null) {
-                obj = request.adaptTo(cls);
-            }
-        } catch (ClassNotFoundException e) {
-            obj = null;
-        } finally {
-            resetRequestAttribute(request, overrides);
-        }
-        return ProviderOutcome.notNullOrFailure(obj);
-    }
-
-    private Map<String, Object> setRequestAttributes(ServletRequest request, Bindings arguments) {
-        Map<String, Object> overrides = new HashMap<String, Object>();
-        for (Map.Entry<String, Object> entry : arguments.entrySet()) {
-            String key = entry.getKey();
-            Object value = entry.getValue();
-            Object oldValue = request.getAttribute(key);
-            if (oldValue != null) {
-                overrides.put(key, oldValue);
-            } else {
-                overrides.put(key, NULL);
-            }
-            request.setAttribute(key, value);
-        }
-        return overrides;
-    }
-
-    private void resetRequestAttribute(ServletRequest request, Map<String, Object> overrides) {
-        for (Map.Entry<String, Object> entry : overrides.entrySet()) {
-            String key = entry.getKey();
-            Object value = entry.getValue();
-            if (value == NULL) {
-                request.removeAttribute(key);
-            } else {
-                request.setAttribute(key, value);
-            }
-        }
-    }
-
-    private static final Object NULL = new Object();
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/PojoUseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/PojoUseProvider.java
deleted file mode 100644
index 89b1f54..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/PojoUseProvider.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine.extension.use;
-
-import javax.script.Bindings;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceResolverFactory;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.ResourceResolution;
-import org.apache.sling.scripting.sightly.api.Use;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-import org.apache.sling.scripting.sightly.api.UseProviderComponent;
-import org.apache.sling.scripting.sightly.compiler.SightlyCompileService;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Provider which instantiates POJOs.
- */
-@Component
-@Service(UseProvider.class)
-@Property(name = UseProviderComponent.PRIORITY, intValue = 10)
-public class PojoUseProvider extends UseProviderComponent {
-
-    private final Logger LOG = LoggerFactory.getLogger(PojoUseProvider.class);
-
-    @Reference
-    private SightlyCompileService sightlyCompileService = null;
-
-    @Override
-    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
-        Bindings globalBindings = renderContext.getBindings();
-        Bindings bindings = merge(globalBindings, arguments);
-        SlingScriptHelper sling = ScriptEvalUtils.getHelper(bindings);
-        ResourceResolverFactory rrf = sling.getService(ResourceResolverFactory.class);
-        ResourceResolver adminResolver = null;
-        try {
-            adminResolver = rrf.getAdministrativeResourceResolver(null);
-            Resource resource = ResourceResolution.resolveComponentForRequest(adminResolver, sling.getRequest());
-            Object result = sightlyCompileService.getInstance(resource, identifier, false);
-            if (result instanceof Use) {
-                ((Use) result).init(bindings);
-            }
-            return ProviderOutcome.notNullOrFailure(result);
-        } catch (Exception e) {
-            LOG.error(String.format("Can't instantiate %s POJO.", identifier), e);
-            return ProviderOutcome.failure();
-        } finally {
-            if (adminResolver != null) {
-                adminResolver.close();
-            }
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/RenderUnitProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/RenderUnitProvider.java
deleted file mode 100644
index cbb7181..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/RenderUnitProvider.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine.extension.use;
-
-import javax.script.Bindings;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RenderUnit;
-import org.apache.sling.scripting.sightly.api.UnitLocator;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-import org.apache.sling.scripting.sightly.api.UseProviderComponent;
-import org.apache.sling.scripting.sightly.engine.SightlyScriptEngineFactory;
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.RenderUnit;
-import org.apache.sling.scripting.sightly.api.UnitLocator;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-
-/**
- * Interprets identifiers as paths to other Sightly templates
- */
-@Component
-@Service(UseProvider.class)
-public class RenderUnitProvider extends UseProviderComponent {
-
-    @Override
-    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
-        if (identifier.endsWith("." + SightlyScriptEngineFactory.EXTENSION)) {
-            UnitLocator unitLocator = renderContext.getUnitLocator();
-            RenderUnit renderUnit = unitLocator.locate(identifier);
-            return ProviderOutcome.notNullOrFailure(renderUnit);
-        }
-        return ProviderOutcome.failure();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptEvalUtils.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptEvalUtils.java
deleted file mode 100644
index efa9dc8..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptEvalUtils.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.extension.use;
-
-import javax.script.Bindings;
-
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-
-import org.apache.sling.scripting.sightly.api.ResourceResolution;
-import org.apache.sling.scripting.sightly.api.SightlyUseException;
-
-/**
- * Utilities for script evaluation
- */
-public class ScriptEvalUtils {
-
-    public static SlingScriptHelper getHelper(Bindings bindings) {
-        return (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-    }
-
-    public static Resource locateScriptResource(ResourceResolver resourceResolver, SlingScriptHelper sling, String script) {
-        Resource result = null;
-        if (script.startsWith("/")) {
-            result = resourceResolver.getResource(script);
-        }
-        if (result == null) {
-            Resource componentResource = ResourceResolution.resolveComponentForRequest(resourceResolver, sling.getRequest());
-            result = ResourceResolution.resolveComponentRelative(resourceResolver, componentResource, script);
-        }
-        if (result != null) {
-            checkSearchPath(result, resourceResolver);
-        }
-        return result;
-    }
-
-    private static void checkSearchPath(Resource resource, ResourceResolver resourceResolver) {
-        String resourcePath = resource.getPath();
-        for (String path : resourceResolver.getSearchPath()) {
-            if (resourcePath.startsWith(path)) {
-                return;
-            }
-        }
-        throw new SightlyUseException("Use plugin cannot access path: " + resource.getPath());
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptUseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptUseProvider.java
deleted file mode 100644
index 4263535..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/ScriptUseProvider.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine.extension.use;
-
-import javax.script.Bindings;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.resource.LoginException;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceResolverFactory;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScript;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.SightlyUseException;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-import org.apache.sling.scripting.sightly.api.UseProviderComponent;
-
-/**
- * Use provider that interprets the identifier as a script path, and runs the respective script using a script engine that matches the
- * script extension.
- *
- * This provider returns a non-failure outcome only if the evaluated script actually returns something. For more details check the
- * implementation of the {@link SlingScript#eval(SlingBindings)} method for the available script engines from your platform.
- */
-@Component
-@Service(UseProvider.class)
-@Property(name = UseProviderComponent.PRIORITY, intValue = 15)
-public class ScriptUseProvider extends UseProviderComponent {
-
-    private static final Logger log = LoggerFactory.getLogger(ScriptUseProvider.class);
-
-    @Reference
-    private ResourceResolverFactory rrf = null;
-
-    @Override
-    public ProviderOutcome provide(String scriptName, RenderContext renderContext, Bindings arguments) {
-        Bindings globalBindings = renderContext.getBindings();
-        Bindings bindings = merge(globalBindings, arguments);
-        String extension = scriptExtension(scriptName);
-        if (extension == null) {
-            return ProviderOutcome.failure();
-        }
-        SlingScriptHelper sling = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-        ResourceResolver adminResolver = null;
-        try {
-            adminResolver = rrf.getAdministrativeResourceResolver(null);
-            if (adminResolver == null) {
-                log.warn("Cannot obtain administrative resource resolver for " + scriptName);
-                return ProviderOutcome.failure();
-            }
-            Resource scriptResource = ScriptEvalUtils.locateScriptResource(adminResolver, sling, scriptName);
-            if (scriptResource == null) {
-                log.debug("Path does not match an existing resource: {}", scriptName);
-                return ProviderOutcome.failure();
-            }
-            return evalScript(scriptResource, bindings);
-        } catch (LoginException e) {
-            throw new SightlyUseException(e);
-        } finally {
-            if (adminResolver != null) {
-                adminResolver.close();
-            }
-        }
-
-    }
-
-    private ProviderOutcome evalScript(Resource scriptResource, Bindings bindings) {
-        SlingScript slingScript = scriptResource.adaptTo(SlingScript.class);
-        if (slingScript == null) {
-            return ProviderOutcome.failure();
-        }
-        SlingBindings slingBindings = new SlingBindings();
-        slingBindings.putAll(bindings);
-        Object scriptEval = slingScript.eval(slingBindings);
-        return ProviderOutcome.notNullOrFailure(scriptEval);
-    }
-
-    private String scriptExtension(String path) {
-        String extension = StringUtils.substringAfterLast(path, ".");
-        if (StringUtils.isEmpty(extension)) {
-            extension = null;
-        }
-        return extension;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/UseRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/UseRuntimeExtension.java
deleted file mode 100644
index 787754c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/extension/use/UseRuntimeExtension.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.engine.extension.use;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-import javax.script.Bindings;
-import javax.script.SimpleBindings;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.ReferenceCardinality;
-import org.apache.felix.scr.annotations.ReferencePolicy;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionComponent;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionException;
-import org.apache.sling.scripting.sightly.api.SightlyUseException;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-import org.apache.sling.scripting.sightly.plugin.UsePlugin;
-
-/**
- * Runtime extension for the USE plugin
- */
-@Component
-@Service(RuntimeExtension.class)
-@Properties(
-        @Property(name = RuntimeExtensionComponent.SCR_PROP_NAME, value = UsePlugin.FUNCTION_NAME)
-)
-@Reference(
-        policy = ReferencePolicy.DYNAMIC,
-        referenceInterface = UseProvider.class,
-        name = "useProvider",
-        cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
-)
-public class UseRuntimeExtension extends RuntimeExtensionComponent {
-
-    private volatile List<UseProvider> providers = Collections.emptyList();
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public ExtensionInstance provide(final RenderContext renderContext) {
-        return new ExtensionInstance() {
-
-            @Override
-            public Object call(Object... arguments) {
-                if (arguments.length != 2) {
-                    throw new RuntimeExtensionException("Use extension requires two arguments");
-                }
-                String identifier = renderContext.getObjectModel().coerceToString(arguments[0]);
-                if (StringUtils.isEmpty(identifier)) {
-                    return null;
-                }
-                Map<String, Object> useArgumentsMap = renderContext.getObjectModel().coerceToMap(arguments[1]);
-                Bindings useArguments = new SimpleBindings(Collections.unmodifiableMap(useArgumentsMap));
-                for (UseProvider provider : providers) {
-                    ProviderOutcome outcome = provider.provide(identifier, renderContext, useArguments);
-                    if (outcome.isSuccess()) {
-                        return outcome.getResult();
-                    }
-                }
-                throw new SightlyUseException("No use provider could resolve identifier: " + identifier);
-            }
-        };
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    private void bindUseProvider(UseProvider provider) {
-        ArrayList<UseProvider> newProviders = new ArrayList<UseProvider>(providers);
-        newProviders.add(provider);
-        Collections.sort(newProviders);
-        providers = newProviders;
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    private void unbindUseProvider(UseProvider provider) {
-        ArrayList<UseProvider> newProviders = new ArrayList<UseProvider>(providers);
-        newProviders.remove(provider);
-        Collections.sort(newProviders);
-        providers = newProviders;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/runtime/UnitLocatorImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/runtime/UnitLocatorImpl.java
deleted file mode 100644
index 206b85c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/engine/runtime/UnitLocatorImpl.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.engine.runtime;
-
-import javax.script.Bindings;
-
-import org.apache.sling.api.SlingHttpServletRequest;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.scripting.sightly.api.RenderUnit;
-import org.apache.sling.scripting.sightly.api.ResourceResolution;
-import org.apache.sling.scripting.sightly.api.UnitLocator;
-import org.apache.sling.scripting.sightly.engine.UnitLoader;
-
-/**
- * Implementation for unit locator
- */
-public class UnitLocatorImpl implements UnitLocator {
-
-    private final UnitLoader unitLoader;
-    private final ResourceResolver resolver;
-    private final Bindings bindings;
-    private final Resource currentScriptResource;
-
-    public UnitLocatorImpl(UnitLoader unitLoader, ResourceResolver resourceResolver,
-                           Bindings bindings, Resource currentScriptResource) {
-        this.unitLoader = unitLoader;
-        this.resolver = resourceResolver;
-        this.bindings = bindings;
-        this.currentScriptResource = currentScriptResource;
-    }
-
-    @Override
-    public RenderUnit locate(String path) {
-        Resource resource = locateResource(path);
-        if (resource == null) {
-            return null;
-        }
-        return unitLoader.createUnit(resource, bindings);
-    }
-
-    private Resource locateResource(String script) {
-        SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
-        Resource resource = ResourceResolution.resolveComponentForRequest(resolver, request);
-        if (resource != null) {
-            resource = ResourceResolution.resolveComponentRelative(resolver, resource, script);
-        } else {
-            resource = ResourceResolution.resolveComponentRelative(resolver, currentScriptResource, script);
-        }
-        return resource;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/ExtensionInstance.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/ExtensionInstance.java
new file mode 100644
index 0000000..57a67dc
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/ExtensionInstance.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.extension;
+
+import aQute.bnd.annotation.ConsumerType;
+
+/**
+ * An instance of an {@link RuntimeExtension}
+ */
+@ConsumerType
+public interface ExtensionInstance {
+
+    /**
+     * Call this specific extension
+     * @param arguments - the arguments for the call
+     * @return - the result from the call
+     */
+    Object call(Object ... arguments);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtension.java
new file mode 100644
index 0000000..3cad665
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtension.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.extension;
+
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+import aQute.bnd.annotation.ConsumerType;
+
+/**
+ * Extensions provided to the Sightly runtime
+ */
+@ConsumerType
+public interface RuntimeExtension {
+
+    String SCR_PROP_NAME = "org.apache.sling.scripting.sightly.extension.name";
+
+    /**
+     * Provide an instance of this extension
+     * @param renderContext - the runtime context
+     * @return an extension instance
+     */
+    ExtensionInstance provide(RenderContext renderContext);
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtensionException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtensionException.java
new file mode 100644
index 0000000..f920b68
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/RuntimeExtensionException.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.extension;
+
+import org.apache.sling.scripting.sightly.SightlyException;
+
+/**
+ * Exception thrown by runtime extensions
+ * @see RuntimeExtension
+ */
+public class RuntimeExtensionException extends SightlyException {
+
+    public RuntimeExtensionException() {
+    }
+
+    public RuntimeExtensionException(String message) {
+        super(message);
+    }
+
+    public RuntimeExtensionException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public RuntimeExtensionException(Throwable cause) {
+        super(cause);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/package-info.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/package-info.java
new file mode 100644
index 0000000..c1a6d5f
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/extension/package-info.java
@@ -0,0 +1,22 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+@Version("1.0.0")
+package org.apache.sling.scripting.sightly.extension;
+
+import aQute.bnd.annotation.Version;
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FilterComponent.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FilterComponent.java
deleted file mode 100644
index 81ddc9f..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FilterComponent.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.filter;
-
-import java.util.Dictionary;
-
-import org.apache.felix.scr.annotations.Activate;
-import org.apache.sling.commons.osgi.PropertiesUtil;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.osgi.service.component.ComponentContext;
-
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-
-/**
- * Filters implemented as components.
- */
-public abstract class FilterComponent implements Filter {
-
-    public static final String PRIORITY = "org.apache.sling.scripting.sightly.filter.priority";
-    public static final int DEFAULT_PRIORITY = 100;
-
-    private int priority = DEFAULT_PRIORITY;
-
-    @Override
-    public int priority() {
-        return priority;
-    }
-
-    @Override
-    public int compareTo(Filter o) {
-        if (this.priority < o.priority()) {
-            return -1;
-        } else if (this.priority == o.priority()) {
-            return  0;
-        }
-        return 1;
-    }
-
-    @Activate
-    protected void activate(ComponentContext componentContext) {
-        Dictionary properties = componentContext.getProperties();
-        priority = PropertiesUtil.toInteger(properties.get(PRIORITY), DEFAULT_PRIORITY);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FormatFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FormatFilter.java
deleted file mode 100644
index 9c7c5ea..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/FormatFilter.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.filter;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionException;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-
-/**
- * Implementation for the format filter & runtime support.
- */
-@Component
-@Service({Filter.class, RuntimeExtension.class})
-public class FormatFilter extends FilterComponent implements RuntimeExtension {
-
-    public static final String FORMAT_OPTION = "format";
-    public static final String FORMAT_FUNCTION = "format";
-
-    private static final Pattern PLACEHOLDER_REGEX = Pattern.compile("\\{\\d}");
-
-    @Override
-    public Expression apply(Expression expression) {
-        //todo: if the expression is a string constant, we can produce the transformation at
-        //compile time, with no need of a runtime function
-        if (!expression.containsOption(FORMAT_OPTION)) {
-            return expression;
-        }
-        ExpressionNode argNode = expression.getOption(FORMAT_OPTION);
-        ExpressionNode formattedNode = new RuntimeCall(FORMAT_FUNCTION, expression.getRoot(), argNode);
-        return expression.withNode(formattedNode).removeOptions(FORMAT_OPTION);
-    }
-
-    @Override
-    public String name() {
-        return FORMAT_FUNCTION;
-    }
-
-    @Override
-    public ExtensionInstance provide(RenderContext renderContext) {
-        final Dynamic dynamic = new Dynamic(renderContext.getObjectModel());
-
-        return new ExtensionInstance() {
-            @Override
-            public Object call(Object... arguments) {
-                if (arguments.length != 2) {
-                    throw new RuntimeExtensionException("Format function must be called with two arguments");
-                }
-                String source = dynamic.coerceToString(arguments[0]);
-                Object[] params = decodeParams(arguments[1]);
-                return replace(source, params);
-            }
-
-            private Object[] decodeParams(Object paramObj) {
-                if (dynamic.isCollection(paramObj)) {
-                    return dynamic.coerceToCollection(paramObj).toArray();
-                }
-                return new Object[] {paramObj};
-            }
-
-            private String replace(String source, Object[] params) {
-                Matcher matcher = PLACEHOLDER_REGEX.matcher(source);
-                StringBuilder builder = new StringBuilder();
-                int lastPos = 0;
-                boolean matched = true;
-                while (matched) {
-                    matched = matcher.find();
-                    if (matched) {
-                        int paramIndex = placeholderIndex(matcher.group());
-                        String replacement = param(params, paramIndex);
-                        int matchStart = matcher.start();
-                        int matchEnd = matcher.end();
-                        builder.append(source, lastPos, matchStart).append(replacement);
-                        lastPos = matchEnd;
-                    }
-                }
-                builder.append(source, lastPos, source.length());
-                return builder.toString();
-            }
-
-            private String param(Object[] params, int index) {
-                if (index >= 0 && index < params.length) {
-                    return dynamic.coerceToString(params[index]);
-                }
-                return "";
-            }
-
-            private int placeholderIndex(String placeholder) {
-                return Integer.parseInt(placeholder.substring(1, placeholder.length() - 1));
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/I18nFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/I18nFilter.java
deleted file mode 100644
index c0d4aa1..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/I18nFilter.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.filter;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NullLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-
-/**
- * Filter for i18n translation
- */
-@Component
-@Service(Filter.class)
-@Property(name = FilterComponent.PRIORITY, intValue = 90)
-public class I18nFilter extends FilterComponent {
-
-    public static final String FUNCTION = "i18nTranslation";
-
-    public static final String I18N_OPTION = "i18n";
-    public static final String HINT_OPTION = "hint";
-    public static final String LOCALE_OPTION = "locale";
-
-    @Override
-    public Expression apply(Expression expression) {
-        if (!expression.containsOption(I18N_OPTION)) {
-            return expression;
-        }
-        ExpressionNode hint = option(expression, HINT_OPTION);
-        ExpressionNode locale = option(expression, LOCALE_OPTION);
-        ExpressionNode translation = new RuntimeCall(FUNCTION, expression.getRoot(), locale, hint);
-        return expression.withNode(translation).removeOptions(HINT_OPTION, LOCALE_OPTION);
-    }
-
-    private ExpressionNode option(Expression expression, String optionName) {
-        ExpressionNode node = expression.getOption(optionName);
-        if (node == null) {
-            return NullLiteral.INSTANCE;
-        }
-        return node;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/JoinFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/JoinFilter.java
deleted file mode 100644
index e3723d4..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/JoinFilter.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.filter;
-
-import java.util.Collection;
-import java.util.Iterator;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionException;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.api.ExtensionInstance;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.RuntimeExtension;
-import org.apache.sling.scripting.sightly.api.RuntimeExtensionException;
-import org.apache.sling.scripting.sightly.common.Dynamic;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-
-/**
- * Filter providing support for the {@code join} option applied to arrays.
- */
-@Component
-@Service({Filter.class, RuntimeExtension.class})
-public class JoinFilter extends FilterComponent implements RuntimeExtension {
-
-    public static final String JOIN_OPTION = "join";
-    public static final String JOIN_FUNCTION = "join";
-
-    @Override
-    public Expression apply(Expression expression) {
-        if (!expression.containsOption(JOIN_OPTION)) {
-            return expression;
-        }
-        ExpressionNode argumentNode = expression.getOption(JOIN_OPTION);
-        ExpressionNode joinResult = new RuntimeCall(JOIN_FUNCTION, expression.getRoot(), argumentNode);
-        return expression.withNode(joinResult).removeOptions(JOIN_OPTION);
-    }
-
-    @Override
-    public String name() {
-        return JOIN_FUNCTION;
-    }
-
-    @Override
-    public ExtensionInstance provide(RenderContext renderContext) {
-        final Dynamic dynamic = new Dynamic(renderContext.getObjectModel());
-
-        return new ExtensionInstance() {
-            @Override
-            public Object call(Object... arguments) {
-                if (arguments.length != 2) {
-                    throw new RuntimeExtensionException("Join function must be called with two arguments.");
-                }
-                Collection<?> collection = dynamic.coerceToCollection(arguments[0]);
-                String joinString = dynamic.coerceToString(arguments[1]);
-                return join(collection, joinString);
-            }
-
-            private String join(Collection<?> collection, String joinString) {
-                StringBuilder sb = new StringBuilder();
-                Iterator<?> iterator = collection.iterator();
-                while (iterator.hasNext()) {
-                    String element = dynamic.coerceToString(iterator.next());
-                    sb.append(element);
-                    if (iterator.hasNext()) {
-                        sb.append(joinString);
-                    }
-                }
-                return sb.toString();
-            }
-        };
-
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/XSSFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/XSSFilter.java
deleted file mode 100644
index e0e658c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/filter/XSSFilter.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.filter;
-
-import java.util.Map;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.Filter;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-
-/**
- * XSS filter implementation
- */
-@Component
-@Service(Filter.class)
-@Property(name = FilterComponent.PRIORITY, intValue = 110)
-public class XSSFilter extends FilterComponent {
-
-    public static final String FUNCTION_NAME = "xss";
-
-    @Override
-    public Expression apply(Expression expression) {
-        ExpressionNode node = expression.getRoot();
-        Map<String, ExpressionNode> options = expression.getOptions();
-        ExpressionNode context = options.get(Syntax.CONTEXT_OPTION);
-        if (context != null) {
-            return new Expression(new RuntimeCall(FUNCTION_NAME, node, context), options);
-        }
-        return expression;
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/MarkupUtils.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/MarkupUtils.java
deleted file mode 100644
index 2ede345..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/MarkupUtils.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.html;
-
-import java.util.regex.Pattern;
-
-/**
- * Utility methods related to markup
- */
-public class MarkupUtils {
-
-    private static final Pattern ATTRIBUTE_BLACKLIST = Pattern.compile("^(style|(on.*))$", Pattern.CASE_INSENSITIVE);
-
-    /**
-     * Attributes which should not be generated by Sightly
-     * @param name the name of the attribute
-     * @return if the attribute is sensitive or not
-     */
-    public static boolean isSensitiveAttribute(String name) {
-        return ATTRIBUTE_BLACKLIST.matcher(name).matches();
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/AttributeList.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/AttributeList.java
deleted file mode 100644
index 2339729..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/AttributeList.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom;
-
-import java.util.Iterator;
-
-/**
- * Contains the list of attributes inside an HTML tag.
- */
-public interface AttributeList {
-
-    /**
-     * Return the count of attributes
-     * @return count of attributes
-     */
-    int attributeCount();
-
-    /**
-     * Return the list of attribute names
-     * @return <code>Iterator</code> iterating over the attribute names
-     */
-    Iterator<String> attributeNames();
-
-    /**
-     * Return a flag indicating whether a specified attribute exists
-     * @return <code>true</code> if the specified attribute exists,
-     * <code>false</code> otherwise
-     */
-    boolean containsAttribute(String name);
-
-    /**
-     * Return an attribute's value, given its name or <code>null</code>
-     * if the attribute cannot be found.
-     * @param name   attribute name
-     * @return an attribute's value
-     */
-    String getValue(String name);
-
-    /**
-     * Return an attribute's quote character, given its name or <code>0</code>
-     * if the attribute cannot be found.
-     * @param name   attribute name
-     * @return an attribute's quote character
-     */
-    char getQuoteChar(String name);
-
-    /**
-     * Return an attribute's value, already surrounded with the quotes
-     * originally in place. Returns <code>null</code> if the attribute
-     * cannot be found
-     * @param name   attribute name
-     * @return an attribute's value
-     */
-    String getQuotedValue(String name);
-
-    /**
-     * Set an attribute's value. If the value is <code>null</code>, this
-     * is semantically different to a {@link #removeValue(String)}.
-     *
-     * @param name      attribute name
-     * @param value     attribute value
-     */
-    void setValue(String name, String value);
-
-    /**
-     * Remove an attribute's value.
-     * @param name      attribute name
-     */
-    void removeValue(String name);
-
-    /**
-     * Return a flag indicating whether this object was modified.
-     * @return <code>true</code> if the object was modified
-     *         <code>false</code> otherwise
-     */
-    boolean isModified();
-}
\ No newline at end of file
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/DocumentHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/DocumentHandler.java
deleted file mode 100644
index b8a8ea3..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/DocumentHandler.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom;
-
-import java.io.IOException;
-
-
-/**
- * Invoked by the <code>HTMLParser</code> when elements are scanned.
- */
-public interface DocumentHandler {
-
-    /**
-     * Receive notification of unparsed character data.
-     */
-    void onCharacters(char[] ch, int off, int len) throws IOException;
-
-    void onComment(String characters) throws IOException;
-
-    /**
-     * Receive notification of the beginning of an element.
-     * @param name     tag name
-     * @param attList  attribute list
-     * @param endSlash flag indicating whether the element is closed with
-     *                 an ending slash (xhtml-compliant)
-     */
-    void onStartElement(String name, AttributeList attList, boolean endSlash)
-    throws IOException;
-
-    /**
-     * Receive notification of the end of an element.
-     * @param name tag name
-     */
-    void onEndElement(String name)
-    throws IOException;
-
-    /**
-     * Receive notification of parsing start.
-     */
-    void onStart() throws IOException;
-
-    /**
-     * Receive notification of parsing end.
-     */
-    void onEnd() throws IOException;
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParser.java
deleted file mode 100644
index 6495210..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParser.java
+++ /dev/null
@@ -1,468 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom;
-
-import java.io.CharArrayWriter;
-import java.io.IOException;
-import java.io.Reader;
-
-/**
- * HTML parser. Invokes a <code>DocumentHandler</code> whenever an event occurs.
- */
-public final class HtmlParser {
-
-    /** Internal character buffer */
-    private final CharArrayWriter buffer = new CharArrayWriter(256);
-
-    /** Tag tokenizer */
-    private final TagTokenizer tokenizer = new TagTokenizer();
-
-    /** Tag name buffer */
-    private final CharArrayWriter tagNameBuffer = new CharArrayWriter(30);
-
-    /** Tag name */
-    private String tagName;
-
-    /** Registered document handler */
-    private final DocumentHandler documentHandler;
-
-    private enum PARSE_STATE {
-        OUTSIDE,
-        TAG,
-        SCRIPT,
-        COMMENT,
-        STRING,
-        EXPRESSION
-    }
-
-    /** Tag type constant */
-    private final static int TT_NONE = 0;
-
-    /** Tag type constant */
-    private final static int TT_MAYBE = 1;
-
-    /** Tag type constant */
-    private final static int TT_TAG = 2;
-
-    /** Expression state constant */
-    private final static int EXPR_NONE = 0;
-
-    /** Expression state constant */
-    private final static int EXPR_MAYBE = 1;
-
-    /** Parse state */
-    private PARSE_STATE parseState = PARSE_STATE.OUTSIDE;
-
-    /** Parse substate */
-    private int parseSubState;
-
-    /** Previous parse state */
-    private PARSE_STATE prevParseState;
-
-    /** Current tag type */
-    private int tagType;
-
-    /** Expression type */
-    private int exprType;
-
-    /** Quote character */
-    private char quoteChar;
-
-    public static void parse(final Reader reader, final DocumentHandler documentHandler)
-    throws IOException {
-        final HtmlParser parser = new HtmlParser(documentHandler);
-        parser.parse(reader);
-    }
-
-    /**
-     * Default constructor.
-     */
-    private HtmlParser(final DocumentHandler documentHandler) {
-        this.documentHandler = documentHandler;
-    }
-
-    private void parse(final Reader reader)
-    throws IOException {
-        try {
-            this.documentHandler.onStart();
-            final char[] readBuffer = new char[2048];
-            int readLen = 0;
-            while ( (readLen = reader.read(readBuffer)) > 0 ) {
-                this.update(readBuffer, readLen);
-            }
-            this.flushBuffer();
-            this.documentHandler.onEnd();
-        } finally {
-            try {
-                reader.close();
-            } catch ( final IOException ignore) {
-                // ignore
-            }
-        }
-    }
-
-    /**
-     * Feed characters to the parser.
-     *
-     * @param buf character buffer
-     * @param len length of affected buffer
-     */
-    private void update(final char[] buf, int len) throws IOException {
-        int start = 0;
-        final int end = len;
-
-        for (int curr = start; curr < end; curr++) {
-            final char c = buf[curr];
-
-            switch (parseState) {
-            case OUTSIDE:
-                if (c == '<') {
-                    if (curr > start) {
-                        documentHandler.onCharacters(buf, start, curr - start);
-                    }
-                    start = curr;
-                    parseState = PARSE_STATE.TAG;
-                    parseSubState = 0;
-                    tagType = TT_MAYBE;
-                    resetTagName();
-                } else if (c == '$') {
-                    exprType = EXPR_MAYBE;
-                    parseState = PARSE_STATE.EXPRESSION;
-                }
-                break;
-            case TAG:
-                switch (parseSubState) {
-                case -1:
-                    if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        prevParseState = parseState;
-                        parseState = PARSE_STATE.STRING;
-                        parseSubState = -1;
-                    } else if (c == '>') {
-                        parseState = PARSE_STATE.OUTSIDE;
-                    }
-                    break;
-                case 0:
-                    if (c == '!') {
-                        parseState = PARSE_STATE.COMMENT;
-                        parseSubState = 0;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    } else if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        prevParseState = parseState;
-                        parseState = PARSE_STATE.STRING;
-                        parseSubState = -1;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    } else if (c == '>') {
-                        parseState = PARSE_STATE.OUTSIDE;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    } else if (!Character.isWhitespace(c)) {
-                        tagNameBuffer.write(c);
-                        parseSubState = 1;
-                    } else {
-                        parseSubState = -1;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    }
-                    break;
-                case 1:
-                    if (c == '"' || c == '\'') {
-                        tagType = TT_TAG;
-                        parseSubState = 2;
-                        quoteChar = c;
-                        prevParseState = parseState;
-                        parseState = PARSE_STATE.STRING;
-                    } else if (c == '>') {
-                        parseState = processTag(buf, start, curr - start + 1) ? PARSE_STATE.SCRIPT : PARSE_STATE.OUTSIDE;
-                        start = curr + 1;
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                    } else if (Character.isWhitespace(c)) {
-                        tagType = TT_TAG;
-                        parseSubState = 2;
-                    } else {
-                        tagNameBuffer.write(c);
-                    }
-                    break;
-                case 2:
-                    if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        prevParseState = parseState;
-                        parseState = PARSE_STATE.STRING;
-                    } else if (c == '>') {
-                        if (tagType == TT_TAG) {
-                            parseState = processTag(buf, start, curr - start + 1) ? PARSE_STATE.SCRIPT : PARSE_STATE.OUTSIDE;
-                            start = curr + 1;
-                        } else {
-                            flushBuffer();
-                            parseState = "SCRIPT".equalsIgnoreCase(getTagName()) ? PARSE_STATE.SCRIPT : PARSE_STATE.OUTSIDE;
-                        }
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                    }
-                    break;
-                }
-                break;
-            case COMMENT:
-                switch (parseSubState) {
-                case 0:
-                    if (c == '-') {
-                        parseSubState++;
-                    } else if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        prevParseState = PARSE_STATE.TAG;
-                        parseState = PARSE_STATE.STRING;
-                        parseSubState = -1;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    } else if (c == '>') {
-                        parseState = PARSE_STATE.OUTSIDE;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    } else {
-                        parseState = PARSE_STATE.TAG;
-                        parseSubState = -1;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    }
-                    break;
-                case 1:
-                    if (c == '-') {
-                        parseSubState++;
-                    } else if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        prevParseState = PARSE_STATE.TAG;
-                        parseState = PARSE_STATE.STRING;
-                        parseSubState = -1;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    } else if (c == '>') {
-                        parseState = PARSE_STATE.OUTSIDE;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    } else {
-                        parseState = PARSE_STATE.TAG;
-                        parseSubState = -1;
-                        tagType = TT_NONE;
-                        flushBuffer();
-                    }
-                    break;
-                case 2:
-                    if (c == '-') {
-                        parseSubState++;
-                    }
-                    break;
-                case 3:
-                    if (c == '-') {
-                        parseSubState++;
-                    } else {
-                        parseSubState = 2;
-                    }
-                    break;
-                case 4:
-                    if (c == '>') {
-                        parseState = PARSE_STATE.OUTSIDE;
-                        documentHandler.onComment(new String(buf, start, curr - start + 1));
-                        start = curr + 1;
-                    } else {
-                        parseSubState = 2;
-                    }
-                    break;
-                }
-                break;
-
-            case SCRIPT:
-                switch (parseSubState) {
-                case 0:
-                    if (c == '<') {
-                        if (curr > start) {
-                            documentHandler.onCharacters(buf, start, curr - start);
-                        }
-                        start = curr;
-                        tagType = TT_MAYBE;
-                        parseSubState++;
-                    }
-                    break;
-                case 1:
-                    if (c == '/') {
-                        parseSubState++;
-                    } else {
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                        flushBuffer();
-                    }
-                    break;
-                case 2:
-                    if (c == 'S' || c == 's') {
-                        parseSubState++;
-                    } else {
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                        flushBuffer();
-                    }
-                    break;
-                case 3:
-                    if (c == 'C' || c == 'c') {
-                        parseSubState++;
-                    } else {
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                        flushBuffer();
-                    }
-                    break;
-                case 4:
-                    if (c == 'R' || c == 'r') {
-                        parseSubState++;
-                    } else {
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                        flushBuffer();
-                    }
-                    break;
-                case 5:
-                    if (c == 'I' || c == 'i') {
-                        parseSubState++;
-                    } else {
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                        flushBuffer();
-                    }
-                    break;
-                case 6:
-                    if (c == 'P' || c == 'p') {
-                        parseSubState++;
-                    } else {
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                        flushBuffer();
-                    }
-                    break;
-                case 7:
-                    if (c == 'T' || c == 't') {
-                        parseSubState++;
-                    } else {
-                        tagType = TT_NONE;
-                        parseSubState = 0;
-                        flushBuffer();
-                    }
-                    break;
-                case 8:
-                    if (c == '>') {
-                        processTag(buf, start, curr - start + 1);
-                        start = curr + 1;
-                        tagType = TT_NONE;
-                        parseState = PARSE_STATE.OUTSIDE;
-                    }
-                    break;
-                }
-                break;
-
-            case STRING:
-                if (c == quoteChar) {
-                    parseState = prevParseState;
-                }
-                break;
-
-            case EXPRESSION:
-                if (exprType == EXPR_MAYBE && c != '{') {
-                    // not a valid expression
-                    if (c == '<') {
-                        //reset to process tag correctly
-                        curr--;
-                    }
-                    parseState = PARSE_STATE.OUTSIDE;
-                } else if (c == '}') {
-                    parseState = PARSE_STATE.OUTSIDE;
-                }
-                exprType = EXPR_NONE;
-                break;
-            }
-        }
-        if (start < end) {
-            if (tagType == TT_NONE) {
-                documentHandler.onCharacters(buf, start, end - start);
-            } else {
-                buffer.write(buf, start, end - start);
-            }
-        }
-    }
-
-    /**
-     * Clears the internal tagname buffer and cache
-     */
-    private void resetTagName() {
-        tagName = null;
-        tagNameBuffer.reset();
-    }
-
-    /**
-     * Returns the tagname scanned and resets the internal tagname buffer
-     *
-     * @return tagname
-     */
-    private String getTagName() {
-        if (tagName == null) {
-            tagName = tagNameBuffer.toString();
-        }
-        return tagName;
-    }
-
-    /**
-     * Flush internal buffer. This forces the parser to flush the characters
-     * still held in its internal buffer, if the parsing state allows.
-     */
-    private void flushBuffer() throws IOException {
-        if (buffer.size() > 0) {
-            final char[] chars = buffer.toCharArray();
-            documentHandler.onCharacters(chars, 0, chars.length);
-            buffer.reset();
-        }
-    }
-
-    /**
-     * Decompose a tag and feed it to the document handler.
-     *
-     * @param ch
-     *            character data
-     * @param off
-     *            offset where character data starts
-     * @param len
-     *            length of character data
-     */
-    private boolean processTag(char[] ch, int off, int len) throws IOException {
-        buffer.write(ch, off, len);
-
-        final char[] snippet = buffer.toCharArray();
-
-        tokenizer.tokenize(snippet, 0, snippet.length);
-        if (!tokenizer.endTag()) {
-            documentHandler.onStartElement(tokenizer.tagName(), tokenizer
-                    .attributes(), tokenizer
-                    .endSlash());
-        } else {
-            documentHandler.onEndElement(tokenizer.tagName());
-        }
-
-        buffer.reset();
-        return "SCRIPT".equalsIgnoreCase(tokenizer.tagName()) && !tokenizer.endSlash();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParserService.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParserService.java
deleted file mode 100644
index df46190..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/HtmlParserService.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom;
-
-import org.apache.sling.scripting.sightly.html.dom.template.Template;
-import org.apache.sling.scripting.sightly.html.dom.template.TemplateParser;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupHandler;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupParser;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupHandler;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.IOException;
-import java.io.StringReader;
-
-@Component
-@Properties({
-    @Property(name="service.description", value="Sightly Simple HTML parser"),
-    @Property(name="service.ranking", intValue=1000)
-})
-@Service(MarkupParser.class)
-public class HtmlParserService implements MarkupParser {
-
-    private static final Logger log = LoggerFactory.getLogger(HtmlParserService.class);
-
-    public void parse(String script, MarkupHandler handler) {
-        try {
-            final StringReader sr = new StringReader(script);
-            final TemplateParser parser = new TemplateParser();
-            final Template template = parser.parse(sr);
-            // walk through the tree and send events
-            TreeTraverser tree = new TreeTraverser(handler);
-            tree.traverse(template);
-        } catch (IOException e) {
-            log.error("Failed to parse Sightly template", e);
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TagTokenizer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TagTokenizer.java
deleted file mode 100644
index 97ad4c7..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TagTokenizer.java
+++ /dev/null
@@ -1,514 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom;
-
-import java.io.CharArrayWriter;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Set;
-
-/**
- * Tokenizes a snippet of characters into a structured tag/attribute name list.
- */
-class TagTokenizer {
-    /** Tag name buffer */
-    private final CharArrayWriter tagName = new CharArrayWriter(30);
-
-    /** Attribute name buffer */
-    private final CharArrayWriter attName = new CharArrayWriter(30);
-
-    /** Attribute value buffer */
-    private final CharArrayWriter attValue = new CharArrayWriter(30);
-
-    /** Internal property list */
-    private final AttributeListImpl attributes = new AttributeListImpl();
-
-    /** Parse state constant */
-    private final static int START = 0;
-
-    /** Parse state constant */
-    private final static int TAG = START + 1;
-
-    /** Parse state constant */
-    private final static int NAME = TAG + 1;
-
-    /** Parse state constant */
-    private final static int INSIDE = NAME + 1;
-
-    /** Parse state constant */
-    private final static int ATTNAME = INSIDE + 1;
-
-    /** Parse state constant */
-    private final static int EQUAL = ATTNAME + 1;
-
-    /** Parse state constant */
-    private final static int ATTVALUE = EQUAL + 1;
-
-    /** Parse state constant */
-    private final static int STRING = ATTVALUE + 1;
-
-    /** Parse state constant */
-    private final static int ENDSLASH = STRING + 1;
-
-    /** Parse state constant */
-    private final static int END = ENDSLASH + 1;
-
-    /** Parse state constant */
-    private final static int BETWEEN_ATTNAME = END + 1;
-
-    /** Quote character */
-    private char quoteChar = '"';
-
-    /** Flag indicating whether the tag scanned is an end tag */
-    private boolean endTag;
-
-    /** Flag indicating whether an ending slash was parsed */
-    private boolean endSlash;
-
-    /** temporary flag indicating if attribute has a value */
-    private boolean hasAttributeValue;
-
-    /**
-     * Scan characters passed to this parser
-     */
-    public void tokenize(char[] buf, int off, int len) {
-        reset();
-
-        int parseState = START;
-
-        for (int i = 0; i < len; i++) {
-            char c = buf[off + i];
-
-            switch (parseState) {
-                case START:
-                    if (c == '<') {
-                        parseState = TAG;
-                    }
-                    break;
-                case TAG:
-                    if (c == '/') {
-                        endTag = true;
-                        parseState = NAME;
-                    } else if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (Character.isWhitespace(c)) {
-                        parseState = INSIDE;
-                    } else {
-                        tagName.write(c);
-                        parseState = NAME;
-                    }
-                    break;
-                case NAME:
-                    if (Character.isWhitespace(c)) {
-                        parseState = INSIDE;
-                    } else if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (c == '>') {
-                        parseState = END;
-                    } else if (c == '/') {
-                        parseState = ENDSLASH;
-                    } else {
-                        tagName.write(c);
-                    }
-                    break;
-                case INSIDE:
-                    if (c == '>') {
-                        attributeEnded();
-                        parseState = END;
-                    } else if (c == '/') {
-                        attributeEnded();
-                        parseState = ENDSLASH;
-                    } else if (c == '"' || c == '\'') {
-                        attributeValueStarted();
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (c == '=') {
-                        parseState = EQUAL;
-                    } else if (!Character.isWhitespace(c)) {
-                        attName.write(c);
-                        parseState = ATTNAME;
-                    }
-                    break;
-                case ATTNAME:
-                    if (c == '>') {
-                        attributeEnded();
-                        parseState = END;
-                    } else if (c == '/') {
-                        attributeEnded();
-                        parseState = ENDSLASH;
-                    } else if (c == '=') {
-                        parseState = EQUAL;
-                    } else if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (Character.isWhitespace(c)) {
-                        parseState = BETWEEN_ATTNAME;
-                    } else {
-                        attName.write(c);
-                    }
-                    break;
-                case BETWEEN_ATTNAME:
-                    if (c == '>') {
-                        attributeEnded();
-                        parseState = END;
-                    } else if (c == '/') {
-                        attributeEnded();
-                        parseState = ENDSLASH;
-                    } else if (c == '"' || c == '\'') {
-                        attributeValueStarted();
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (c == '=') {
-                        parseState = EQUAL;
-                    } else if (!Character.isWhitespace(c)) {
-                        attributeEnded();
-                        attName.write(c);
-                        parseState = ATTNAME;
-                    }
-                    break;
-                case EQUAL:
-                    if (c == '>') {
-                        attributeEnded();
-                        parseState = END;
-                    } else if (c == '"' || c == '\'') {
-                        attributeValueStarted();
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (!Character.isWhitespace(c)) {
-                        attributeValueStarted();
-                        attValue.write(c);
-                        parseState = ATTVALUE;
-                    }
-                    break;
-                case ATTVALUE:
-                    if (Character.isWhitespace(c)) {
-                        attributeEnded();
-                        parseState = INSIDE;
-                    } else if (c == '"' || c == '\'') {
-                        attributeEnded();
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (c == '>') {
-                        attributeEnded();
-                        parseState = END;
-                    } else {
-                        attValue.write(c);
-                    }
-                    break;
-                case STRING:
-                    if (c == quoteChar) {
-                        attributeEnded();
-                        parseState = INSIDE;
-                    } else {
-                        attValue.write(c);
-                    }
-                    break;
-                case ENDSLASH:
-                    if (c == '>') {
-                        endSlash = true;
-                        parseState = END;
-                    } else if (c == '"' || c == '\'') {
-                        quoteChar = c;
-                        parseState = STRING;
-                    } else if (c != '/' && !Character.isWhitespace(c)) {
-                        attName.write(c);
-                        parseState = ATTNAME;
-                    } else {
-                        parseState = INSIDE;
-                    }
-                    break;
-                case END:
-                    break;
-
-            }
-        }
-    }
-
-    /**
-     * Return a flag indicating whether the tag scanned was an end tag
-     * @return <code>true</code> if it was an end tag, otherwise
-     *         <code>false</code>
-     */
-    public boolean endTag() {
-        return endTag;
-    }
-
-    /**
-     * Return a flag indicating whether an ending slash was scanned
-     * @return <code>true</code> if an ending slash was scanned, otherwise
-     *         <code>false</code>
-     */
-    public boolean endSlash() {
-        return endSlash;
-    }
-
-    /**
-     * Return the tagname scanned
-     * @return tag name
-     */
-    public String tagName() {
-        return tagName.toString();
-    }
-
-    /**
-     * Return the list of attributes scanned
-     * @return list of attributes
-     */
-    public AttributeList attributes() {
-        return attributes;
-    }
-
-    /**
-     * Reset the internal state of the tokenizer
-     */
-    private void reset() {
-        tagName.reset();
-        attributes.reset();
-        endTag = false;
-        endSlash = false;
-    }
-
-    /**
-     * Invoked when an attribute ends
-     */
-    private void attributeEnded() {
-        if (attName.size() > 0) {
-            if (hasAttributeValue) {
-                attributes.addAttribute(attName.toString(), attValue.toString(),
-                        quoteChar);
-            } else {
-                attributes.addAttribute(attName.toString(), quoteChar);
-
-            }
-            attName.reset();
-            attValue.reset();
-            hasAttributeValue = false;
-        }
-    }
-
-    /**
-     * Invoked when an attribute value starts
-     */
-    private void attributeValueStarted() {
-        hasAttributeValue = true;
-    }
-
-    /**
-     * Retransfers the tokenized tag data into html again
-     * @return the reassembled html string
-     */
-    public String toHtmlString() {
-        StringBuffer sb = new StringBuffer();
-        if (endTag) {
-            sb.append("</" + tagName());
-        } else {
-            sb.append("<" + tagName());
-            Iterator<String> attNames = attributes().attributeNames();
-            while (attNames.hasNext()) {
-                String attName = attNames.next();
-                String attValue = attributes().getQuotedValue(attName);
-
-                sb.append(" ");
-                sb.append(attName);
-                if (attValue != null) {
-                    sb.append('=');
-                    sb.append(attValue);
-                }
-            }
-            if (endSlash) {
-                sb.append(" /");
-            }
-        }
-        sb.append(">");
-        return sb.toString();
-    }
-}
-
-/**
- * Internal implementation of an <code>AttributeList</code>
- */
-class AttributeListImpl implements AttributeList {
-
-    /**
-     * Internal Value class
-     */
-    static class Value {
-
-        /**
-         * Create a new <code>Value</code> instance
-         */
-        public Value(char quoteChar, String value) {
-            this.quoteChar = quoteChar;
-            this.value = value;
-        }
-
-        /** Quote character */
-        public final char quoteChar;
-
-        /** Value itself */
-        public final String value;
-
-        /** String representation */
-        private String stringRep;
-
-        /**
-         * @see Object#toString()
-         */
-        @Override
-        public String toString() {
-            if (stringRep == null) {
-                stringRep = quoteChar + value + quoteChar;
-            }
-            return stringRep;
-        }
-    }
-
-    /** Attribute/Value pair map with case insensitives names */
-    private final Map<String, Value> attributes = new LinkedHashMap<String, Value>();
-
-    /** Attribute names, case sensitive */
-    private final Set<String> attributeNames = new LinkedHashSet<String>();
-
-    /** Flag indicating whether this object was modified */
-    private boolean modified;
-
-    /**
-     * Add an attribute/value pair to this attribute list
-     */
-    public void addAttribute(String name, String value, char quoteChar) {
-        attributes.put(name.toUpperCase(), new Value(quoteChar, value));
-        attributeNames.add(name);
-    }
-
-    /**
-     * Add an attribute/value pair to this attribute list
-     */
-    public void addAttribute(String name, char quoteChar) {
-        attributes.put(name.toUpperCase(), null);
-        attributeNames.add(name);
-    }
-
-    /**
-     * Empty this attribute list
-     */
-    public void reset() {
-        attributes.clear();
-        attributeNames.clear();
-        modified = false;
-    }
-
-    /**
-     * @see AttributeList#attributeCount
-     */
-    public int attributeCount() {
-        return attributes.size();
-    }
-
-    /**
-     * @see AttributeList#attributeNames
-     */
-    public Iterator<String> attributeNames() {
-        return attributeNames.iterator();
-    }
-
-    /**
-     * @see AttributeList#containsAttribute(String)
-     */
-    public boolean containsAttribute(String name) {
-        return attributes.containsKey(name.toUpperCase());
-    }
-
-    /**
-     * @see AttributeList#getValue(String)
-     */
-    public String getValue(String name) {
-        Value value = getValueEx(name);
-        if (value != null) {
-            return value.value;
-        }
-        return null;
-    }
-
-    /**
-     * @see AttributeList#getQuoteChar(java.lang.String)
-     */
-    public char getQuoteChar(String name) {
-        Value value = getValueEx(name);
-        if (value != null) {
-            return value.quoteChar;
-        }
-        return 0;
-    }
-
-    /**
-     * @see AttributeList#getQuotedValue(String)
-     */
-    public String getQuotedValue(String name) {
-        Value value = getValueEx(name);
-        if (value != null) {
-            return value.toString();
-        }
-        return null;
-    }
-
-    /**
-     * @see AttributeList#setValue(String, String)
-     */
-    public void setValue(String name, String value) {
-        if (value == null) {
-            removeValue(name);
-        } else {
-            Value old = getValueEx(name);
-            if (old == null) {
-                addAttribute(name, value, '"');
-                modified = true;
-            } else if (!old.value.equals(value)) {
-                addAttribute(name, value, old.quoteChar);
-                modified = true;
-            }
-        }
-    }
-
-    /**
-     * @see AttributeList#removeValue(String)
-     */
-    public void removeValue(String name) {
-        attributeNames.remove(name);
-        attributes.remove(name.toUpperCase());
-        modified = true;
-    }
-
-    /**
-     * @see AttributeList#isModified
-     */
-    public boolean isModified() {
-        return modified;
-    }
-
-    /**
-     * Return internal value structure
-     */
-    protected Value getValueEx(String name) {
-        return attributes.get(name.toUpperCase());
-    }
-}
\ No newline at end of file
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TreeTraverser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TreeTraverser.java
deleted file mode 100644
index 3869562..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/TreeTraverser.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom;
-
-import org.apache.sling.scripting.sightly.compiler.api.MarkupHandler;
-import org.apache.sling.scripting.sightly.html.dom.template.Template;
-import org.apache.sling.scripting.sightly.html.dom.template.TemplateElementNode;
-import org.apache.sling.scripting.sightly.html.dom.template.TemplateNode;
-import org.apache.sling.scripting.sightly.html.dom.template.TemplateTextNode;
-import org.apache.sling.scripting.sightly.html.dom.template.TemplateCommentNode;
-import org.apache.sling.scripting.sightly.html.dom.template.TemplateAttribute;
-import org.apache.sling.scripting.sightly.compiler.api.MarkupHandler;
-
-public class TreeTraverser {
-
-    private final MarkupHandler handler;
-
-    public TreeTraverser(MarkupHandler handler) {
-        this.handler = handler;
-    }
-
-    public void traverse(Template template) {
-        traverseNode(template);
-        this.handler.onDocumentFinished();
-    }
-
-    private void traverseNode(TemplateNode node) {
-        if (node instanceof TemplateElementNode) {
-            traverseElement((TemplateElementNode) node);
-        } else if (node instanceof TemplateTextNode) {
-            traverseText((TemplateTextNode) node);
-        } else if (node instanceof TemplateCommentNode) {
-            traverseComment((TemplateCommentNode) node);
-        } else {
-            throw new IllegalArgumentException("Unknown node type");
-        }
-    }
-
-    private void traverseElement(TemplateElementNode elem) {
-        if ("ROOT".equalsIgnoreCase(elem.getName())) {
-            traverseChildren(elem);
-            return;
-        }
-        String tagName = elem.getName();
-
-        if (elem.isHasStartElement()) {
-            handler.onOpenTagStart("<" + tagName, tagName);
-            for (TemplateAttribute attribute : elem.getAttributes()) {
-                handler.onAttribute(attribute.getName(), attribute.getValue());
-            }
-            if (elem.isHasEndSlash()) {
-                handler.onOpenTagEnd("/>");
-            } else {
-                handler.onOpenTagEnd(">");
-            }
-        } else {
-            handler.onOpenTagStart("", tagName);
-            handler.onOpenTagEnd("");
-        }
-
-        traverseChildren(elem);
-
-        if (elem.isHasEndElement()) {
-            handler.onCloseTag("</" + elem.getName() + ">");
-        } else {
-            handler.onCloseTag("");
-        }
-    }
-
-    private void traverseText(TemplateTextNode textNode) {
-        handler.onText(textNode.getText());
-    }
-
-    private void traverseComment(TemplateCommentNode comment) {
-        handler.onComment(comment.getText());
-    }
-
-    private void traverseChildren(TemplateElementNode elem) {
-        for (TemplateNode node : elem.getChildren()) {
-            traverseNode(node);
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/Template.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/Template.java
deleted file mode 100644
index b83465d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/Template.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom.template;
-
-
-public class Template extends TemplateElementNode {
-
-    public Template() {
-        super("ROOT", false, null);
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateAttribute.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateAttribute.java
deleted file mode 100644
index d50885e..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateAttribute.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom.template;
-
-public class TemplateAttribute {
-
-    private final String name;
-
-    private final String value;
-
-    public TemplateAttribute(final String name, final String value) {
-        this.name = name;
-        this.value = value;
-    }
-
-    public String getName() {
-        return this.name;
-    }
-
-    public String getValue() {
-        return this.value;
-    }
-
-    public boolean hasValue() {
-        return value != null;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateCommentNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateCommentNode.java
deleted file mode 100644
index e6d14fc..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateCommentNode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom.template;
-
-public class TemplateCommentNode extends TemplateNode {
-
-    private final String text;
-
-    public TemplateCommentNode(final String t) {
-        this.text = t;
-    }
-
-    public String getText() {
-        return this.text;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateElementNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateElementNode.java
deleted file mode 100644
index 38ba9a4..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateElementNode.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom.template;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class TemplateElementNode extends TemplateNode {
-
-    private final String name;
-
-    private final boolean hasEndSlash;
-
-    private boolean hasEndElement = false;
-
-    private boolean hasStartElement = false;
-
-    private final List<TemplateAttribute> attributes;
-
-    private final List<TemplateNode> children = new ArrayList<TemplateNode>();
-
-    public TemplateElementNode(final String name,
-                               final boolean hasEndSlash,
-                               final List<TemplateAttribute> attributes) {
-        this.name = name;
-        this.hasEndSlash = hasEndSlash;
-        this.attributes = attributes;
-    }
-
-    public void setHasStartElement() {
-        this.hasStartElement = true;
-    }
-
-    public void setHasEndElement() {
-        this.hasEndElement = true;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public boolean isHasEndSlash() {
-        return hasEndSlash;
-    }
-
-    public boolean isHasStartElement() {
-        return hasStartElement;
-    }
-
-    public boolean isHasEndElement() {
-        return hasEndElement;
-    }
-
-    public List<TemplateAttribute> getAttributes() {
-        return attributes;
-    }
-
-    public void addChild(final TemplateNode node) {
-        this.children.add(node);
-    }
-
-    public List<TemplateNode> getChildren() {
-        return this.children;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateNode.java
deleted file mode 100644
index b1bed8c..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateNode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom.template;
-
-public abstract class TemplateNode {
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateParser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateParser.java
deleted file mode 100644
index ce280d6..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateParser.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom.template;
-
-import org.apache.sling.scripting.sightly.html.dom.AttributeList;
-import org.apache.sling.scripting.sightly.html.dom.DocumentHandler;
-import org.apache.sling.scripting.sightly.html.dom.HtmlParser;
-
-import java.io.IOException;
-import java.io.Reader;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Deque;
-import java.util.ArrayDeque;
-
-/**
- * The template parser parses an HTML document and returns a reusable tree
- * representation.
- */
-public class TemplateParser {
-
-    /**
-     * Parse an html document
-     * @param reader to be parsed
-     * @throws IOException in case of any parsing error
-     *
-     * @return a Template
-     */
-    public Template parse(final Reader reader) throws IOException {
-        final TemplateParserContext context = new TemplateParserContext();
-
-        HtmlParser.parse(reader, context);
-
-        return context.getTemplate();
-    }
-
-    public static final class TemplateParserContext implements DocumentHandler {
-
-        /** Used for text/character events */
-        private StringBuilder textBuilder = new StringBuilder();
-
-        /** Element stack - root is the Template */
-        private final Deque<TemplateElementNode> elementStack = new ArrayDeque<TemplateElementNode>();
-
-        /** The template. */
-        private Template template;
-
-        public Template getTemplate() {
-            return this.template;
-        }
-
-        public void onStart() throws IOException {
-            this.template = new Template();
-            this.elementStack.push(this.template);
-        }
-
-        public void onEnd() throws IOException {
-            this.checkText();
-            this.elementStack.clear();
-        }
-
-        private void checkText() {
-            if (textBuilder.length() > 0) {
-                elementStack.peek().addChild(new TemplateTextNode(textBuilder.toString()));
-                this.textBuilder = new StringBuilder();
-            }
-        }
-
-        public void onStartElement(String name, AttributeList attList, boolean endSlash) {
-            this.checkText();
-            final List<TemplateAttribute> attrs = new ArrayList<TemplateAttribute>();
-            final Iterator<String> iter = attList.attributeNames();
-            while ( iter.hasNext() ) {
-                final String aName = iter.next();
-                final TemplateAttribute attr = new TemplateAttribute(aName, attList.getValue(aName));
-                attrs.add(attr);
-            }
-            final TemplateElementNode element = new TemplateElementNode(name, endSlash, attrs);
-            element.setHasStartElement();
-            elementStack.peek().addChild(element);
-            if ( !endSlash ) {
-                elementStack.push(element);
-            }
-        }
-
-        public void onEndElement(String name) {
-            this.checkText();
-            if (contains(name)) {
-                TemplateElementNode element = this.elementStack.pop();
-                while ( !name.equals(element.getName()) ) {
-                    element = this.elementStack.pop();
-                }
-                element.setHasEndElement();
-            } else {
-                final TemplateElementNode element
-                        = new TemplateElementNode(name, false, new ArrayList<TemplateAttribute>());
-                elementStack.peek().addChild(element);
-                element.setHasEndElement();
-            }
-        }
-
-        public void onCharacters(final char[] ch, final int off, final int len) {
-            textBuilder.append(ch, off, len);
-        }
-
-        public void onComment(final String text) throws IOException {
-            this.checkText();
-            elementStack.peek().addChild(new TemplateCommentNode(text));
-        }
-
-        private boolean contains(String name) {
-            Iterator it = this.elementStack.iterator(); // ascending iterator
-            while (it.hasNext()) {
-                TemplateElementNode elem = (TemplateElementNode) it.next();
-                if (name.equals(elem.getName())) {
-                    return true;
-                }
-            }
-            return false;
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateTextNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateTextNode.java
deleted file mode 100644
index 0dfe5fa..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/html/dom/template/TemplateTextNode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.html.dom.template;
-
-public class TemplateTextNode extends TemplateNode {
-
-    private final String text;
-
-    public TemplateTextNode(final String t) {
-        this.text = t;
-    }
-
-    public String getText() {
-        return this.text;
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/CompilationOutput.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/CompilationOutput.java
new file mode 100644
index 0000000..b92f707
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/CompilationOutput.java
@@ -0,0 +1,44 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import java.util.Map;
+
+/**
+ * Result from compilation
+ */
+public class CompilationOutput {
+
+    private final String mainBody;
+    private final Map<String, CompilationOutput> subTemplates;
+
+    public CompilationOutput(String mainBody, Map<String, CompilationOutput> subTemplates) {
+        this.mainBody = mainBody;
+        this.subTemplates = subTemplates;
+    }
+
+    public String getMainBody() {
+        return mainBody;
+    }
+
+    public Map<String, CompilationOutput> getSubTemplates() {
+        return subTemplates;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/ExpressionTranslator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/ExpressionTranslator.java
new file mode 100644
index 0000000..7f3c9ac
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/ExpressionTranslator.java
@@ -0,0 +1,185 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiled.operator.BinaryOpGen;
+import org.apache.sling.scripting.sightly.impl.compiled.operator.Operators;
+import org.apache.sling.scripting.sightly.impl.compiled.operator.UnaryOpGen;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.util.expression.SideEffectVisitor;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
+
+/**
+ * Builds expressions within a sling source file.
+ */
+public final class ExpressionTranslator extends SideEffectVisitor {
+
+    private final JavaSource source;
+    private final VariableAnalyzer analyzer;
+    private final TypeInfo typeInfo;
+
+    private ExpressionTranslator(JavaSource source, VariableAnalyzer analyzer, TypeInfo typeInfo) {
+        this.source = source;
+        this.analyzer = analyzer;
+        this.typeInfo= typeInfo;
+    }
+
+    public static void buildExpression(ExpressionNode node,
+                                       JavaSource source,
+                                       VariableAnalyzer analyzer,
+                                       TypeInfo typeInfo) {
+        ExpressionTranslator builder = new ExpressionTranslator(source, analyzer, typeInfo);
+        builder.traverse(node);
+    }
+
+    public void traverse(ExpressionNode node) {
+        visit(node);
+    }
+
+    private void visit(ExpressionNode node) {
+        node.accept(this);
+    }
+
+    @Override
+    public void visit(PropertyAccess propertyAccess) {
+        if (typeInfo.typeOf(propertyAccess.getTarget()) == Type.MAP) {
+            //Special optimization for maps
+            visit(propertyAccess.getTarget());
+            source.startCall(SourceGenConstants.MAP_GET, true);
+            visit(propertyAccess.getProperty());
+            source.endCall();
+        } else {
+            source.startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, RenderContextImpl.PROPERTY_ACCESS);
+            visit(propertyAccess.getTarget());
+            source.separateArgument();
+            visit(propertyAccess.getProperty());
+            source.endCall();
+        }
+    }
+
+    @Override
+    public void visit(Identifier identifier) {
+        String safeName = analyzer.assignedName(identifier.getName());
+        source.append(safeName);
+    }
+
+    @Override
+    public void visit(StringConstant text) {
+        source.stringLiteral(text.getText());
+    }
+
+    @Override
+    public void visit(BinaryOperation binaryOperation) {
+        BinaryOpGen opGen = Operators.generatorFor(binaryOperation.getOperator());
+        source.startExpression();
+        opGen.generate(source, this,
+                typeInfo.getTyped(binaryOperation.getLeftOperand()),
+                typeInfo.getTyped(binaryOperation.getRightOperand()));
+        source.endExpression();
+    }
+
+    @Override
+    public void visit(BooleanConstant booleanConstant) {
+        source.append(Boolean.toString(booleanConstant.getValue()));
+    }
+
+    @Override
+    public void visit(NumericConstant numericConstant) {
+        source.append(numericConstant.getValue().toString()); //todo: check correctness
+    }
+
+    @Override
+    public void visit(UnaryOperation unaryOperation) {
+        UnaryOperator operator = unaryOperation.getOperator();
+        ExpressionNode operand = unaryOperation.getTarget();
+        UnaryOpGen unaryOpGen = Operators.generatorFor(operator);
+        source.startExpression();
+        unaryOpGen.generate(source, this, typeInfo.getTyped(operand));
+        source.endExpression();
+    }
+
+    @Override
+    public void visit(TernaryOperator ternaryOperator) {
+        GenHelper.generateTernary(source, this,
+                typeInfo.getTyped(ternaryOperator.getCondition()),
+                typeInfo.getTyped(ternaryOperator.getThenBranch()),
+                typeInfo.getTyped(ternaryOperator.getElseBranch()));
+    }
+
+    @Override
+    public void visit(RuntimeCall runtimeCall) {
+        source.startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, SourceGenConstants.RUNTIME_CALL_METHOD)
+                .stringLiteral(runtimeCall.getFunctionName());
+        for (ExpressionNode arg : runtimeCall.getArguments()) {
+            source.separateArgument();
+            visit(arg);
+        }
+        source.endCall();
+    }
+
+    @Override
+    public void visit(MapLiteral mapLiteral) {
+        source.startCall(SourceGenConstants.START_MAP_METHOD).endCall();
+        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
+            source.startCall(SourceGenConstants.MAP_TYPE_ADD, true)
+                    .stringLiteral(entry.getKey())
+                    .separateArgument();
+            visit(entry.getValue());
+            source.endCall();
+        }
+    }
+
+    @Override
+    public void visit(ArrayLiteral arrayLiteral) {
+        source.startExpression().startArray();
+        boolean needsComma = false;
+        for (ExpressionNode node : arrayLiteral.getItems()) {
+            if (needsComma) {
+                source.separateArgument();
+            }
+            visit(node);
+            needsComma = true;
+        }
+        source.endArray().endExpression();
+    }
+
+    @Override
+    public void visit(NullLiteral nullLiteral) {
+        source.nullLiteral();
+    }
+
+    public VariableAnalyzer getAnalyzer() {
+        return analyzer;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/GenHelper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/GenHelper.java
new file mode 100644
index 0000000..5be1cbc
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/GenHelper.java
@@ -0,0 +1,112 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiled.operator.TypedNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.util.expression.SideEffectVisitor;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
+
+/**
+ * Helper for code generation
+ */
+public class GenHelper {
+
+    public static void generateTernary(JavaSource source, SideEffectVisitor visitor,
+                                TypedNode condition, TypedNode thenBranch, TypedNode elseBranch) {
+        source.startExpression();
+        typeCoercion(source, visitor, condition, Type.BOOLEAN);
+        source.conditional();
+        thenBranch.getNode().accept(visitor);
+        source.conditionalBranchSep();
+        elseBranch.getNode().accept(visitor);
+        source.endExpression();
+    }
+
+    public static void typeCoercion(JavaSource source, SideEffectVisitor visitor, TypedNode node, Type type) {
+        if (type == node.getType() || type == Type.UNKNOWN) {
+            node.getNode().accept(visitor);
+        } else if (type == Type.LONG && node.getType() == Type.DOUBLE) {
+            callLongCoercion(source, visitor, node.getNode());
+        } else {
+            String coercionMethod = dynamicCoercions.get(type);
+            if (coercionMethod == null) {
+                throw new UnsupportedOperationException("Cannot generate coercion to type " + type);
+            }
+            callDynamicCoercion(source, visitor, node.getNode(), dynamicCoercions.get(type));
+        }
+    }
+
+    public static void listCoercion(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
+        ExpressionNode node = typedNode.getNode();
+        if (node instanceof Identifier) {
+            //using list coercion caching optimization
+            VariableDescriptor descriptor = visitor.getAnalyzer().descriptor(((Identifier) node).getName());
+            String listCoercionVar = descriptor.requireListCoercion();
+            source.startExpression()
+                    .append(listCoercionVar)
+                    .equality()
+                    .nullLiteral()
+                    .conditional()
+                    .startExpression()
+                    .append(listCoercionVar)
+                    .assign()
+                    .startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, RenderContextImpl.COLLECTION_COERCE);
+            node.accept(visitor);
+            source
+                    .endCall()
+                    .endExpression()
+                    .conditionalBranchSep()
+                    .append(listCoercionVar)
+                    .endExpression();
+        } else {
+            source.startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, RenderContextImpl.COLLECTION_COERCE);
+            typedNode.getNode().accept(visitor);
+            source.endCall();
+        }
+    }
+
+    private static void callLongCoercion(JavaSource source, SideEffectVisitor visitor, ExpressionNode node) {
+        source.cast(Type.LONG.getNativeClass());
+        source.startExpression();
+        node.accept(visitor);
+        source.endExpression();
+    }
+
+    private static void callDynamicCoercion(JavaSource source, SideEffectVisitor visitor, ExpressionNode node, String methodName) {
+        source.startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, methodName);
+        node.accept(visitor);
+        source.endCall();
+    }
+
+    private static final Map<Type, String> dynamicCoercions = new HashMap<Type, String>();
+
+    static {
+        dynamicCoercions.put(Type.STRING, RenderContextImpl.STRING_COERCE);
+        dynamicCoercions.put(Type.BOOLEAN, RenderContextImpl.BOOLEAN_COERCE);
+        dynamicCoercions.put(Type.LONG, RenderContextImpl.NUMERIC_COERCE);
+        dynamicCoercions.put(Type.DOUBLE, RenderContextImpl.NUMERIC_COERCE);
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaClassBackend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaClassBackend.java
new file mode 100644
index 0000000..99f782c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaClassBackend.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import org.apache.sling.scripting.sightly.impl.compiler.CompilerBackend;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.VisitorHandler;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.CodeGenVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.StatefulVisitor;
+
+/**
+ * Backend which generates a Java class.
+ */
+public class JavaClassBackend implements CompilerBackend {
+
+    private UnitBuilder unitBuilder = new UnitBuilder();
+
+    @Override
+    public void handle(CommandStream stream) {
+        StatefulVisitor statefulVisitor = new StatefulVisitor();
+        final CodeGenVisitor visitor = new CodeGenVisitor(unitBuilder, statefulVisitor.getControl());
+        statefulVisitor.initializeWith(visitor);
+        stream.addHandler(new VisitorHandler(statefulVisitor) {
+            @Override
+            public void onDone() {
+                super.onDone();
+                visitor.finish();
+            }
+        });
+    }
+
+    public CompilationOutput build() {
+        return this.unitBuilder.build();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaSource.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaSource.java
new file mode 100644
index 0000000..f7eec90
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/JavaSource.java
@@ -0,0 +1,264 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import org.apache.commons.lang.StringEscapeUtils;
+
+/**
+ * Builder object for a Java class printing method.
+ */
+public class JavaSource {
+
+    private static final String INDENT = "    ";
+
+    private int indentLevel;
+    private final StringBuilder builder = new StringBuilder();
+
+    public JavaSource prepend(String str) {
+        builder.insert(0, str);
+        return this;
+    }
+
+    public JavaSource beginIf() {
+        indent().append("if (");
+        return this;
+    }
+
+    public JavaSource completeIf() {
+        append(") {\n");
+        incIndent();
+        return this;
+    }
+
+    public JavaSource endBlock() {
+        decIndent();
+        indent().append("}\n");
+        return this;
+    }
+
+    public JavaSource comment(String text) {
+        indent().append("//").append(text).append("\n");
+        return this;
+    }
+
+    public JavaSource assign() {
+        return append(" = ");
+    }
+
+    public JavaSource number(int value) {
+        return append(Integer.toString(value));
+    }
+
+    public JavaSource increment() {
+        return append("++");
+    }
+
+    public JavaSource beginAssignment(String variable, String type) {
+        return declare(variable, type).assign();
+    }
+
+    public JavaSource beginAssignment(String variable) {
+        return beginAssignment(variable, "Object");
+    }
+
+    public JavaSource declare(String variable, String type) {
+        return startStatement().append(type).append(" ").append(variable);
+    }
+
+    public JavaSource declare(String variable) {
+        return declare(variable, "Object");
+    }
+
+    public JavaSource equality() {
+        return append(" == ");
+    }
+
+    public JavaSource startCall(String methodName, boolean useDot) {
+        if (useDot) {
+            builder.append('.');
+        }
+        builder.append(methodName).append('(');
+        return this;
+    }
+
+    public JavaSource startCall(String methodName) {
+        return startCall(methodName, false);
+    }
+
+    public JavaSource startMethodCall(String target, String method) {
+        return append(target).startCall(method, true);
+    }
+
+    public JavaSource startArray() {
+        return append("new Object[] {");
+    }
+
+    public JavaSource endArray() {
+        return append("}");
+    }
+
+    public JavaSource startStatement() {
+        indent();
+        return this;
+    }
+
+    public JavaSource nullLiteral() {
+        return append("null");
+    }
+
+    public JavaSource separateArgument() {
+        builder.append(", ");
+        return this;
+    }
+
+    public JavaSource stringLiteral(String text) {
+        builder.append('"')
+                .append(StringEscapeUtils.escapeJava(text))
+                .append('"');
+        return this;
+    }
+
+    public JavaSource startExpression() {
+        builder.append('(');
+        return this;
+    }
+
+    public JavaSource endExpression() {
+        builder.append(')');
+        return this;
+    }
+
+    public JavaSource endCall() {
+        builder.append(')');
+        return this;
+    }
+
+    public JavaSource startBlock() {
+        indent().append("{\n");
+        incIndent();
+        return this;
+    }
+
+    public JavaSource beginFor(String itemVariable, String listVariable) {
+        startStatement()
+                .append("for (Object ")
+                .append(itemVariable)
+                .append(" : ")
+                .append(listVariable)
+                .append(") {\n");
+        incIndent();
+        return this;
+    }
+
+    public JavaSource endFor() {
+        return endBlock();
+    }
+
+    public JavaSource endIf() {
+        return endBlock();
+    }
+
+    public JavaSource beginNewInstanceCall(String className) {
+        return append("new ").append(className).append("(");
+    }
+
+    public JavaSource append(String str) {
+        builder.append(str);
+        return this;
+    }
+
+    public JavaSource endStatement() {
+        builder.append(";\n");
+        return this;
+    }
+
+    public JavaSource cast(String type) {
+        return append("(").append(type).append(")");
+    }
+
+    public JavaSource operator(String op) {
+        return append(" ").append(op).append(" ");
+    }
+
+    public JavaSource beginAnonymousInstance(String className) {
+        append("new ").append(className).append("() {\n");
+        incIndent();
+        return this;
+    }
+
+    public JavaSource endAnonymousInstance() {
+        decIndent();
+        append("}");
+        return this;
+    }
+
+    public JavaSource beginMethod(String name, String returnType) {
+        return startStatement().append("public ").append(returnType).append(" ").append(name).append("(");
+    }
+
+    public JavaSource methodParameter(String name, String type) {
+        return append(type).append(" ").append(name);
+    }
+
+    public JavaSource completeMethodSignature() {
+        append(") {\n");
+        incIndent();
+        return this;
+    }
+
+    public JavaSource endMethod() {
+        return endBlock();
+    }
+
+    public JavaSource conditional() {
+        return append(" ? ");
+    }
+
+    public JavaSource conditionalBranchSep() {
+        return append(" : ");
+    }
+
+    public JavaSource negation() {
+        return append("!");
+    }
+
+    public JavaSource newLine() {
+        return append("\n");
+    }
+
+    private StringBuilder indent() {
+        for (int i = 0; i < indentLevel; i++) {
+            builder.append(INDENT);
+        }
+        return builder;
+    }
+
+    private void incIndent() {
+        indentLevel++;
+    }
+
+    private void decIndent() {
+        indentLevel--;
+    }
+
+    @Override
+    public String toString() {
+        return builder.toString();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/SourceGenConstants.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/SourceGenConstants.java
new file mode 100644
index 0000000..491d3c9
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/SourceGenConstants.java
@@ -0,0 +1,53 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+/**
+ * Names related to Java source generation.
+ */
+public final class SourceGenConstants {
+
+    public static final String OUT_BUFFER = "out";
+
+    public static final String WRITE_METHOD = "write";
+
+    public static final String COLLECTION_TYPE = "Collection";
+
+    public static final String BINDINGS_FIELD = "bindings";
+
+    public static final String BINDINGS_GET_METHOD = "get";
+
+    public static final String START_MAP_METHOD = "obj";
+
+    public static final String MAP_TYPE_ADD = "with";
+
+    public static final String CALL_UNIT_METHOD = "callUnit";
+
+    public static final String RENDER_CONTEXT_INSTANCE = "renderContext";
+
+    public static final String RUNTIME_CALL_METHOD = "call";
+
+    public static final String COLLECTION_LENGTH_METHOD = "size";
+
+    public static final String MAP_GET = "get";
+    public static final String TRIM_METHOD = "trim";
+    public static final String STRING_EMPTY = "isEmpty";
+    public static final String OBJ_GET = "get";
+    public static final String ARGUMENTS_FIELD = "arguments";
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/Type.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/Type.java
new file mode 100644
index 0000000..3f53368
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/Type.java
@@ -0,0 +1,48 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+/**
+ * Type inferred for an expression
+ */
+public enum Type {
+    UNKNOWN("Object", false),
+    STRING("String", false),
+    LONG("long", true),
+    DOUBLE("double", true),
+    BOOLEAN("boolean", true),
+    MAP("java.util.Map", false);
+
+    private final String nativeClass;
+    private final boolean isPrimitive;
+
+    Type(String nativeClass, boolean isPrimitive) {
+        this.nativeClass = nativeClass;
+        this.isPrimitive = isPrimitive;
+    }
+
+    public String getNativeClass() {
+        return nativeClass;
+    }
+
+    public boolean isPrimitive() {
+        return isPrimitive;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInference.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInference.java
new file mode 100644
index 0000000..3da39c4
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInference.java
@@ -0,0 +1,158 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import java.util.IdentityHashMap;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiled.operator.BinaryOpGen;
+import org.apache.sling.scripting.sightly.impl.compiled.operator.Operators;
+import org.apache.sling.scripting.sightly.impl.compiled.operator.UnaryOpGen;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+
+/**
+ * Expression translator which uses type information
+ */
+public final class TypeInference implements NodeVisitor<Type> {
+
+    private final VariableAnalyzer analyzer;
+    private final Map<ExpressionNode, Type> inferMap = new IdentityHashMap<ExpressionNode, Type>();
+
+
+    public static TypeInfo inferTypes(ExpressionNode node, VariableAnalyzer analyzer) {
+        TypeInference typeInference = new TypeInference(analyzer);
+        typeInference.infer(node);
+        return new TypeInfo(typeInference.inferMap);
+    }
+
+    private TypeInference(VariableAnalyzer analyzer) {
+        this.analyzer = analyzer;
+    }
+
+
+
+    private Type infer(ExpressionNode node) {
+        Type type = node.accept(this);
+        inferMap.put(node, type);
+        return type;
+    }
+
+    @Override
+    public Type evaluate(PropertyAccess propertyAccess) {
+        infer(propertyAccess.getTarget());
+        infer(propertyAccess.getProperty());
+        return Type.UNKNOWN;
+    }
+
+    @Override
+    public Type evaluate(Identifier identifier) {
+        return analyzer.descriptor(identifier.getName()).getType();
+    }
+
+    @Override
+    public Type evaluate(StringConstant text) {
+        return Type.STRING;
+    }
+
+    @Override
+    public Type evaluate(BinaryOperation binaryOperation) {
+        Type leftType = infer(binaryOperation.getLeftOperand());
+        Type rightType = infer(binaryOperation.getRightOperand());
+        BinaryOpGen opGen = Operators.generatorFor(binaryOperation.getOperator());
+        return opGen.returnType(leftType, rightType);
+    }
+
+    @Override
+    public Type evaluate(BooleanConstant booleanConstant) {
+        return Type.BOOLEAN;
+    }
+
+    @Override
+    public Type evaluate(NumericConstant numericConstant) {
+        Number number = numericConstant.getValue();
+        if (number instanceof Integer || number instanceof Long) {
+            return Type.LONG;
+        }
+        if (number instanceof Float || number instanceof Double) {
+            return Type.DOUBLE;
+        }
+        return Type.UNKNOWN;
+    }
+
+    @Override
+    public Type evaluate(UnaryOperation unaryOperation) {
+        infer(unaryOperation.getTarget());
+        UnaryOpGen opGen = Operators.generatorFor(unaryOperation.getOperator());
+        return opGen.returnType(infer(unaryOperation.getTarget()));
+    }
+
+    @Override
+    public Type evaluate(TernaryOperator ternaryOperator) {
+        infer(ternaryOperator.getCondition());
+        Type thenType = infer(ternaryOperator.getThenBranch());
+        Type elseType = infer(ternaryOperator.getElseBranch());
+        if (thenType.equals(elseType)) {
+            return thenType;
+        }
+        return Type.UNKNOWN;
+    }
+
+    @Override
+    public Type evaluate(RuntimeCall runtimeCall) {
+        inferAll(runtimeCall.getArguments());
+        return Type.UNKNOWN;
+    }
+
+    @Override
+    public Type evaluate(MapLiteral mapLiteral) {
+        inferAll(mapLiteral.getMap().values());
+        return Type.MAP;
+    }
+
+    @Override
+    public Type evaluate(ArrayLiteral arrayLiteral) {
+        inferAll(arrayLiteral.getItems());
+        return Type.UNKNOWN;
+    }
+
+    @Override
+    public Type evaluate(NullLiteral nullLiteral) {
+        return Type.UNKNOWN;
+    }
+
+    private void inferAll(Iterable<ExpressionNode> nodes) {
+        for (ExpressionNode node : nodes) {
+            infer(node);
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInfo.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInfo.java
new file mode 100644
index 0000000..0fc3ee2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/TypeInfo.java
@@ -0,0 +1,49 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiled.operator.TypedNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+
+/**
+ * Provide type information for expressions
+ */
+public class TypeInfo {
+
+    private final Map<ExpressionNode, Type> typeMap;
+
+    public TypeInfo(Map<ExpressionNode, Type> typeMap) {
+        this.typeMap = typeMap;
+    }
+
+    public Type typeOf(ExpressionNode node) {
+        Type type = typeMap.get(node);
+        if (type == null) {
+            return Type.UNKNOWN;
+        }
+        return type;
+    }
+
+    public TypedNode getTyped(ExpressionNode expressionNode) {
+        return new TypedNode(expressionNode, typeOf(expressionNode));
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/UnitBuilder.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/UnitBuilder.java
new file mode 100644
index 0000000..1d88bd5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/UnitBuilder.java
@@ -0,0 +1,65 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Builder for compiled sources
+ */
+public class UnitBuilder {
+
+    private final JavaSource source = new JavaSource();
+    private final Set<String> parameters;
+    private final Map<String, UnitBuilder> subTemplates = new HashMap<String, UnitBuilder>();
+
+    public UnitBuilder() {
+        this(Collections.<String>emptySet());
+    }
+
+    public UnitBuilder(Set<String> parameters) {
+        this.parameters = parameters;
+    }
+
+    public UnitBuilder newSubBuilder(String name, Set<String> parameters) {
+        UnitBuilder unitBuilder = new UnitBuilder(parameters);
+        subTemplates.put(name, unitBuilder);
+        return unitBuilder;
+    }
+
+    public JavaSource getSource() {
+        return source;
+    }
+
+    public Set<String> getParameters() {
+        return parameters;
+    }
+
+    public CompilationOutput build() {
+        Map<String, CompilationOutput> map = new HashMap<String, CompilationOutput>();
+        for (Map.Entry<String, UnitBuilder> entry : subTemplates.entrySet()) {
+            map.put(entry.getKey(), entry.getValue().build());
+        }
+        return new CompilationOutput(source.toString(), map);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableAnalyzer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableAnalyzer.java
new file mode 100644
index 0000000..f241d2a
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableAnalyzer.java
@@ -0,0 +1,222 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.util.VariableTracker;
+
+/**
+ * Data structure used in the analysis of variables
+ * during the compilation process
+ */
+public class VariableAnalyzer {
+
+    private static final HashSet<String> javaKeywords = new HashSet<String>();
+    private final VariableTracker<VariableDescriptor> tracker = new VariableTracker<VariableDescriptor>();
+    private final List<VariableDescriptor> variables = new ArrayList<VariableDescriptor>();
+    private final HashMap<String, VariableDescriptor> dynamicVariables = new HashMap<String, VariableDescriptor>();
+    private final HashMap<String, VariableDescriptor> staticVariables = new HashMap<String, VariableDescriptor>();
+    private static final String DYNAMIC_PREFIX = "_dynamic_";
+    private static final String GLOBAL_PREFIX = "_global_";
+
+    /**
+     * Mark the declaration of a variable in the Java code
+     * @param originalName - the original name of the variable
+     * @return - a variable descriptor uniquely assigned to this variable
+     */
+    public VariableDescriptor declareVariable(String originalName, Type type) {
+        originalName = originalName.toLowerCase();
+        String assignedName = findSafeName(originalName);
+        VariableDescriptor descriptor = new VariableDescriptor(originalName, assignedName, type, VariableScope.SCOPED);
+        tracker.pushVariable(originalName, descriptor);
+        variables.add(descriptor);
+        return descriptor;
+    }
+
+    /**
+     * Declare a global variable. Redundant declarations are ignored
+     * @param originalName - the original name of the variable
+     * @return a variable descriptor
+     */
+    public VariableDescriptor declareGlobal(String originalName) {
+        originalName = originalName.toLowerCase();
+        VariableDescriptor descriptor = staticVariables.get(originalName);
+        if (descriptor == null) {
+            String assignedName = findGlobalName(originalName);
+            descriptor = new VariableDescriptor(originalName, assignedName, Type.UNKNOWN, VariableScope.GLOBAL);
+            variables.add(descriptor);
+            staticVariables.put(originalName, descriptor);
+        }
+        return descriptor;
+    }
+
+    /**
+     * Mark this variable as a template
+     * @param originalName - the original name of the variable
+     * @return a variable descriptor
+     */
+    public VariableDescriptor declareTemplate(String originalName) {
+        originalName = originalName.toLowerCase();
+        VariableDescriptor descriptor = dynamicDescriptor(originalName);
+        descriptor.markAsTemplate();
+        return descriptor;
+    }
+
+    /**
+     * Mark the end of a variable scope
+     */
+    public VariableDescriptor endVariable() {
+        VariableDescriptor descriptor = tracker.peek().getValue();
+        tracker.popVariable();
+        return descriptor;
+    }
+
+    /**
+     * Get a the descriptor for the given variable
+     * @param name the original lowerName of the variable
+     * @return the variable descriptor. If the variable is not in scope,
+     * then a dynamic variable descriptor is provided
+     */
+    public VariableDescriptor descriptor(String name) {
+        String lowerName = name.toLowerCase();
+        VariableDescriptor descriptor = tracker.get(lowerName);
+        if (descriptor == null) {
+            descriptor = staticVariables.get(lowerName);
+        }
+        if (descriptor == null) {
+            descriptor = dynamicDescriptor(lowerName);
+        }
+        return descriptor;
+    }
+
+    /**
+     * Get the collection of all the variables encountered so far
+     * @return an unmodifiable list of all the variables tracked by this analyzer
+     */
+    public Collection<VariableDescriptor> allVariables() {
+        return Collections.unmodifiableList(variables);
+    }
+
+    /**
+     * Shortcut method that returns the assigned name for the given
+     * variable
+     * @param original the original variable name
+     * @return the assigned name for this compilation process
+     */
+    public String assignedName(String original) {
+        return descriptor(original).getAssignedName();
+    }
+
+    private VariableDescriptor dynamicDescriptor(String original) {
+        VariableDescriptor descriptor = dynamicVariables.get(original);
+        if (descriptor == null) {
+            String dynamicName = findDynamicName(original);
+            descriptor = new VariableDescriptor(original, dynamicName, Type.UNKNOWN, VariableScope.DYNAMIC);
+            dynamicVariables.put(original, descriptor);
+            variables.add(descriptor);
+        }
+        return descriptor;
+    }
+
+    private String findDynamicName(String original) {
+        return DYNAMIC_PREFIX + original;
+    }
+
+    private String findGlobalName(String original) {
+        return GLOBAL_PREFIX + syntaxSafeName(original);
+    }
+
+    private String findSafeName(String original) {
+        int occurrenceCount = tracker.getOccurrenceCount(original);
+        String syntaxSafe = syntaxSafeName(original);
+        if (occurrenceCount == 0) {
+            return syntaxSafe; //no other declarations in scope. Use this very name
+        } else {
+            return original + "_" + occurrenceCount;
+        }
+    }
+
+    private String syntaxSafeName(String original) {
+        if (javaKeywords.contains(original)) {
+            return "_" + original;
+        }
+        return original.replaceAll("-", "_");
+    }
+
+    static {
+        javaKeywords.add("abstract");
+        javaKeywords.add("continue");
+        javaKeywords.add("for");
+        javaKeywords.add("new");
+        javaKeywords.add("switch");
+        javaKeywords.add("assert");
+        javaKeywords.add("default");
+        javaKeywords.add("goto");
+        javaKeywords.add("package");
+        javaKeywords.add("synchronized");
+        javaKeywords.add("boolean");
+        javaKeywords.add("do");
+        javaKeywords.add("if");
+        javaKeywords.add("private");
+        javaKeywords.add("this");
+        javaKeywords.add("break");
+        javaKeywords.add("double");
+        javaKeywords.add("implements");
+        javaKeywords.add("protected");
+        javaKeywords.add("throw");
+        javaKeywords.add("byte");
+        javaKeywords.add("else");
+        javaKeywords.add("import");
+        javaKeywords.add("public");
+        javaKeywords.add("throws");
+        javaKeywords.add("case");
+        javaKeywords.add("enum");
+        javaKeywords.add("instanceof");
+        javaKeywords.add("return");
+        javaKeywords.add("transient");
+        javaKeywords.add("catch");
+        javaKeywords.add("extends");
+        javaKeywords.add("int");
+        javaKeywords.add("short");
+        javaKeywords.add("try");
+        javaKeywords.add("char");
+        javaKeywords.add("final");
+        javaKeywords.add("interface");
+        javaKeywords.add("static");
+        javaKeywords.add("void");
+        javaKeywords.add("class");
+        javaKeywords.add("finally");
+        javaKeywords.add("long");
+        javaKeywords.add("strictfp");
+        javaKeywords.add("volatile");
+        javaKeywords.add("const");
+        javaKeywords.add("float");
+        javaKeywords.add("native");
+        javaKeywords.add("super");
+        javaKeywords.add("while");
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableDescriptor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableDescriptor.java
new file mode 100644
index 0000000..c5fe566
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableDescriptor.java
@@ -0,0 +1,107 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+/**
+ * Information about a variable during the compilation process
+ */
+public class VariableDescriptor {
+
+    private final String originalName;
+    private final String assignedName;
+    private VariableScope scope;
+    private String listCoercion;
+    private final Type type;
+    private boolean templateVariable;
+
+    public VariableDescriptor(String originalName, String assignedName, Type type, VariableScope scope) {
+        this.originalName = originalName;
+        this.assignedName = assignedName;
+        this.scope = scope;
+        this.type = type;
+    }
+
+    /**
+     * The name of the list coercion variable
+     * @return - the variable that will hold the list coercion
+     */
+    public String requireListCoercion() {
+        if (listCoercion == null) {
+            listCoercion = assignedName + "_list_coerced$";
+        }
+        return listCoercion;
+    }
+
+    public String getListCoercion() {
+        return listCoercion;
+    }
+
+    /**
+     * Get the original name of the variable, as it was provided
+     * by the command that introduced the variable
+     * @return - the original variable name
+     */
+    public String getOriginalName() {
+        return originalName;
+    }
+
+    /**
+     * Get the assigned name for the variable - the name that will
+     * actually be used during compilation
+     * @return - the assigned variable name
+     */
+    public String getAssignedName() {
+        return assignedName;
+    }
+
+    /**
+     * Get the scope of this variable
+     * @return the variable scope
+     */
+    public VariableScope getScope() {
+        return scope;
+    }
+
+    /**
+     * Get the inferred type fot this variable
+     * @return - the class of the variable
+     */
+    public Type getType() {
+        return type;
+    }
+
+    /**
+     * Check whether this is a template variable
+     * @return true if it is a template variable
+     */
+    public boolean isTemplateVariable() {
+        return templateVariable;
+    }
+
+    /**
+     * Signal that this variable stands for a template
+     */
+    public void markAsTemplate() {
+        if (scope != VariableScope.DYNAMIC) {
+            throw new UnsupportedOperationException("Only dynamic variables can be marked as templates");
+        }
+        templateVariable = true;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableScope.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableScope.java
new file mode 100644
index 0000000..b02066a
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/VariableScope.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled;
+
+/**
+ * The scope of a variable in a Sightly script
+ */
+public enum VariableScope {
+    DYNAMIC, SCOPED, GLOBAL
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/BinaryOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/BinaryOpGen.java
new file mode 100644
index 0000000..d49d866
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/BinaryOpGen.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Generator for a binary operator
+ */
+public interface BinaryOpGen {
+
+    Type returnType(Type leftType, Type rightType);
+
+    void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ComparisonOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ComparisonOpGen.java
new file mode 100644
index 0000000..3d3891e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ComparisonOpGen.java
@@ -0,0 +1,84 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.util.expression.SideEffectVisitor;
+
+/**
+ * Generator for logical operators
+ */
+public class ComparisonOpGen implements BinaryOpGen {
+
+    private final String javaOperator;
+    private final boolean inverted;
+    private final String runtimeMethod;
+
+    public ComparisonOpGen(BinaryOperator operator) {
+        switch (operator) {
+            case LT: runtimeMethod = BinaryOperator.METHOD_LT; inverted = false; javaOperator = "<"; break;
+            case GT: runtimeMethod = BinaryOperator.METHOD_LEQ; inverted = true; javaOperator = ">"; break;
+            case LEQ: runtimeMethod = BinaryOperator.METHOD_LEQ; inverted = false; javaOperator = "<="; break;
+            case GEQ: runtimeMethod = BinaryOperator.METHOD_LT; inverted = true; javaOperator = ">="; break;
+            default: throw new IllegalArgumentException("Operator is not a comparison operator: " + operator);
+        }
+    }
+
+    @Override
+    public Type returnType(Type left, Type right) {
+        return Type.BOOLEAN;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
+        Type type = OpHelper.sameType(left, right);
+        if (OpHelper.isNumericType(type)) {
+            generateWithOperator(source, visitor, left.getNode(), right.getNode());
+        } else {
+            generateGeneric(source, visitor, left.getNode(), right.getNode());
+        }
+    }
+
+    private void generateGeneric(JavaSource source, SideEffectVisitor visitor, ExpressionNode leftNode, ExpressionNode rightNode) {
+        if (inverted) {
+            source.negation().startExpression();
+        }
+        source.startMethodCall(BinaryOperator.OBJECT_NAME, runtimeMethod);
+        leftNode.accept(visitor);
+        source.separateArgument();
+        rightNode.accept(visitor);
+        source.endCall();
+        if (inverted) {
+            source.endExpression();
+        }
+    }
+
+    private void generateWithOperator(JavaSource source, SideEffectVisitor visitor,
+                                      ExpressionNode leftNode, ExpressionNode rightNode) {
+        leftNode.accept(visitor);
+        source.append(javaOperator);
+        rightNode.accept(visitor);
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ConcatenateOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ConcatenateOpGen.java
new file mode 100644
index 0000000..ae0ea72
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/ConcatenateOpGen.java
@@ -0,0 +1,48 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.GenHelper;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Concatenation operator generation
+ */
+public final class ConcatenateOpGen implements BinaryOpGen {
+
+    public static final ConcatenateOpGen INSTANCE = new ConcatenateOpGen();
+
+    private ConcatenateOpGen() {
+    }
+
+    @Override
+    public Type returnType(Type leftType, Type rightType) {
+        return Type.STRING;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
+        GenHelper.typeCoercion(source, visitor, left, Type.STRING);
+        source.append("+");
+        GenHelper.typeCoercion(source, visitor, right, Type.STRING);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/EquivalenceOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/EquivalenceOpGen.java
new file mode 100644
index 0000000..c228aa9
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/EquivalenceOpGen.java
@@ -0,0 +1,91 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.util.expression.SideEffectVisitor;
+
+/**
+ * Generator for logical operators
+ */
+public class EquivalenceOpGen implements BinaryOpGen {
+
+    private final boolean negated;
+
+    public EquivalenceOpGen(boolean negated) {
+        this.negated = negated;
+    }
+
+    @Override
+    public Type returnType(Type left, Type right) {
+        return Type.BOOLEAN;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
+        Type type = OpHelper.sameType(left, right);
+        if (type != null && OpHelper.isNumericType(type) || type == Type.BOOLEAN) {
+            generateEqualsOperator(source, visitor, left.getNode(), right.getNode());
+        } else if (type != Type.UNKNOWN) {
+            generateEqualsMethod(source, visitor, left, right);
+        } else {
+            generateCheckedEquals(source, visitor, left, right);
+        }
+    }
+
+    private void generateCheckedEquals(JavaSource source, SideEffectVisitor visitor, TypedNode leftNode, TypedNode rightNode) {
+        source.startExpression();
+        leftNode.getNode().accept(visitor);
+        source.equality().nullLiteral().conditional();
+        rightNode.getNode().accept(visitor);
+        source.equality().nullLiteral();
+        source.conditionalBranchSep();
+        generateEqualsMethod(source, visitor, leftNode, rightNode);
+    }
+
+    private void generateEqualsMethod(JavaSource source, SideEffectVisitor visitor, TypedNode leftNode, TypedNode rightNode) {
+        boolean performCast = leftNode.getType().isPrimitive();
+        if (performCast) {
+            source.startExpression();
+            source.cast(Type.UNKNOWN.getNativeClass());
+        }
+        leftNode.getNode().accept(visitor);
+        if (performCast) {
+            source.endExpression();
+        }
+        source.startCall("equals", true);
+        rightNode.getNode().accept(visitor);
+        source.endCall();
+    }
+
+    private void generateEqualsOperator(JavaSource source, SideEffectVisitor visitor, ExpressionNode leftNode, ExpressionNode rightNode) {
+        leftNode.accept(visitor);
+        source.append(operator());
+        rightNode.accept(visitor);
+    }
+
+    private String operator() {
+        return (negated) ? "!=" : "==";
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/IsWhiteSpaceGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/IsWhiteSpaceGen.java
new file mode 100644
index 0000000..20f22fb
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/IsWhiteSpaceGen.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.GenHelper;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.SourceGenConstants;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Generator for IS_WHITESPACE operator
+ */
+public final class IsWhiteSpaceGen implements UnaryOpGen {
+
+    public static final IsWhiteSpaceGen INSTANCE = new IsWhiteSpaceGen();
+
+    private IsWhiteSpaceGen() {
+    }
+
+    @Override
+    public Type returnType(Type operandType) {
+        return Type.BOOLEAN;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
+        GenHelper.typeCoercion(source, visitor, typedNode, Type.STRING);
+        source.startCall(SourceGenConstants.TRIM_METHOD, true)
+                .endCall()
+                .startCall(SourceGenConstants.STRING_EMPTY, true)
+                .endCall();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LengthOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LengthOpGen.java
new file mode 100644
index 0000000..92fa15e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LengthOpGen.java
@@ -0,0 +1,48 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.GenHelper;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.SourceGenConstants;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Generator for the collection length operator
+ */
+public final class LengthOpGen implements UnaryOpGen {
+
+    public static final LengthOpGen INSTANCE = new LengthOpGen();
+
+    private LengthOpGen() {
+    }
+
+    @Override
+    public Type returnType(Type operandType) {
+        return Type.LONG;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
+        GenHelper.listCoercion(source, visitor, typedNode);
+        source.startCall(SourceGenConstants.COLLECTION_LENGTH_METHOD, true).endCall();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LogicalOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LogicalOpGen.java
new file mode 100644
index 0000000..b024d71
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LogicalOpGen.java
@@ -0,0 +1,80 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.GenHelper;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.util.expression.SideEffectVisitor;
+
+/**
+ * Generator for logical operators
+ */
+public abstract class LogicalOpGen implements BinaryOpGen {
+
+    private final String javaOperator;
+
+    protected LogicalOpGen(String javaOperator) {
+        this.javaOperator = javaOperator;
+    }
+
+    public static final LogicalOpGen AND = new LogicalOpGen("&&") {
+        @Override
+        protected void generateGeneric(JavaSource source, SideEffectVisitor visitor, TypedNode left, TypedNode right) {
+            GenHelper.generateTernary(source, visitor, left, right, left);
+        }
+    };
+
+    public static final LogicalOpGen OR = new LogicalOpGen("||") {
+        @Override
+        protected void generateGeneric(JavaSource source, SideEffectVisitor visitor, TypedNode left, TypedNode right) {
+            GenHelper.generateTernary(source, visitor, left, left, right);
+        }
+    };
+
+    @Override
+    public Type returnType(Type leftType, Type rightType) {
+        if (leftType == rightType) {
+            return leftType;
+        }
+        return Type.UNKNOWN;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
+        if (OpHelper.sameType(left, right) == Type.BOOLEAN) {
+            generateWithOperator(source, visitor, left.getNode(), right.getNode());
+        } else {
+            generateGeneric(source, visitor, left, right);
+        }
+    }
+
+    protected abstract void generateGeneric(JavaSource source, SideEffectVisitor visitor,
+                                            TypedNode left, TypedNode right);
+
+    private void generateWithOperator(JavaSource source, SideEffectVisitor visitor,
+                                      ExpressionNode leftNode, ExpressionNode rightNode) {
+        leftNode.accept(visitor);
+        source.append(javaOperator);
+        rightNode.accept(visitor);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LongOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LongOpGen.java
new file mode 100644
index 0000000..b7d1557
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/LongOpGen.java
@@ -0,0 +1,37 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Generator for long numeric operators
+ */
+public class LongOpGen extends NumericOpGen {
+
+    public LongOpGen(String javaOperator) {
+        super(javaOperator);
+    }
+
+    @Override
+    protected Type commonType(Type leftType, Type rightType) {
+        return Type.LONG;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NotOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NotOpGen.java
new file mode 100644
index 0000000..4c6d8bc
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NotOpGen.java
@@ -0,0 +1,47 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.GenHelper;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Generator for the not operator
+ */
+public final class NotOpGen implements UnaryOpGen {
+
+    public static final NotOpGen INSTANCE = new NotOpGen();
+
+    private NotOpGen() {
+    }
+
+    @Override
+    public Type returnType(Type operandType) {
+        return Type.BOOLEAN;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode) {
+        source.negation();
+        GenHelper.typeCoercion(source, visitor, typedNode, Type.BOOLEAN);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NumericOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NumericOpGen.java
new file mode 100644
index 0000000..5fd9686
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/NumericOpGen.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.GenHelper;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Generator for numeric value
+ */
+public class NumericOpGen implements BinaryOpGen {
+
+    private final String javaOperator;
+
+    public NumericOpGen(String javaOperator) {
+        this.javaOperator = javaOperator;
+    }
+
+    @Override
+    public Type returnType(Type leftType, Type rightType) {
+        return commonType(leftType, rightType);
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
+        Type commonType = commonType(left.getType(), right.getType());
+        GenHelper.typeCoercion(source, visitor, left, commonType);
+        source.append(javaOperator);
+        GenHelper.typeCoercion(source, visitor, right, commonType);
+    }
+
+    protected Type commonType(Type leftType, Type rightType) {
+        if (leftType == rightType && leftType == Type.LONG) {
+            return Type.LONG;
+        }
+        return Type.DOUBLE;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/OpHelper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/OpHelper.java
new file mode 100644
index 0000000..c88c5fd
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/OpHelper.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Helper class for operator generation
+ */
+public class OpHelper {
+
+    public static Type sameType(TypedNode left, TypedNode right) {
+        if (left.getType().equals(right.getType())) {
+            return left.getType();
+        }
+        return null;
+    }
+
+    public static boolean isNumericType(Type type) {
+        return type == Type.LONG || type == Type.DOUBLE;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/Operators.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/Operators.java
new file mode 100644
index 0000000..d319df2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/Operators.java
@@ -0,0 +1,88 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import java.util.EnumMap;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperator;
+
+/**
+ * Provides mappings from operators to generators
+ */
+public class Operators {
+    private static final Map<BinaryOperator, BinaryOpGen> representationMap =
+            new EnumMap<BinaryOperator, BinaryOpGen>(BinaryOperator.class);
+
+    private static final Map<UnaryOperator, UnaryOpGen> unaryMapping =
+            new EnumMap<UnaryOperator, UnaryOpGen>(UnaryOperator.class);
+
+    static {
+        representationMap.put(BinaryOperator.AND, LogicalOpGen.AND);
+        representationMap.put(BinaryOperator.OR, LogicalOpGen.OR);
+        representationMap.put(BinaryOperator.CONCATENATE, ConcatenateOpGen.INSTANCE);
+        representationMap.put(BinaryOperator.ADD, new NumericOpGen("+"));
+        representationMap.put(BinaryOperator.SUB, new NumericOpGen("-"));
+        representationMap.put(BinaryOperator.MUL, new NumericOpGen("*"));
+        representationMap.put(BinaryOperator.I_DIV, new LongOpGen("/"));
+        representationMap.put(BinaryOperator.REM, new LongOpGen("%"));
+        representationMap.put(BinaryOperator.DIV, new NumericOpGen("/"));
+        representationMap.put(BinaryOperator.EQ, new EquivalenceOpGen(false));
+        representationMap.put(BinaryOperator.NEQ, new EquivalenceOpGen(true));
+        representationMap.put(BinaryOperator.LT, new ComparisonOpGen(BinaryOperator.LT));
+        representationMap.put(BinaryOperator.LEQ, new ComparisonOpGen(BinaryOperator.LEQ));
+        representationMap.put(BinaryOperator.GT, new ComparisonOpGen(BinaryOperator.GT));
+        representationMap.put(BinaryOperator.GEQ, new ComparisonOpGen(BinaryOperator.GEQ));
+        representationMap.put(BinaryOperator.STRICT_EQ, new StrictEqGenOp(false));
+        representationMap.put(BinaryOperator.STRICT_NEQ, new StrictEqGenOp(true));
+
+        unaryMapping.put(UnaryOperator.LENGTH, LengthOpGen.INSTANCE);
+        unaryMapping.put(UnaryOperator.IS_WHITESPACE, IsWhiteSpaceGen.INSTANCE);
+        unaryMapping.put(UnaryOperator.NOT, NotOpGen.INSTANCE);
+    }
+
+
+    /**
+     * Provide the signature of the given operator
+     * @param operator - the operator
+     * @return - the signature for the operator
+     */
+    public static BinaryOpGen generatorFor(BinaryOperator operator) {
+        return provide(representationMap, operator);
+    }
+
+    /**
+     * Provide the signature of the given operator
+     * @param operator - the operator
+     * @return - the signature for the operator
+     */
+    public static UnaryOpGen generatorFor(UnaryOperator operator) {
+        return provide(unaryMapping, operator);
+    }
+
+    private static <K, V> V provide(Map<K, V> map, K key) {
+        V v = map.get(key);
+        if (v == null) {
+            throw new UnsupportedOperationException("Cannot find generator for operator: " + key);
+        }
+        return v;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/StrictEqGenOp.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/StrictEqGenOp.java
new file mode 100644
index 0000000..ebc163a
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/StrictEqGenOp.java
@@ -0,0 +1,54 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperator;
+
+/**
+ * Generator for strict equality
+ */
+public class StrictEqGenOp implements BinaryOpGen {
+
+    private final boolean negated;
+
+    public StrictEqGenOp(boolean negated) {
+        this.negated = negated;
+    }
+
+    @Override
+    public Type returnType(Type leftType, Type rightType) {
+        return Type.BOOLEAN;
+    }
+
+    @Override
+    public void generate(JavaSource source, ExpressionTranslator visitor, TypedNode left, TypedNode right) {
+        if (negated) {
+            source.negation();
+        }
+        source.startMethodCall(BinaryOperator.OBJECT_NAME, BinaryOperator.METHOD_STRICT_EQ);
+        left.getNode().accept(visitor);
+        source.separateArgument();
+        right.getNode().accept(visitor);
+        source.endCall();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/TypedNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/TypedNode.java
new file mode 100644
index 0000000..1f8309c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/TypedNode.java
@@ -0,0 +1,44 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+
+/**
+ * Expression node with type information
+ */
+public class TypedNode {
+    private final ExpressionNode node;
+    private final Type type;
+
+    public TypedNode(ExpressionNode node, Type type) {
+        this.node = node;
+        this.type = type;
+    }
+
+    public ExpressionNode getNode() {
+        return node;
+    }
+
+    public Type getType() {
+        return type;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/UnaryOpGen.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/UnaryOpGen.java
new file mode 100644
index 0000000..d76d82e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiled/operator/UnaryOpGen.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiled.operator;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+
+/**
+ * Interface for generators of unary operators
+ */
+public interface UnaryOpGen {
+
+    Type returnType(Type operandType);
+
+    void generate(JavaSource source, ExpressionTranslator visitor, TypedNode typedNode);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerBackend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerBackend.java
new file mode 100644
index 0000000..3d34b87
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerBackend.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+
+/**
+ * A compiler backend
+ */
+public interface CompilerBackend {
+
+    /**
+     * Process a stream of commands
+     * @param stream - the stream of commands
+     */
+    void handle(CommandStream stream);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerException.java
new file mode 100644
index 0000000..2ea40ac
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerException.java
@@ -0,0 +1,38 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler;
+
+public class CompilerException extends RuntimeException {
+
+    public CompilerException() {
+        super();
+    }
+
+    public CompilerException(String message) {
+        super(message);
+    }
+
+    public CompilerException(String message, Throwable throwable) {
+        super(message, throwable);
+    }
+
+    public CompilerException(Throwable throwable) {
+        super(throwable);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerFrontend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerFrontend.java
new file mode 100644
index 0000000..1b83ca1
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/CompilerFrontend.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler;
+
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Sightly compiler
+ */
+public interface CompilerFrontend {
+
+    /**
+     * Compile the source code to a stream of commands
+     * @param stream the output stream
+     * @param source the source code
+     */
+    void compile(PushStream stream, String source);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyCompilerService.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyCompilerService.java
new file mode 100644
index 0000000..b9eb745
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyCompilerService.java
@@ -0,0 +1,166 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.felix.scr.annotations.Activate;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.ReferenceCardinality;
+import org.apache.felix.scr.annotations.ReferencePolicy;
+import org.apache.felix.scr.annotations.References;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.debug.SanityChecker;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
+import org.apache.sling.scripting.sightly.impl.filter.Filter;
+import org.apache.sling.scripting.sightly.impl.html.dom.HtmlParserService;
+import org.apache.sling.scripting.sightly.impl.plugin.Plugin;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.SimpleFrontend;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.CoalescingWrites;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.DeadCodeRemoval;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.SequenceStreamTransformer;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.StreamTransformer;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.SyntheticMapRemoval;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.UnusedVariableRemoval;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.reduce.ConstantFolding;
+import org.osgi.service.component.ComponentContext;
+
+/**
+ * Implementation for the Sightly compiler
+ */
+@Component
+@Service(SightlyCompilerService.class)
+@References({
+        @Reference(
+                policy = ReferencePolicy.DYNAMIC,
+                referenceInterface = Filter.class,
+                name = "filterService",
+                cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
+        ),
+        @Reference(
+                policy = ReferencePolicy.DYNAMIC,
+                referenceInterface = Plugin.class,
+                name = "pluginService",
+                cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
+        )
+})
+public class SightlyCompilerService {
+
+    private List<Filter> filters = new ArrayList<Filter>();
+    private List<Plugin> plugins = new ArrayList<Plugin>();
+
+    private volatile StreamTransformer optimizer;
+    private volatile CompilerFrontend frontend;
+    private volatile boolean initialised = false;
+
+    @Reference
+    protected HtmlParserService htmlParserService;
+
+    /**
+     * Compile the given markup source and feed it to the given backend
+     * @param source the HTML source code
+     * @param backend the backend that will process the command stream from the source
+     */
+    public void compile(String source, CompilerBackend backend, RenderContextImpl renderContext) {
+        initIfNeeded(renderContext);
+        PushStream stream = new PushStream();
+        SanityChecker.attachChecker(stream);
+        CommandStream optimizedStream = optimizer.transform(stream);
+        //optimizedStream.addHandler(LoggingHandler.INSTANCE);
+        backend.handle(optimizedStream);
+        frontend.compile(stream, source);
+    }
+
+    private void initIfNeeded(RenderContextImpl renderContext) {
+        if (!initialised) {
+            synchronized (this) {
+                if (!initialised) {
+                    ArrayList<StreamTransformer> transformers = new ArrayList<StreamTransformer>();
+                    transformers.add(ConstantFolding.transformer(renderContext));
+                    transformers.add(DeadCodeRemoval.transformer(renderContext));
+                    transformers.add(SyntheticMapRemoval.TRANSFORMER);
+                    transformers.add(UnusedVariableRemoval.TRANSFORMER);
+                    transformers.add(CoalescingWrites.TRANSFORMER);
+                    optimizer = new SequenceStreamTransformer(transformers);
+                    initialised = true;
+                }
+            }
+        }
+    }
+
+    @Activate
+    protected void activate(ComponentContext context) {
+        initialised = false;
+        reloadFrontend();
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected void bindFilterService(Filter filter, Map<String, Object> properties) {
+        synchronized(filters) {
+            filters = add(filters, filter);
+            reloadFrontend();
+        }
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected void unbindFilterService(Filter filter, Map<String, Object> properties) {
+        synchronized (filters) {
+            filters = remove(filters, filter);
+            reloadFrontend();
+        }
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected void bindPluginService(Plugin plugin, Map<String, Object> properties) {
+        synchronized (plugins) {
+            plugins = add(plugins, plugin);
+            reloadFrontend();
+        }
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected void unbindPluginService(Plugin plugin, Map<String, Object> properties) {
+        synchronized (plugins) {
+            plugins = remove(plugins, plugin);
+            reloadFrontend();
+        }
+    }
+
+    private void reloadFrontend() {
+        frontend = new SimpleFrontend(htmlParserService, plugins, filters);
+    }
+
+    private static <T> List<T> add(List<T> list, T item) {
+        ArrayList<T> result = new ArrayList<T>(list);
+        result.add(item);
+        return result;
+    }
+
+    private static <T> List<T> remove(List<T> list, T item) {
+        ArrayList<T> result = new ArrayList<T>(list);
+        result.remove(item);
+        return result;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyJavaCompilerService.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyJavaCompilerService.java
new file mode 100644
index 0000000..d98fb8e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyJavaCompilerService.java
@@ -0,0 +1,322 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.List;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import org.apache.felix.scr.annotations.Activate;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.commons.classloader.ClassLoaderWriter;
+import org.apache.sling.commons.compiler.CompilationResult;
+import org.apache.sling.commons.compiler.CompilationUnit;
+import org.apache.sling.commons.compiler.CompilerMessage;
+import org.apache.sling.commons.compiler.Options;
+import org.apache.sling.jcr.compiler.JcrJavaCompiler;
+import org.apache.sling.scripting.sightly.ResourceResolution;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+/**
+ * The {@code SightlyJavaCompiler} allows for simple instantiation of arbitrary classes that are either stored in the repository
+ * or in regular OSGi bundles. It also compiles Java sources on-the-fly and can discover class' source files based on
+ * {@link Resource}s (typically Sling components). It supports Sling Resource type inheritance.
+ */
+@Component
+@Service(SightlyJavaCompilerService.class)
+public class SightlyJavaCompilerService {
+
+    private static final Logger LOG = LoggerFactory.getLogger(SightlyJavaCompilerService.class);
+
+    @Reference
+    private ClassLoaderWriter classLoaderWriter = null;
+
+    @Reference
+    private JcrJavaCompiler jcrJavaCompiler = null;
+
+    @Reference
+    private ResourceResolverFactory rrf = null;
+
+    private Options options;
+
+    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+    private Lock readLock = lock.readLock();
+    private Lock writeLock = lock.writeLock();
+
+    /**
+     * This method returns an Object instance based on a class that is either found through regular classloading mechanisms or on-the-fly
+     * compilation. In case the requested class does not denote a fully qualified classname, this service will try to find the class through
+     * Sling's servlet resolution mechanism and compile the class on-the-fly if required.
+     *
+     * @param resource  the lookup will be performed based on this resource
+     * @param className name of class to use for object instantiation
+     * @return object instance of the requested class
+     * @throws CompilerException in case of any runtime exception
+     */
+    public Object getInstance(Resource resource, String className) {
+
+        LOG.debug("Attempting to obtain bean instance of resource '{}' and class '{}'", resource.getPath(), className);
+
+        // assume fully qualified class name
+        if (className.contains(".")) {
+            Resource pojoResource = checkIfPojoIsInRepo(className);
+            if (pojoResource != null) {
+                return compileSource(pojoResource, className);
+            } else {
+                LOG.debug("fully qualified classname provided, loading object directly");
+                return loadObject(className);
+            }
+        }
+
+        LOG.debug("trying to find Java source based on resource: {}", resource.getPath());
+
+        // try to find Java source in JCR
+        // use the servlet resolver to do all the magic lookup (resource type hierarchy and search path) for us
+
+        Resource scriptResource = ResourceResolution
+                .resolveComponentRelative(resource.getResourceResolver(), resource, className + ".java");
+        if (scriptResource != null) {
+            LOG.debug("found Java bean script resource: " + scriptResource.getPath());
+            try {
+                return compileJavaResource(new SlingResourceCompilationUnit(scriptResource), scriptResource.getPath());
+            } catch (Exception e) {
+                throw new CompilerException(e);
+            }
+        } else {
+            // not found in JCR, try to load from bundle using current resource type package
+            // /apps/project/components/foo => apps.project.components.foo.<scriptName>
+            Resource resourceType = resource.getResourceResolver().getResource(resource.getResourceType());
+
+            if (resourceType == null) {
+                resourceType = resource;
+            }
+
+            String resourceTypeDir = resourceType.getPath();
+            className = getJavaNameFromPath(resourceTypeDir) + "." + className;
+
+            LOG.debug("Java bean source not found, trying to locate using" + " component directory as packagename: {}", resourceTypeDir);
+
+            LOG.debug("loading Java class: " + className);
+            return loadObject(className);
+        }
+    }
+
+    /**
+     * Compiles a class using the passed fully qualified classname and based on the resource that represents the class' source.
+     *
+     * @param javaResource resource that constitutes the class' source
+     * @param fqcn         fully qualified name of the class to compile
+     * @return object instance of the class to compile
+     * @throws CompilerException in case of any runtime exception
+     */
+    public Object compileSource(Resource javaResource, String fqcn) {
+        LOG.debug("Compiling Sightly based Java class from resource: " + javaResource.getPath());
+        try {
+            CompilationUnit compilationUnit = new SightlyCompilationUnit(javaResource, fqcn);
+            return compileJavaResource(compilationUnit, javaResource.getPath());
+        } catch (Exception e) {
+            throw new CompilerException(e);
+        }
+    }
+
+    /**
+     * Instantiate and return an instance of a class.
+     *
+     * @param className class to instantiate
+     * @return instance of class
+     */
+    private Object loadObject(String className) {
+        try {
+            return loadClass(className).newInstance();
+        } catch (Exception e) {
+            throw new CompilerException(e);
+        }
+    }
+
+    /**
+     * Retrieve a class from the ClassLoaderWriter service.
+     *
+     * @param name name of class to load
+     * @return Class
+     * @throws ClassNotFoundException
+     */
+    private Class loadClass(String name) throws ClassNotFoundException {
+        readLock.lock();
+        try {
+            if (classLoaderWriter != null) {
+                return classLoaderWriter.getClassLoader().loadClass(name);
+            }
+        } finally {
+            readLock.unlock();
+        }
+        return Class.forName(name);
+    }
+
+    /**
+     * Compiles a class stored in the repository and returns an instance of the compiled class.
+     *
+     * @param compilationUnit a compilation unit
+     * @param scriptPath      the path of the script to compile
+     * @return instance of compiled class
+     * @throws Exception
+     */
+    private Object compileJavaResource(CompilationUnit compilationUnit, String scriptPath) throws Exception {
+        writeLock.lock();
+        try {
+            long start = System.currentTimeMillis();
+            CompilationResult compilationResult = jcrJavaCompiler.compile(new String[]{scriptPath}, options);
+            long end = System.currentTimeMillis();
+            List<CompilerMessage> errors = compilationResult.getErrors();
+            if (errors != null && errors.size() > 0) {
+                throw new CompilerException(createErrorMsg(errors));
+            }
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("script compiled: {}", compilationResult.didCompile());
+                LOG.debug("compilation took {}ms", end - start);
+            }
+            return compilationResult.loadCompiledClass(compilationUnit.getMainClassName()).newInstance();
+        } finally {
+            writeLock.unlock();
+        }
+    }
+
+    @Activate
+    @SuppressWarnings("unused")
+    protected void activate() {
+        LOG.info("Activating {}", getClass().getName());
+
+        String version = System.getProperty("java.specification.version");
+        options = new Options();
+        options.put(Options.KEY_GENERATE_DEBUG_INFO, true);
+        options.put(Options.KEY_SOURCE_VERSION, version);
+        options.put(Options.KEY_TARGET_VERSION, version);
+        options.put(Options.KEY_CLASS_LOADER_WRITER, classLoaderWriter);
+    }
+
+    //---------------------------------- private -----------------------------------
+
+    /**
+     * Checks is a POJO class name is represented by a resource from the repository.
+     *
+     * @param className the class name
+     * @return the Resource in which the class is defined, {@code null} if the POJO was not found in the repository
+     */
+    private Resource checkIfPojoIsInRepo(String className) {
+        // POJOs will always be loaded through the compiler (prevents stale class loader issues)
+        String pojoPath = "/" + className.replaceAll("\\.", "/") + ".java";
+        ResourceResolver rr = null;
+        try {
+            rr = rrf.getAdministrativeResourceResolver(null);
+            Resource pojoResource = rr.getResource(pojoPath);
+            if (pojoResource != null) {
+                for (String s : rr.getSearchPath()) {
+                    if (pojoPath.startsWith(s)) {
+                        return pojoResource;
+                    }
+                }
+            }
+        } catch (LoginException le) {
+            LOG.error("Cannot search repository for POJO.", le);
+        } finally {
+            if (rr != null) {
+                rr.close();
+            }
+        }
+        return null;
+    }
+
+    private String getJavaNameFromPath(String path) {
+        if (path.endsWith(".java")) {
+            path = path.substring(0, path.length() - 5);
+        }
+        return path.substring(1).replace("/", ".").replace("-", "_");
+    }
+
+    private String createErrorMsg(List<CompilerMessage> errors) {
+        final StringBuilder buffer = new StringBuilder();
+        buffer.append("Compilation errors in ");
+        buffer.append(errors.get(0).getFile());
+        buffer.append(":");
+        StringBuilder errorsBuffer = new StringBuilder();
+        boolean duplicateVariable = false;
+        for (final CompilerMessage e : errors) {
+            if (!duplicateVariable) {
+                if (e.getMessage().contains("Duplicate local variable")) {
+                    duplicateVariable = true;
+                    buffer.append(" Maybe you defined more than one identical block elements without defining a different variable for "
+                            + "each one?");
+                }
+            }
+            errorsBuffer.append("\nLine ");
+            errorsBuffer.append(e.getLine());
+            errorsBuffer.append(", column ");
+            errorsBuffer.append(e.getColumn());
+            errorsBuffer.append(" : ");
+            errorsBuffer.append(e.getMessage());
+        }
+        buffer.append(errorsBuffer);
+        return buffer.toString();
+    }
+
+    class SlingResourceCompilationUnit implements CompilationUnit {
+        private final Resource resource;
+
+        public SlingResourceCompilationUnit(Resource resource) {
+            this.resource = resource;
+        }
+
+        public Reader getSource() throws IOException {
+            return new InputStreamReader(resource.adaptTo(InputStream.class), "UTF-8");
+        }
+
+        public String getMainClassName() {
+            return getJavaNameFromPath(resource.getPath());
+        }
+
+        public long getLastModified() {
+            return resource.getResourceMetadata().getModificationTime();
+        }
+    }
+
+    class SightlyCompilationUnit extends SlingResourceCompilationUnit {
+        private String fqcn;
+
+        public SightlyCompilationUnit(Resource resource, String fqcn) {
+            super(resource);
+            this.fqcn = fqcn;
+        }
+
+        public String getMainClassName() {
+            return fqcn;
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyParsingException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyParsingException.java
new file mode 100644
index 0000000..545b82b
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/SightlyParsingException.java
@@ -0,0 +1,59 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler;
+
+import org.apache.sling.scripting.sightly.SightlyException;
+
+/**
+ * The runtime {@code SightlyParsingException} is thrown during the parsing stage for any grammar offending input.
+ */
+public class SightlyParsingException extends SightlyException {
+
+    private String offendingInput;
+
+    public SightlyParsingException() {
+    }
+
+    public SightlyParsingException(String message) {
+        super(message);
+    }
+
+    public SightlyParsingException(String message, String offendingInput) {
+        super(message);
+        this.offendingInput = offendingInput;
+    }
+
+    public SightlyParsingException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public SightlyParsingException(String message, String offendingInput, Throwable cause) {
+        super(message, cause);
+        this.offendingInput = offendingInput;
+    }
+
+    public SightlyParsingException(Throwable cause) {
+        super(cause);
+    }
+
+    public String getOffendingInput() {
+        return offendingInput;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/Syntax.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/Syntax.java
new file mode 100644
index 0000000..2a33a32
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/Syntax.java
@@ -0,0 +1,79 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler;
+
+import java.util.Arrays;
+
+import org.apache.sling.scripting.sightly.impl.plugin.PluginCallInfo;
+
+/**
+ * Sightly Syntax specific elements
+ */
+public class Syntax {
+
+    public static final String SLY_COMMENT_PREFIX = "<!--/*";
+
+    public static final String SLY_COMMENT_SUFFIX = "*/-->";
+
+    public static final String PLUGIN_ATTRIBUTE_PREFIX = "data-sly-";
+
+    public static final String DEFAULT_LIST_ITEM_VAR_NAME = "item";
+
+    public static final String ITEM_LOOP_STATUS_SUFFIX = "List";
+
+    public static final String CONTEXT_OPTION = "context";
+
+    public static final String MAP_ITEM_KEY_PROPERTY = "key";
+
+    public static final String MAP_ITEM_VALUE_PROPERTY = "value";
+
+    public static final String LENGTH_PROPERTY = "size";
+
+    /**
+     * Checks whether a piece of text represents a Sightly comment
+     * @param text - the text
+     * @return - true if it is a Sightly comment, false otherwise
+     */
+    public static boolean isSightlyComment(String text) {
+        //todo: performance concern
+        String trimmed = text.trim();
+        return trimmed.startsWith(SLY_COMMENT_PREFIX) && trimmed.endsWith(SLY_COMMENT_SUFFIX);
+    }
+
+    public static boolean isPluginAttribute(String attributeName) {
+        return attributeName.startsWith(PLUGIN_ATTRIBUTE_PREFIX);
+    }
+
+    public static PluginCallInfo parsePluginAttribute(String attributeName) {
+        if (!isPluginAttribute(attributeName)) {
+            return null;
+        }
+        String fragment = attributeName.substring(PLUGIN_ATTRIBUTE_PREFIX.length());
+        String[] parts = fragment.split("\\.");
+        if (parts.length == 0) {
+            return null;
+        }
+        return new PluginCallInfo(parts[0], Arrays.copyOfRange(parts, 1, parts.length));
+    }
+
+    public static String itemLoopStatusVariable(String itemVariable) {
+        return itemVariable + ITEM_LOOP_STATUS_SUFFIX;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/common/DefaultPluginInvoke.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/common/DefaultPluginInvoke.java
new file mode 100644
index 0000000..81b3806
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/common/DefaultPluginInvoke.java
@@ -0,0 +1,108 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.common;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginCallInfo;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Empty implementation for plugin invocation. Use this to implement
+ * methods selectively.
+ * @see org.apache.sling.scripting.sightly.impl.plugin.Plugin
+ */
+public class DefaultPluginInvoke implements PluginInvoke {
+
+    @Override
+    public void beforeElement(PushStream stream, String tagName) {
+        
+    }
+
+    @Override
+    public void beforeTagOpen(PushStream stream) {
+
+    }
+
+    @Override
+    public void beforeAttributes(PushStream stream) {
+
+    }
+
+    @Override
+    public void beforeAttribute(PushStream stream, String attributeName) {
+
+    }
+
+    @Override
+    public void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue) {
+
+    }
+
+    @Override
+    public void afterAttributeValue(PushStream stream, String attributeName) {
+
+    }
+
+    @Override
+    public void afterAttribute(PushStream stream, String attributeName) {
+
+    }
+
+    @Override
+    public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
+
+    }
+
+    @Override
+    public void afterAttributes(PushStream stream) {
+
+    }
+
+    @Override
+    public void afterTagOpen(PushStream stream) {
+
+    }
+
+    @Override
+    public void beforeChildren(PushStream stream) {
+
+    }
+
+    @Override
+    public void afterChildren(PushStream stream) {
+
+    }
+
+    @Override
+    public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
+
+    }
+
+    @Override
+    public void afterTagClose(PushStream stream, boolean isSelfClosing) {
+
+    }
+
+    @Override
+    public void afterElement(PushStream stream) {
+
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/LoggingHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/LoggingHandler.java
new file mode 100644
index 0000000..65e1331
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/LoggingHandler.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.debug;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandHandler;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Handler which logs all commands
+ */
+public final class LoggingHandler implements CommandHandler {
+
+    public static final LoggingHandler INSTANCE = new LoggingHandler();
+
+    private final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);
+
+    private LoggingHandler() {
+    }
+
+    @Override
+    public void onEmit(Command command) {
+        LOG.info("Emitting {}", command);
+    }
+
+    @Override
+    public void onError(String errorMessage) {
+        LOG.info("Error: {}", errorMessage);
+    }
+
+    @Override
+    public void onDone() {
+        LOG.info("Finished");
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/SanityChecker.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/SanityChecker.java
new file mode 100644
index 0000000..5946cad
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/debug/SanityChecker.java
@@ -0,0 +1,147 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.debug;
+
+import java.util.Stack;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandHandler;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+
+/**
+ * A visitor which checks a stream for correct closing of things
+ */
+public final class SanityChecker implements CommandVisitor, CommandHandler {
+
+    private enum NestedType {
+        CONDITIONAL, VARIABLE_BIND, LOOP
+    }
+
+    private final Stack<NestedType> stack = new Stack<NestedType>();
+    private int bufferPushCount;
+    private boolean inProcedure;
+
+    private SanityChecker() {
+    }
+
+    public static void attachChecker(CommandStream commandStream) {
+        commandStream.addHandler(new SanityChecker());
+    }
+
+    @Override
+    public void onEmit(Command command) {
+        command.accept(this);
+    }
+
+    @Override
+    public void onError(String errorMessage) {
+        throw new RuntimeException(errorMessage);
+    }
+
+    @Override
+    public void onDone() {
+        if (!stack.isEmpty()) {
+            throw new IllegalStateException("Unclosed commands left");
+        }
+        if (bufferPushCount > 0) {
+            throw new IllegalStateException("There are pushed buffer writers at stream end");
+        }
+    }
+
+
+    @Override
+    public void visit(Conditional.Start conditionalStart) {
+        stack.push(NestedType.CONDITIONAL);
+    }
+
+    @Override
+    public void visit(Conditional.End conditionalEnd) {
+        popCheck(NestedType.CONDITIONAL);
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        stack.push(NestedType.VARIABLE_BIND);
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+        popCheck(NestedType.VARIABLE_BIND);
+    }
+
+    @Override
+    public void visit(VariableBinding.Global globalAssignment) {
+    }
+
+    @Override
+    public void visit(OutVariable outVariable) {
+    }
+
+    @Override
+    public void visit(OutText outText) {
+    }
+
+    @Override
+    public void visit(Loop.Start loopStart) {
+        stack.push(NestedType.LOOP);
+    }
+
+    @Override
+    public void visit(Loop.End loopEnd) {
+        popCheck(NestedType.LOOP);
+    }
+
+    @Override
+    public void visit(Procedure.Start startProcedure) {
+        if (inProcedure) {
+            throw new IllegalStateException("Cannot have nested procedures: " + startProcedure.getName());
+        }
+        inProcedure = true;
+    }
+
+    @Override
+    public void visit(Procedure.End endProcedure) {
+        if (!inProcedure) {
+            throw new IllegalStateException("Procedure closing is unmatched");
+        }
+        inProcedure = false;
+    }
+
+    @Override
+    public void visit(Procedure.Call procedureCall) {
+    }
+
+    private void popCheck(NestedType nestedType) {
+        if (stack.isEmpty()) {
+            throw new IllegalStateException("Unbalanced command: " + nestedType);
+        }
+        NestedType top = stack.pop();
+        if (top != nestedType) {
+            throw new IllegalStateException("Command closing is unmatched. Expected " + top + ", actual: " + nestedType);
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/Expression.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/Expression.java
new file mode 100644
index 0000000..cfae417
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/Expression.java
@@ -0,0 +1,106 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * This class represent a Sightly Expression.
+ */
+public class Expression {
+
+    private final Map<String, ExpressionNode> options;
+    private final ExpressionNode root;
+
+    public Expression(ExpressionNode root, Map<String, ExpressionNode> options) {
+        this.root = root;
+        this.options = new HashMap<String, ExpressionNode>(options);
+    }
+
+    public Expression(ExpressionNode root) {
+        this(root, Collections.<String, ExpressionNode>emptyMap());
+    }
+
+    /**
+     * Get the options for this expression
+     * @return - the expression options
+     */
+    public Map<String, ExpressionNode> getOptions() {
+        return Collections.unmodifiableMap(options);
+    }
+
+    /**
+     * Get the root node of this expression
+     * @return - the root expression node
+     */
+    public ExpressionNode getRoot() {
+        return root;
+    }
+
+    /**
+     * Get the option with the specified name
+     * @param name the name of the option
+     * @return the expression node for the option value, or null if the
+     * option is not in the expression
+     */
+    public ExpressionNode getOption(String name) {
+        return options.get(name);
+    }
+
+    /**
+     * Return an expression where the given options are no longer present
+     * @param removedOptions the options to be removed
+     * @return a copy where the mention options are no longer present
+     */
+    public Expression removeOptions(String ... removedOptions) {
+        HashMap<String, ExpressionNode> newOptions = new HashMap<String, ExpressionNode>(options);
+        for (String option : removedOptions) {
+            newOptions.remove(option);
+        }
+        return new Expression(root, newOptions);
+    }
+
+    /**
+     * Return a copy, but with the specified node as root
+     * @param node the new root
+     * @return a copy with a new root
+     */
+    public Expression withNode(ExpressionNode node) {
+        return new Expression(node, options);
+    }
+
+    /**
+     * Checks whether the expression has the specified option
+     * @param name the name of the option
+     * @return true if the option is present, false otherwise
+     */
+    public boolean containsOption(String name) {
+        return options.containsKey(name);
+    }
+
+    @Override
+    public String toString() {
+        return "Expression{" +
+                "options=" + getOptions() +
+                ", root=" + root +
+                '}';
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/ExpressionNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/ExpressionNode.java
new file mode 100644
index 0000000..4514fdb
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/ExpressionNode.java
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression;
+
+/**
+ * ExpressionNode in a Sightly expression tree
+ */
+public interface ExpressionNode {
+
+    /**
+     * Accept a visitor to process this node.
+     * @param visitor The visitor
+     */
+    <T> T accept(NodeVisitor<T> visitor);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/NodeVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/NodeVisitor.java
new file mode 100644
index 0000000..c829741
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/NodeVisitor.java
@@ -0,0 +1,64 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.expression;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+
+/**
+ * Visitor for all expression nodes
+ */
+public interface NodeVisitor<T> {
+
+    T evaluate(PropertyAccess propertyAccess);
+
+    T evaluate(Identifier identifier);
+
+    T evaluate(StringConstant text);
+
+    T evaluate(BinaryOperation binaryOperation);
+
+    T evaluate(BooleanConstant booleanConstant);
+
+    T evaluate(NumericConstant numericConstant);
+
+    T evaluate(UnaryOperation unaryOperation);
+
+    T evaluate(TernaryOperator ternaryOperator);
+
+    T evaluate(RuntimeCall runtimeCall);
+
+    T evaluate(MapLiteral mapLiteral);
+
+    T evaluate(ArrayLiteral arrayLiteral);
+
+    T evaluate(NullLiteral nullLiteral);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/ArrayLiteral.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/ArrayLiteral.java
new file mode 100644
index 0000000..02182cb
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/ArrayLiteral.java
@@ -0,0 +1,47 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Syntactical structure for an array of items
+ */
+public class ArrayLiteral implements ExpressionNode {
+
+    private final List<ExpressionNode> items;
+
+    public ArrayLiteral(List<ExpressionNode> items) {
+        this.items = new ArrayList<ExpressionNode>(items);
+    }
+
+    public List<ExpressionNode> getItems() {
+        return Collections.unmodifiableList(items);
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Atom.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Atom.java
new file mode 100644
index 0000000..03c7869
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Atom.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+
+/**
+ * Nodes that can be translated to simple text, like identifiers
+ * or string constants.
+ */
+public interface Atom extends ExpressionNode {
+
+    /**
+     * Get the text content for this node
+     * @return The text content
+     */
+    String getText();
+
+}
+
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperation.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperation.java
new file mode 100644
index 0000000..5847788
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperation.java
@@ -0,0 +1,66 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * An expression where a binary operator is applied.
+ * Ex.: "a AND b"
+ */
+public class BinaryOperation implements ExpressionNode {
+
+    private BinaryOperator operator;
+    private ExpressionNode leftOperand;
+    private ExpressionNode rightOperand;
+
+    public BinaryOperation(BinaryOperator operator, ExpressionNode leftOperand, ExpressionNode rightOperand) {
+        this.operator = operator;
+        this.leftOperand = leftOperand;
+        this.rightOperand = rightOperand;
+    }
+
+    public BinaryOperator getOperator() {
+        return operator;
+    }
+
+    public ExpressionNode getLeftOperand() {
+        return leftOperand;
+    }
+
+    public ExpressionNode getRightOperand() {
+        return rightOperand;
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    @Override
+    public String toString() {
+        return "BinaryOperation{" +
+                "operator=" + operator +
+                ", leftOperand=" + leftOperand +
+                ", rightOperand=" + rightOperand +
+                '}';
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperator.java
new file mode 100644
index 0000000..1805af6
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BinaryOperator.java
@@ -0,0 +1,218 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Binary operators used in expressions
+ */
+public enum BinaryOperator {
+    // logical conjunction
+    AND {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return (renderContext.toBoolean(left)) ? right : left;
+        }
+    },
+    // logical disjunction
+    OR {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return (renderContext.toBoolean(left)) ? left : right;
+        }
+    },
+    // string concatenation
+    CONCATENATE
+    {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return renderContext.toString(left).concat(renderContext.toString(right));
+        }
+    },
+    // less-than
+    LT {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return lt(left, right);
+        }
+    },
+    // less or equal
+    LEQ {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return leq(left, right);
+        }
+    },
+    // greater than
+    GT {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return !leq(left, right);
+        }
+    },
+    // greater or equal
+    GEQ {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return !lt(left, right);
+        }
+    },
+    // equal
+    EQ {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return eq(left, right);
+        }
+    },
+    // not equal
+    NEQ {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return !eq(left, right);
+        }
+
+    },
+    // strict version of equality, restricted to just some types
+    STRICT_EQ {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return strictEq(left, right);
+        }
+    },
+    // strict version of the not-equal operator
+    STRICT_NEQ
+    {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return !strictEq(left, right);
+        }
+    },
+    // addition
+    ADD {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return adjust(renderContext.toNumber(left).doubleValue()
+                + renderContext.toNumber(right).doubleValue());
+        }
+    },
+
+    // difference
+    SUB {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return adjust(renderContext.toNumber(left).doubleValue()
+                - renderContext.toNumber(right).doubleValue());
+        }
+    },
+    // multiplication
+    MUL {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return adjust(renderContext.toNumber(left).doubleValue()
+                * renderContext.toNumber(right).doubleValue());
+        }
+    },
+    // floating point division
+    DIV {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return adjust(renderContext.toNumber(left).doubleValue()
+                / renderContext.toNumber(right).doubleValue());
+        }
+    },
+
+    // integer division
+    I_DIV {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return adjust(renderContext.toNumber(left).intValue()
+                / renderContext.toNumber(right).intValue());
+        }
+    },
+
+    // reminder
+    REM
+    {
+        @Override
+        public Object eval(RenderContext renderContext, Object left, Object right) {
+            return adjust(renderContext.toNumber(left).intValue()
+                % renderContext.toNumber(right).intValue());
+        }
+
+    };
+
+    public static String OBJECT_NAME = BinaryOperator.class.getName();
+    public static String METHOD_STRICT_EQ = "strictEq";
+    public static String METHOD_LEQ = "leq";
+    public static String METHOD_LT = "lt";
+
+    private static boolean eq(Object left, Object right) {
+        if (left == null) {
+            return right == null;
+        }
+        return left.equals(right);
+    }
+
+    public static boolean lt(final Object left, final Object right) {
+        if (left instanceof Number && right instanceof Number) {
+            return ((Number) left).doubleValue() < ((Number) right).doubleValue();
+        }
+        throw new UnsupportedOperationException("Invalid types in comparison. Comparison is supported for Number types only");
+    }
+
+    public static boolean leq(final Object left, final Object right) {
+        if (left instanceof Number && right instanceof Number) {
+            return ((Number) left).doubleValue() <= ((Number) right).doubleValue();
+        }
+        throw new UnsupportedOperationException("Invalid types in comparison. Comparison is supported for Number types only");
+    }
+
+
+   public static boolean strictEq(Object left, Object right) {
+       if (left instanceof Number && right instanceof Number) {
+           return ((Number) left).doubleValue() == ((Number) right).doubleValue();
+       }
+       if (left instanceof String && right instanceof String) {
+           return left.equals(right);
+       }
+       if (left instanceof Boolean && right instanceof Boolean) {
+           return left.equals(right);
+       }
+       if (left == null && right == null) {
+           return true;
+       }
+       if (left == null || right == null) {
+           Object notNull = (left != null) ? left : right;
+           if (notNull instanceof String || notNull instanceof Boolean || notNull instanceof Number) {
+               return false;
+           }
+       }
+       throw new UnsupportedOperationException("Invalid types in comparison. Equality is supported for String, Number & Boolean types");
+   }
+
+   private static Number adjust(double x) {
+       if (Math.floor(x) == x) {
+           return (int)x;
+       }
+       return x;
+   }
+
+     public abstract Object eval(RenderContext renderContext, Object left, Object right);
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BooleanConstant.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BooleanConstant.java
new file mode 100644
index 0000000..c332ba2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/BooleanConstant.java
@@ -0,0 +1,65 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Boolean constant.
+ * Ex: "true" or "false"
+ */
+public class BooleanConstant implements Atom {
+
+    private String rawText;
+
+    public static final BooleanConstant FALSE = new BooleanConstant(Boolean.toString(false));
+    public static final BooleanConstant TRUE = new BooleanConstant(Boolean.toString(true));
+
+    public BooleanConstant(String text) {
+        this.rawText = text;
+    }
+
+    public BooleanConstant(boolean value) {
+        this(Boolean.toString(value));
+    }
+
+    public boolean getValue() {
+        return Boolean.parseBoolean(rawText);
+    }
+
+
+    @Override
+    public String getText() {
+        return rawText;
+    }
+
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    @Override
+    public String toString() {
+        return "BooleanConstant{" +
+                "rawText='" + rawText + '\'' +
+                '}';
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Identifier.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Identifier.java
new file mode 100644
index 0000000..2da33cb
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/Identifier.java
@@ -0,0 +1,64 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * A single variable. Ex: "myVar"
+ */
+public class Identifier implements Atom {
+
+    private final String name;
+
+    /**
+     * Create an identifier
+     * @param name the name of the identifier
+     */
+    public Identifier(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    /**
+     * Retrieve the name of the identifier
+     * @return the name string
+     */
+    public String getName() {
+        return name;
+    }
+
+
+    @Override
+    public String getText() {
+        return getName();
+    }
+
+    @Override
+    public String toString() {
+        return "Identifier{" +
+                "name='" + name + '\'' +
+                '}';
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/MapLiteral.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/MapLiteral.java
new file mode 100644
index 0000000..72c2b99
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/MapLiteral.java
@@ -0,0 +1,65 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * A syntactical construction representing a map
+ */
+public class MapLiteral implements ExpressionNode {
+
+    private Map<String, ExpressionNode> map;
+
+    public static final MapLiteral EMPTY = new MapLiteral(new HashMap<String, ExpressionNode>());
+
+    public MapLiteral(Map<String, ExpressionNode> map) {
+        this.map = new HashMap<String, ExpressionNode>();
+        this.map.putAll(map);
+    }
+
+    public Map<String, ExpressionNode> getMap() {
+        return Collections.unmodifiableMap(map);
+    }
+
+    public ExpressionNode getValue(String property) {
+        return map.get(property);
+    }
+
+    public boolean containsKey(String name) {
+        return map.containsKey(name);
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    @Override
+    public String toString() {
+        return "MapLiteral{" +
+                "map=" + map +
+                '}';
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NullLiteral.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NullLiteral.java
new file mode 100644
index 0000000..e7166b2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NullLiteral.java
@@ -0,0 +1,38 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * The null literal
+ */
+public final class NullLiteral implements ExpressionNode {
+
+    public static final NullLiteral INSTANCE = new NullLiteral();
+
+    private NullLiteral() {
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NumericConstant.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NumericConstant.java
new file mode 100644
index 0000000..f3bd1ec
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/NumericConstant.java
@@ -0,0 +1,80 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Numeric constant expression.
+ * Ex: "42.1"
+ */
+public class NumericConstant implements Atom {
+
+    public static final NumericConstant ZERO = new NumericConstant(0);
+    public static final NumericConstant ONE = new NumericConstant(1);
+    public static final NumericConstant TWO = new NumericConstant(2);
+
+    private final String text;
+    private final Number value;
+
+    /**
+     * Create a numeric constant
+     * @param text - the text representation
+     * @throws java.lang.NumberFormatException - if the text is not in a numeric format
+     */
+    public NumericConstant(String text) {
+        this.text = text;
+        this.value = parseNumber(text);
+    }
+
+    public NumericConstant(Number value) {
+        this.value = value.longValue();
+        this.text = value.toString();
+    }
+
+    public Number getValue() {
+        return value;
+    }
+
+    @Override
+    public String getText() {
+        return text;
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    @Override
+    public String toString() {
+        return "NumericConstant{" +
+                "text='" + text + '\'' +
+                '}';
+    }
+
+    private Number parseNumber(String s) {
+        try {
+            return Long.parseLong(s);
+        } catch (NumberFormatException e) {
+            return Double.parseDouble(s);
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/PropertyAccess.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/PropertyAccess.java
new file mode 100644
index 0000000..7f07790
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/PropertyAccess.java
@@ -0,0 +1,99 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Expressions in which a property is queried for an object.
+ * Ex.: "E.prop"
+ */
+public class PropertyAccess implements ExpressionNode {
+
+    private final ExpressionNode target;
+    private final ExpressionNode property;
+
+    /**
+     * Create a property access node
+     * @param target The expression for the object being accessed
+     * @param property The name of the property
+     */
+    public PropertyAccess(ExpressionNode target, ExpressionNode property) {
+        this.target = target;
+        this.property = property;
+    }
+
+    public PropertyAccess(ExpressionNode target, String property) {
+        this.target = target;
+        this.property = new StringConstant(property);
+    }
+
+    /**
+     * Build a chained property access node with the given target and the specified properties
+     * @param target The target node
+     * @param properties A non-empty list of property names
+     * @throws IllegalArgumentException if the list of properties is empty
+     */
+    public PropertyAccess(ExpressionNode target, Iterable<String> properties) {
+        String lastProp = null;
+        ExpressionNode result = target;
+        for (String property : properties) {
+            if (lastProp != null) {
+                result = new PropertyAccess(result, new StringConstant(lastProp));
+            }
+            lastProp = property;
+        }
+        if (lastProp == null) {
+            throw new IllegalArgumentException("The list of properties must be non-empty");
+        }
+        this.target = result;
+        this.property = new StringConstant(lastProp);
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    /**
+     * The object being accessed
+     * @return a node representing the object being accessed
+     */
+    public ExpressionNode getTarget() {
+        return target;
+    }
+
+    /**
+     * Return the property name
+     * @return the property name
+     */
+    public ExpressionNode getProperty() {
+        return property;
+    }
+
+    @Override
+    public String toString() {
+        return "PropertyAccess{" +
+                "target=" + target +
+                ", property='" + property + '\'' +
+                '}';
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/RuntimeCall.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/RuntimeCall.java
new file mode 100644
index 0000000..3cbc61e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/RuntimeCall.java
@@ -0,0 +1,67 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Special expression which provides access to utility functions from
+ * the runtime. This mechanism should not be abused!
+ */
+public class RuntimeCall implements ExpressionNode {
+
+    private final String functionName;
+    private final List<ExpressionNode> arguments;
+
+    public RuntimeCall(String functionName, ExpressionNode... arguments) {
+        this(functionName, Arrays.asList(arguments));
+    }
+
+    public RuntimeCall(String functionName, List<ExpressionNode> arguments) {
+        this.functionName = functionName;
+        this.arguments = new ArrayList<ExpressionNode>(arguments);
+    }
+
+    /**
+     * Get the name of the function
+     * @return - the name of the function
+     */
+    public String getFunctionName() {
+        return functionName;
+    }
+
+    /**
+     * Get the nodes of the argument calls
+     * @return - an array of nodes
+     */
+    public List<ExpressionNode> getArguments() {
+        return Collections.unmodifiableList(arguments);
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/StringConstant.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/StringConstant.java
new file mode 100644
index 0000000..544d925
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/StringConstant.java
@@ -0,0 +1,61 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Simple string constant. Ex: "'hello'"
+ */
+public class StringConstant implements Atom {
+
+    private String text;
+
+    public static final StringConstant EMPTY = new StringConstant("");
+
+    /**
+     * Create a string constant node
+     * @param text the string content (without it's original quotes).
+     */
+    public StringConstant(String text) {
+        this.text = text;
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    /**
+     * Get the string content - it strips the quotes from the string
+     * @return a string inner content
+     */
+    @Override
+    public String getText() {
+        return text;
+    }
+
+    @Override
+    public String toString() {
+        return "StringConstant{" +
+                "text='" + text + '\'' +
+                '}';
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/TernaryOperator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/TernaryOperator.java
new file mode 100644
index 0000000..6f9dfb8
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/TernaryOperator.java
@@ -0,0 +1,65 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Defines the Sightly ternary operator: {@code condition ? then : else}.
+ */
+public class TernaryOperator implements ExpressionNode {
+
+    private ExpressionNode condition;
+    private ExpressionNode thenBranch;
+    private ExpressionNode elseBranch;
+
+    public TernaryOperator(ExpressionNode condition, ExpressionNode thenBranch, ExpressionNode elseBranch) {
+        this.condition = condition;
+        this.thenBranch = thenBranch;
+        this.elseBranch = elseBranch;
+    }
+
+    public ExpressionNode getCondition() {
+        return condition;
+    }
+
+    public ExpressionNode getThenBranch() {
+        return thenBranch;
+    }
+
+    public ExpressionNode getElseBranch() {
+        return elseBranch;
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    @Override
+    public String toString() {
+        return "TernaryOperator{" +
+                "condition=" + condition +
+                ", thenBranch=" + thenBranch +
+                ", elseBranch=" + elseBranch +
+                '}';
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperation.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperation.java
new file mode 100644
index 0000000..846671e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperation.java
@@ -0,0 +1,58 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+
+/**
+ * Defines a unary operation (e.g. !variableName).
+ */
+public class UnaryOperation implements ExpressionNode {
+
+    private UnaryOperator operator;
+    private ExpressionNode target;
+
+    public UnaryOperation(UnaryOperator operator, ExpressionNode target) {
+        this.operator = operator;
+        this.target = target;
+    }
+
+    @Override
+    public <T> T accept(NodeVisitor<T> visitor) {
+        return visitor.evaluate(this);
+    }
+
+    public UnaryOperator getOperator() {
+        return operator;
+    }
+
+    public ExpressionNode getTarget() {
+        return target;
+    }
+
+    @Override
+    public String toString() {
+        return "UnaryOperation{" +
+                "operator=" + operator +
+                ", operand=" + target +
+                '}';
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperator.java
new file mode 100644
index 0000000..f78afc8
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/expression/node/UnaryOperator.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.expression.node;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Unary operators used in expressions
+ */
+public enum UnaryOperator {
+
+    /** Evaluates to logical negation of the operand */
+    NOT {
+        @Override
+        public Object eval(RenderContext renderContext, Object operand) {
+            return !renderContext.toBoolean(operand);
+        }
+    },
+
+    /** Evaluates whether the operand is a string of only whitespace characters */
+    IS_WHITESPACE  {
+        @Override
+        public Object eval(RenderContext renderContext, Object operand) {
+            return StringUtils.isWhitespace(renderContext.toString(operand));
+        }
+    },
+
+    /**
+     * Evaluates the length of a collection
+     */
+    LENGTH {
+        @Override
+        public Object eval(RenderContext renderContext, Object operand) {
+            return renderContext.toCollection(operand).size();
+        }
+    };
+
+    public abstract Object eval(RenderContext model, Object operand);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/AggregatePluginInvoke.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/AggregatePluginInvoke.java
new file mode 100644
index 0000000..842fa15
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/AggregatePluginInvoke.java
@@ -0,0 +1,151 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginCallInfo;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Plugin invoke which aggregates the behavior of several plugin invokes
+ */
+public class AggregatePluginInvoke implements PluginInvoke {
+
+    private final List<PluginInvoke> invokes;
+
+    public AggregatePluginInvoke(List<PluginInvoke> invokes) {
+        this.invokes = invokes;
+    }
+
+    @Override
+    public void beforeElement(PushStream stream, String tagName) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.beforeElement(stream, tagName);
+        }
+    }
+
+    @Override
+    public void beforeTagOpen(PushStream stream) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.beforeTagOpen(stream);
+        }
+    }
+
+    @Override
+    public void beforeAttributes(PushStream stream) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.beforeAttributes(stream);
+        }
+    }
+
+    @Override
+    public void beforeAttribute(PushStream stream, String attributeName) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.beforeAttribute(stream, attributeName);
+        }
+    }
+
+    @Override
+    public void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.beforeAttributeValue(stream, attributeName, attributeValue);
+        }
+    }
+
+    @Override
+    public void afterAttributeValue(PushStream stream, String attributeName) {
+        for (int i = invokes.size() - 1; i >= 0; i--) {
+            PluginInvoke invoke = invokes.get(i);
+            invoke.afterAttributeValue(stream, attributeName);
+        }
+    }
+
+    @Override
+    public void afterAttribute(PushStream stream, String attributeName) {
+        for (int i = invokes.size() - 1; i >= 0; i--) {
+            PluginInvoke invoke = invokes.get(i);
+            invoke.afterAttribute(stream, attributeName);
+        }
+    }
+
+    @Override
+    public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.onPluginCall(stream, callInfo, expression);
+        }
+    }
+
+    @Override
+    public void afterAttributes(PushStream stream) {
+        for (int i = invokes.size() - 1; i >= 0; i--) {
+            PluginInvoke invoke = invokes.get(i);
+            invoke.afterAttributes(stream);
+        }
+    }
+
+    @Override
+    public void afterTagOpen(PushStream stream) {
+        for (int i = invokes.size() - 1; i >= 0; i--) {
+            PluginInvoke invoke = invokes.get(i);
+            invoke.afterTagOpen(stream);
+        }
+    }
+
+    @Override
+    public void beforeChildren(PushStream stream) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.beforeChildren(stream);
+        }
+    }
+
+    @Override
+    public void afterChildren(PushStream stream) {
+        for (int i = invokes.size() - 1; i >= 0; i--) {
+            PluginInvoke invoke = invokes.get(i);
+            invoke.afterChildren(stream);
+        }
+    }
+
+    @Override
+    public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
+        for (PluginInvoke invoke : invokes) {
+            invoke.beforeTagClose(stream, isSelfClosing);
+        }
+    }
+
+    @Override
+    public void afterTagClose(PushStream stream, boolean isSelfClosing) {
+        for (int i = invokes.size() - 1; i >= 0; i--) {
+            PluginInvoke invoke = invokes.get(i);
+            invoke.afterTagClose(stream, isSelfClosing);
+        }
+    }
+
+    @Override
+    public void afterElement(PushStream stream) {
+        for (int i = invokes.size() - 1; i >= 0; i--) {
+            PluginInvoke invoke = invokes.get(i);
+            invoke.afterElement(stream);
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/CompilerContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/CompilerContext.java
new file mode 100644
index 0000000..25e848e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/CompilerContext.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import org.apache.sling.scripting.sightly.impl.compiler.Syntax;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.plugin.MarkupContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.SymbolGenerator;
+
+
+/**
+ * Default implementation for the compiler context
+ * @see org.apache.sling.scripting.sightly.impl.plugin.Plugin
+ */
+public class CompilerContext {
+
+    private SymbolGenerator symbolGenerator;
+    private ExpressionWrapper expressionWrapper;
+
+    public CompilerContext(SymbolGenerator symbolGenerator, ExpressionWrapper wrapper) {
+        this.symbolGenerator = symbolGenerator;
+        this.expressionWrapper = wrapper;
+    }
+
+    public String generateVariable(String hint) {
+        return symbolGenerator.next(hint);
+    }
+
+    public Expression adjustToContext(Expression expression, MarkupContext context) {
+        if (!expression.getOptions().containsKey(Syntax.CONTEXT_OPTION)) {
+            return expressionWrapper.adjustToContext(expression, context);
+        }
+        return expression;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ElementContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ElementContext.java
new file mode 100644
index 0000000..416bbc7
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ElementContext.java
@@ -0,0 +1,106 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import java.util.AbstractMap;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginCallInfo;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginInvoke;
+
+/**
+ * Data structure used by {@link MarkupHandler}.
+ */
+public class ElementContext {
+    private final String tagName;
+    private final String openTagStartMarkup;
+
+    private final List<PrioritizedInvoke> invokeList = new ArrayList<PrioritizedInvoke>();
+    private final List<Map.Entry<String, Object>> attributes = new ArrayList<Map.Entry<String, Object>>();
+    private PluginInvoke aggregateInvoke;
+
+    public ElementContext(String tagName, String openTagStartMarkup) {
+        this.tagName = tagName;
+        this.openTagStartMarkup = openTagStartMarkup;
+    }
+
+    public String getTagName() {
+        return tagName;
+    }
+
+    public String getOpenTagStartMarkup() {
+        return openTagStartMarkup;
+    }
+
+    public void addPlugin(PluginInvoke invoke, int priority) {
+        invokeList.add(new PrioritizedInvoke(invoke, priority));
+    }
+
+    public void addAttribute(String name, String value) {
+        attributes.add(new AbstractMap.SimpleEntry<String, Object>(name, value));
+    }
+
+    public void addPluginCall(String name, PluginCallInfo info, Expression expression) {
+        attributes.add(new AbstractMap.SimpleEntry<String, Object>(name,
+                new AbstractMap.SimpleEntry<PluginCallInfo, Expression>(info, expression)));
+    }
+
+    public Iterable<Map.Entry<String, Object>> getAttributes() {
+        return attributes;
+    }
+
+    public PluginInvoke pluginInvoke() {
+        if (aggregateInvoke == null) {
+            Collections.sort(invokeList);
+            ArrayList<PluginInvoke> result = new ArrayList<PluginInvoke>();
+            for (PrioritizedInvoke prioritizedInvoke : invokeList) {
+                result.add(prioritizedInvoke.invoke);
+            }
+            aggregateInvoke = new AggregatePluginInvoke(result);
+        }
+        return aggregateInvoke;
+    }
+
+
+    private static final class PrioritizedInvoke implements Comparable<PrioritizedInvoke> {
+
+        private final PluginInvoke invoke;
+        private final int priority;
+
+        private PrioritizedInvoke(PluginInvoke invoke, int priority) {
+            this.invoke = invoke;
+            this.priority = priority;
+        }
+
+        @Override
+        public int compareTo(PrioritizedInvoke o) {
+            if (this.priority < o.priority) {
+                return -1;
+            } else if (this.priority == o.priority) {
+                return  0;
+            }
+            return 1;
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionParser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionParser.java
new file mode 100644
index 0000000..877868e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionParser.java
@@ -0,0 +1,55 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import org.antlr.v4.runtime.ANTLRInputStream;
+import org.antlr.v4.runtime.CommonTokenStream;
+import org.antlr.v4.runtime.RecognitionException;
+import org.apache.sling.scripting.sightly.impl.parser.expr.generated.SightlyLexer;
+import org.apache.sling.scripting.sightly.impl.parser.expr.generated.SightlyParser;
+
+public class ExpressionParser {
+
+    /**
+     * Parses the expression string.
+     *
+     * @param expressionString as defined by the Sightly spec (https://github.com/Adobe-Marketing-Cloud/sightly-spec/blob/master/SPECIFICATION.md)
+     * @return Parsed Expression object
+     * @throws NullPointerException is the given exprString is null
+     * @throws ParserException      if an error occurs while parsing the expression
+     */
+    public Interpolation parseInterpolation(String expressionString) throws ParserException {
+        SightlyParser parser = createParser(expressionString);
+        try {
+            return parser.interpolation().interp;
+        } catch (RecognitionException e) {
+            throw new ParserException(e);
+        }
+    }
+
+    private SightlyParser createParser(String string) {
+        SightlyLexer lexer = new SightlyLexer(new ANTLRInputStream(string));
+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);
+        SightlyParser parser = new SightlyParser(tokenStream);
+        parser.removeErrorListeners();
+        parser.addErrorListener(new SightlyParserErrorListener());
+        return parser;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionWrapper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionWrapper.java
new file mode 100644
index 0000000..58210b5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ExpressionWrapper.java
@@ -0,0 +1,118 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.Syntax;
+import org.apache.sling.scripting.sightly.impl.filter.Filter;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.plugin.MarkupContext;
+
+/**
+ * This object wraps expressions in filter applications depending
+ * on options
+ */
+public class ExpressionWrapper {
+
+    private final List<Filter> filters;
+
+    public ExpressionWrapper(Collection<Filter> filters) {
+        this.filters = new ArrayList<Filter>();
+        this.filters.addAll(filters);
+        Collections.sort(this.filters);
+    }
+
+    public Expression transform(Interpolation interpolation, MarkupContext markupContext) {
+        ArrayList<ExpressionNode> nodes = new ArrayList<ExpressionNode>();
+        HashMap<String, ExpressionNode> options = new HashMap<String, ExpressionNode>();
+        for (Fragment fragment : interpolation.getFragments()) {
+            if (fragment.isString()) {
+                nodes.add(new StringConstant(fragment.getText()));
+            } else {
+                Expression expression = fragment.getExpression();
+                options.putAll(expression.getOptions());
+                nodes.add(transformExpr(expression, markupContext).getRoot());
+            }
+        }
+        ExpressionNode root = join(nodes);
+        if (interpolation.size() > 1 && options.containsKey(Syntax.CONTEXT_OPTION)) {
+            //context must not be calculated by merging
+            options.remove(Syntax.CONTEXT_OPTION);
+        }
+        return new Expression(root, options);
+    }
+
+    private Expression applyFilters(Expression expression) {
+        Expression result = expression;
+        for (Filter filter : filters) {
+            result = filter.apply(result);
+        }
+        return result;
+    }
+
+    public Expression adjustToContext(Expression expression, MarkupContext markupContext) {
+        if (expression.containsOption(Syntax.CONTEXT_OPTION)) {
+            return expression;
+        }
+        Map<String, ExpressionNode> opt = addDefaultContext(Collections.<String, ExpressionNode>emptyMap(), markupContext);
+        Expression result = applyFilters(new Expression(expression.getRoot(), opt));
+        return expression.withNode(result.getRoot());
+    }
+
+    private ExpressionNode join(List<ExpressionNode> nodes) {
+        if (nodes.isEmpty()) {
+            return StringConstant.EMPTY;
+        }
+        ExpressionNode root = nodes.get(0);
+        for (int i = 1; i < nodes.size(); i++) {
+            ExpressionNode node = nodes.get(i);
+            root = new BinaryOperation(BinaryOperator.CONCATENATE, root, node);
+        }
+        return root;
+    }
+
+    private Expression transformExpr(Expression expression, MarkupContext markupContext) {
+        expression = addDefaultContext(expression, markupContext);
+        return applyFilters(expression);
+    }
+
+    private Expression addDefaultContext(Expression expression, MarkupContext context) {
+        return new Expression(expression.getRoot(), addDefaultContext(expression.getOptions(), context));
+    }
+
+    private Map<String, ExpressionNode> addDefaultContext(Map<String, ExpressionNode> options, MarkupContext context) {
+        if (context == null || options.containsKey(Syntax.CONTEXT_OPTION)) {
+            return options;
+        }
+        HashMap<String, ExpressionNode> newOptions = new HashMap<String, ExpressionNode>(options);
+        newOptions.put(Syntax.CONTEXT_OPTION, new StringConstant(context.getName()));
+        return newOptions;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Fragment.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Fragment.java
new file mode 100644
index 0000000..24efa95
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Fragment.java
@@ -0,0 +1,106 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+
+/**
+ * A segment in an interpolation.
+ */
+public interface Fragment {
+
+    boolean isString();
+    boolean isExpression();
+
+    Expression getExpression();
+    String getText();
+
+    /**
+     * A fragment which is an expression.
+     */
+    public static class Expr implements Fragment {
+
+        private Expression expression;
+
+        public Expr(Expression expression) {
+            this.expression = expression;
+        }
+
+        @Override
+        public Expression getExpression() {
+            return expression;
+        }
+
+        @Override
+        public String getText() {
+            throw new UnsupportedOperationException("Not a text fragment");
+        }
+
+        public boolean isString() {
+            return false;
+        }
+
+        public boolean isExpression() {
+            return true;
+        }
+
+        @Override
+        public String toString() {
+            return "Expr{" +
+                    "expression=" + expression +
+                    '}';
+        }
+    }
+
+    /**
+     * A text fragment.
+     */
+    public static class Text implements Fragment {
+        private String text;
+
+        public Text(String text) {
+            this.text = text;
+        }
+
+        @Override
+        public String getText() {
+            return text;
+        }
+
+        public boolean isString() {
+            return true;
+        }
+
+        public boolean isExpression() {
+            return false;
+        }
+
+        @Override
+        public Expression getExpression() {
+            throw new UnsupportedOperationException("Not an expression fragment");
+        }
+
+        @Override
+        public String toString() {
+            return "Text{" +
+                    "text='" + text + '\'' +
+                    '}';
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Interpolation.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Interpolation.java
new file mode 100644
index 0000000..c87089c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/Interpolation.java
@@ -0,0 +1,78 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+
+/**
+ * A sequence with alternating string fragments and Sightly expressions.
+ * These result from parsing HTML attributes or string nodes.
+ * For instance "Hello ${World}!" would result in 3 fragments:
+ * "Hello ", ${World} and "!"
+ */
+public class Interpolation {
+
+    //todo: this should be immutable to maintain the design consistent
+
+    private List<Fragment> fragments = new ArrayList<Fragment>();
+
+    public void addFragment(Fragment fragment) {
+        fragments.add(fragment);
+    }
+
+    public void addExpression(Expression expression) {
+        fragments.add(new Fragment.Expr(expression));
+    }
+
+    public void addText(String text) {
+        fragments.add(new Fragment.Text(text));
+    }
+
+    /**
+     * Get the number of fragments
+     * @return the number of fragments
+     */
+    public int size() {
+        return fragments.size();
+    }
+
+    /**
+     * Return the fragment with the specified index
+     * @param index - the index of the fragments. must be less than the size of the interpolation
+     * @return - the specified fragment
+     * @throws IndexOutOfBoundsException - if the index is negative or greater or equal than size
+     */
+    public Fragment getFragment(int index) {
+        return fragments.get(index);
+    }
+
+    public Iterable<Fragment> getFragments() {
+        return fragments;
+    }
+
+    @Override
+    public String toString() {
+        return "Interpolation{" +
+                "fragments=" + fragments +
+                '}';
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserException.java
new file mode 100644
index 0000000..259fb71
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserException.java
@@ -0,0 +1,41 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+/**
+ * Plugin runtime exception to be used for either html or expression parser exceptions.
+ */
+public class ParserException extends RuntimeException {
+
+    public ParserException() {
+        super();
+    }
+
+    public ParserException(String message) {
+        super(message);
+    }
+
+    public ParserException(String message, Throwable throwable) {
+        super(message, throwable);
+    }
+
+    public ParserException(Throwable throwable) {
+        super(throwable);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserHelper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserHelper.java
new file mode 100644
index 0000000..6c66b80
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/ParserHelper.java
@@ -0,0 +1,40 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+
+/**
+ * Helper utilities for the ANTLR parser
+ */
+public class ParserHelper {
+
+    public static String unEscape(String original) {
+        return original.replaceAll("\\\\\"", "\"").replaceAll("\\\\'", "'");
+    }
+
+    public static StringConstant createStringConstant(String original) {
+        String escaped = StringEscapeUtils.unescapeJava(original);
+        String trimmed = escaped.substring(1, escaped.length() - 1);
+        return new StringConstant(trimmed);
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SightlyParserErrorListener.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SightlyParserErrorListener.java
new file mode 100644
index 0000000..99a64ba
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SightlyParserErrorListener.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import java.util.Collections;
+import java.util.List;
+
+import org.antlr.v4.runtime.BaseErrorListener;
+import org.antlr.v4.runtime.CommonTokenStream;
+import org.antlr.v4.runtime.Parser;
+import org.antlr.v4.runtime.RecognitionException;
+import org.antlr.v4.runtime.Recognizer;
+import org.apache.sling.scripting.sightly.impl.compiler.SightlyParsingException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * The {@code SightlyParserErrorListener} handles parsing error reporting by sending offending input to a logger.
+ */
+public class SightlyParserErrorListener extends BaseErrorListener {
+
+    private static final Logger LOG = LoggerFactory.getLogger(SightlyParserErrorListener.class);
+
+    @Override
+    public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {
+        List<String> stack = ((Parser) recognizer).getRuleInvocationStack();
+        Collections.reverse(stack);
+        StringBuilder errorMessage = new StringBuilder();
+        errorMessage.append("Sightly syntax error detected.\n");
+        errorMessage.append("rule stack: ").append(stack).append("\n");
+        errorMessage.append("error starts at column: ").append(charPositionInLine).append("\n");
+        errorMessage.append(msg);
+        throw new SightlyParsingException("Sightly syntax error detected", ((CommonTokenStream) recognizer.getInputStream()).getTokenSource().getInputStream().toString(), e);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SimpleFrontend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SimpleFrontend.java
new file mode 100644
index 0000000..6ae39a5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/frontend/SimpleFrontend.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.frontend;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.CompilerFrontend;
+import org.apache.sling.scripting.sightly.impl.filter.Filter;
+import org.apache.sling.scripting.sightly.impl.html.dom.HtmlParserService;
+import org.apache.sling.scripting.sightly.impl.html.dom.MarkupHandler;
+import org.apache.sling.scripting.sightly.impl.plugin.Plugin;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * DOM-based compiler implementation
+ */
+public class SimpleFrontend implements CompilerFrontend {
+
+    private final HtmlParserService htmlParserService;
+    private final Map<String, Plugin> plugins;
+    private final List<Filter> filters;
+
+    public SimpleFrontend(HtmlParserService htmlParserService, Collection<Plugin> plugins, Collection<Filter> filters) {
+        this.plugins = new HashMap<String, Plugin>();
+        for (Plugin plugin : plugins) {
+            this.plugins.put(plugin.name(), plugin);
+        }
+        this.filters = new ArrayList<Filter>(filters);
+        this.htmlParserService = htmlParserService;
+    }
+
+    @Override
+    public void compile(PushStream stream, String source) {
+        MarkupHandler markupHandler = new MarkupHandler(stream, plugins, filters);
+        htmlParserService.parse(source, markupHandler);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CoalescingWrites.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CoalescingWrites.java
new file mode 100644
index 0000000..1818fa5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CoalescingWrites.java
@@ -0,0 +1,86 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandHandler;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Aggregate consecutive writes in bigger chunks of text
+ */
+public final class CoalescingWrites implements CommandHandler {
+
+    public static final StreamTransformer TRANSFORMER = new StreamTransformer() {
+        @Override
+        public CommandStream transform(CommandStream inStream) {
+            PushStream outputStream = new PushStream();
+            CoalescingWrites instance = new CoalescingWrites(outputStream);
+            inStream.addHandler(instance);
+            return outputStream;
+        }
+    };
+
+    private StringBuilder builder = new StringBuilder();
+    private final PushStream outStream;
+
+    private CoalescingWrites(PushStream stream) {
+        this.outStream = stream;
+    }
+
+    @Override
+    public void onEmit(Command command) {
+        String text = detectText(command);
+        if (text != null) {
+            builder.append(text);
+        } else {
+            flushText();
+            outStream.emit(command);
+        }
+    }
+
+
+    @Override
+    public void onError(String errorMessage) {
+        flushText();
+        outStream.signalError(errorMessage);
+    }
+
+    @Override
+    public void onDone() {
+        flushText();
+        outStream.signalDone();
+    }
+
+    private String detectText(Command command) {
+        if (command instanceof OutText) {
+            return  ((OutText) command).getText();
+        }
+        return null;
+    }
+
+    private void flushText() {
+        if (builder.length() > 0) {
+            outStream.emit(new OutText(builder.toString()));
+            builder = new StringBuilder();
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CommandVariableUsage.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CommandVariableUsage.java
new file mode 100644
index 0000000..1dea1d2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/CommandVariableUsage.java
@@ -0,0 +1,106 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+
+/**
+ * Extracts the variables used in a command
+ */
+public class CommandVariableUsage implements CommandVisitor {
+
+    private ArrayList<String> variables = new ArrayList<String>();
+
+    public static List<String> extractVariables(Command command) {
+        CommandVariableUsage cvu = new CommandVariableUsage();
+        command.accept(cvu);
+        return cvu.variables;
+    }
+
+    @Override
+    public void visit(Conditional.Start conditionalStart) {
+        variables.add(conditionalStart.getVariable());
+    }
+
+    @Override
+    public void visit(Conditional.End conditionalEnd) {
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        addFromExpression(variableBindingStart.getExpression());
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+    }
+
+    @Override
+    public void visit(VariableBinding.Global globalAssignment) {
+        addFromExpression(globalAssignment.getExpression());
+    }
+
+    private void addFromExpression(ExpressionNode node) {
+        variables.addAll(VariableFinder.findVariables(node));
+    }
+
+    @Override
+    public void visit(OutVariable outVariable) {
+        variables.add(outVariable.getVariableName());
+    }
+
+    @Override
+    public void visit(OutText outText) {
+    }
+
+    @Override
+    public void visit(Loop.Start loopStart) {
+        variables.add(loopStart.getListVariable());
+    }
+
+    @Override
+    public void visit(Loop.End loopEnd) {
+    }
+
+    @Override
+    public void visit(Procedure.Start startProcedure) {
+    }
+
+    @Override
+    public void visit(Procedure.End endProcedure) {
+    }
+
+    @Override
+    public void visit(Procedure.Call procedureCall) {
+        variables.add(procedureCall.getTemplateVariable());
+        variables.add(procedureCall.getArgumentsVariable());
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/DeadCodeRemoval.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/DeadCodeRemoval.java
new file mode 100644
index 0000000..6b5a48e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/DeadCodeRemoval.java
@@ -0,0 +1,136 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import java.util.Stack;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.EmitterVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.Streams;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.StatefulRangeIgnore;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.StatefulVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.TrackingVisitor;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Removes code under conditionals which are proven to fail. It is probably
+ * a good idea to run this optimization after running
+ * {@link org.apache.sling.scripting.sightly.impl.compiler.optimization.reduce.ConstantFolding}
+ */
+public class DeadCodeRemoval extends TrackingVisitor<Boolean> implements EmitterVisitor {
+    // this could be merged with constant folding for better accuracy
+
+    public static StreamTransformer transformer(final RenderContext renderContext) {
+        return new StreamTransformer() {
+            @Override
+            public CommandStream transform(CommandStream inStream) {
+                StatefulVisitor visitor = new StatefulVisitor();
+                DeadCodeRemoval dcr = new DeadCodeRemoval(visitor.getControl(), renderContext);
+                visitor.initializeWith(dcr);
+                Streams.connect(inStream, dcr.getOutputStream(), visitor);
+                return dcr.getOutputStream();
+            }
+        };
+    }
+
+    private final PushStream outStream = new PushStream();
+    private final StatefulVisitor.StateControl stateControl;
+    private final RenderContext renderContext;
+    private final Stack<Boolean> keepConditionalEndStack = new Stack<Boolean>();
+
+    public DeadCodeRemoval(StatefulVisitor.StateControl stateControl, RenderContext renderContext) {
+        this.stateControl = stateControl;
+        this.renderContext = renderContext;
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        Boolean truthValue = decodeConstantBool(variableBindingStart.getExpression());
+        tracker.pushVariable(variableBindingStart.getVariableName(), truthValue);
+        outStream.emit(variableBindingStart);
+    }
+
+    @Override
+    public void visit(Conditional.Start conditionalStart) {
+        Boolean truthValue = tracker.get(conditionalStart.getVariable());
+        boolean keepConditionalEnd;
+        if (truthValue == null) { //no information about the value of this variable
+            keepConditionalEnd = true;
+            outStream.emit(conditionalStart);
+        } else { //we already know what happens with this conditional. We can remove it
+            keepConditionalEnd = false;
+            if (truthValue != conditionalStart.getExpectedTruthValue()) {
+                //this conditional will always fail. We can ignore everything until
+                //the corresponding end-conditional
+                stateControl.push(new StatefulRangeIgnore(stateControl, Conditional.Start.class, Conditional.End.class));
+                return;
+            }
+        }
+        keepConditionalEndStack.push(keepConditionalEnd);
+    }
+
+    @Override
+    public void visit(Conditional.End conditionalEnd) {
+        boolean keep = keepConditionalEndStack.pop();
+        if (keep) {
+            outStream.emit(conditionalEnd);
+        }
+    }
+
+    @Override
+    public PushStream getOutputStream() {
+        return outStream;
+    }
+
+    @Override
+    protected Boolean assignDefault(Command command) {
+        return null;
+    }
+
+    @Override
+    protected void onCommand(Command command) {
+        outStream.emit(command);
+    }
+
+    private Boolean decodeConstantBool(ExpressionNode node) {
+        if (node instanceof StringConstant) {
+            return renderContext.toBoolean(((StringConstant) node).getText());
+        }
+        if (node instanceof BooleanConstant) {
+            return ((BooleanConstant) node).getValue();
+        }
+        if (node instanceof NumericConstant) {
+            return renderContext.toBoolean(((NumericConstant) node).getValue());
+        }
+        if (node instanceof NullLiteral) {
+            return renderContext.toBoolean(null);
+        }
+        return null;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SequenceStreamTransformer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SequenceStreamTransformer.java
new file mode 100644
index 0000000..d463304
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SequenceStreamTransformer.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+
+/**
+ * Applies a list of transformations in sequence
+ */
+public class SequenceStreamTransformer implements StreamTransformer {
+
+    private List<StreamTransformer> transformers;
+
+    public SequenceStreamTransformer(List<StreamTransformer> transformers) {
+        this.transformers = new ArrayList<StreamTransformer>(transformers);
+    }
+
+    @Override
+    public CommandStream transform(CommandStream inStream) {
+        CommandStream stream = inStream;
+        for (StreamTransformer transformer : transformers) {
+            stream = transformer.transform(stream);
+        }
+        return stream;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/StreamTransformer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/StreamTransformer.java
new file mode 100644
index 0000000..415ea5d
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/StreamTransformer.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+
+/**
+ * Interface for stream transformations
+ */
+public interface StreamTransformer {
+
+    /**
+     * Given the input stream, return a transformed out stream
+     * @param inStream the input stream
+     * @return the result stream
+     */
+    CommandStream transform(CommandStream inStream);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SyntheticMapRemoval.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SyntheticMapRemoval.java
new file mode 100644
index 0000000..dde82c0
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/SyntheticMapRemoval.java
@@ -0,0 +1,161 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.util.expression.NodeTransformer;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.EmitterVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.Streams;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.TrackingVisitor;
+
+/**
+ * This optimization handles variables initialized to map literals. It
+ * initially assigns the values in the map to variables and wherever
+ * the map literal is accessed, the property access is replaced with
+ * the value variable, thus removing the need for a map lookup.
+ */
+public final class SyntheticMapRemoval extends TrackingVisitor<MapLiteral> implements EmitterVisitor {
+
+    public static final StreamTransformer TRANSFORMER = new StreamTransformer() {
+        @Override
+        public CommandStream transform(CommandStream inStream) {
+            return Streams.map(inStream, new SyntheticMapRemoval());
+        }
+    };
+
+    private static final String VARIABLE_MARKER = "_field$_";
+
+    private final PushStream outputStream = new PushStream();
+    private final NodeTransformer transformer = new PropertyAccessTransformer();
+
+    private SyntheticMapRemoval() {
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        ExpressionNode node = variableBindingStart.getExpression();
+        String variable = variableBindingStart.getVariableName();
+        ExpressionNode transformed = transform(node);
+        if (transformed instanceof MapLiteral) {
+            MapLiteral newLiteral = overrideMap(variable, (MapLiteral) transformed);
+            tracker.pushVariable(variable, newLiteral);
+            transformed = newLiteral;
+        } else {
+            tracker.pushVariable(variable, null);
+        }
+        outputStream.emit(new VariableBinding.Start(variable, transformed));
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+        Map.Entry<String, MapLiteral> entry = tracker.peek();
+        super.visit(variableBindingEnd);
+        MapLiteral literal = entry.getValue();
+        if (literal != null) {
+            //need to un-bind all the introduced variables
+            for (int i = 0; i < literal.getMap().size(); i++) {
+                outputStream.emit(VariableBinding.END);
+            }
+        }
+    }
+
+    private ExpressionNode transform(ExpressionNode node) {
+        return transformer.transform(node);
+    }
+
+    private MapLiteral overrideMap(String variableName, MapLiteral mapLiteral) {
+        Map<String, ExpressionNode> newLiteral = new HashMap<String, ExpressionNode>();
+        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
+            String property = entry.getKey();
+            ExpressionNode valueNode = entry.getValue();
+            String valueVariable = valueVariableName(variableName, property);
+            newLiteral.put(property, new Identifier(valueVariable));
+            outputStream.emit(new VariableBinding.Start(valueVariable, valueNode));
+        }
+        return new MapLiteral(newLiteral);
+    }
+
+    private String valueVariableName(String variableName, String propertyName) {
+        return variableName + VARIABLE_MARKER + propertyName;
+    }
+
+    @Override
+    protected MapLiteral assignDefault(Command command) {
+        return null;
+    }
+
+    @Override
+    public void onCommand(Command command) {
+        outputStream.emit(command);
+    }
+
+    @Override
+    public PushStream getOutputStream() {
+        return outputStream;
+    }
+
+    private class PropertyAccessTransformer extends NodeTransformer {
+        @Override
+        public ExpressionNode evaluate(PropertyAccess propertyAccess) {
+            ExpressionNode target = propertyAccess.getTarget();
+            String variable = extractIdentifier(target);
+            if (variable != null) {
+                MapLiteral literal = tracker.get(variable);
+                if (literal != null) {
+                    String property = extractProperty(propertyAccess.getProperty());
+                    if (property != null) {
+                        ExpressionNode replacementNode = literal.getValue(property);
+                        if (replacementNode == null) {
+                            replacementNode = NullLiteral.INSTANCE;
+                        }
+                        return replacementNode;
+                    }
+                }
+            }
+            return super.evaluate(propertyAccess);
+        }
+
+        private String extractProperty(ExpressionNode expressionNode) {
+            if (expressionNode instanceof StringConstant) {
+                return ((StringConstant) expressionNode).getText();
+            }
+            return null;
+        }
+
+        private String extractIdentifier(ExpressionNode node) {
+            if (node instanceof Identifier) {
+                return ((Identifier) node).getName();
+            }
+            return null;
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/UnusedVariableRemoval.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/UnusedVariableRemoval.java
new file mode 100644
index 0000000..923b0a8
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/UnusedVariableRemoval.java
@@ -0,0 +1,161 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Stack;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.EmitterVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.Streams;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.TrackingVisitor;
+
+/**
+ * This optimization removes variables which are bound but
+ * never used in the command stream
+ */
+public final class UnusedVariableRemoval extends TrackingVisitor<UnusedVariableRemoval.VariableActivity> implements EmitterVisitor {
+
+    public static final StreamTransformer TRANSFORMER = new StreamTransformer() {
+        @Override
+        public CommandStream transform(CommandStream inStream) {
+            return Streams.map(inStream, new UnusedVariableRemoval());
+        }
+    };
+
+    private final PushStream outputStream = new PushStream();
+    private final Stack<List<Command>> storedCommandsStack = new Stack<List<Command>>();
+
+    private UnusedVariableRemoval() {
+    }
+
+    @Override
+    public PushStream getOutputStream() {
+        return outputStream;
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        //push a new buffer where we will store the following commands
+        //these commands will be emitted only if this variable will be used in
+        //it's scope
+        storedCommandsStack.push(new ArrayList<Command>());
+        //start tracking the variable
+        tracker.pushVariable(variableBindingStart.getVariableName(), new VariableActivity(variableBindingStart));
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+        // Get the activity of the exiting variable
+        VariableActivity variableActivity = tracker.peek().getValue();
+        tracker.popVariable();
+        boolean emitBindingEnd = true;
+        if (variableActivity != null) {
+            //this was a tracked variable. Popping all the commands
+            //which were delayed for this variable
+            List<Command> commands = storedCommandsStack.pop();
+            //if the variable binding is emitted than this binding
+            //end must be emitted as well
+            emitBindingEnd = variableActivity.isUsed();
+            if (variableActivity.isUsed()) {
+                VariableBinding.Start variableBindingStart = variableActivity.getCommand();
+                //variable was used. we can let it pass through
+                emit(variableBindingStart);
+                //register the usage of all the variables that appear in the bound expression
+                registerUsage(variableBindingStart);
+            }
+            //emit all the delayed commands
+            for (Command command : commands) {
+                emit(command);
+            }
+        }
+        if (emitBindingEnd) {
+            emit(variableBindingEnd);
+        }
+    }
+
+    @Override
+    protected VariableActivity assignDefault(Command command) {
+        return null;
+    }
+
+    @Override
+    protected void onCommand(Command command) {
+        registerUsage(command);
+        emit(command);
+    }
+
+    /**
+     * Emit the current command. If the command is delayed by
+     * a variable tracking process, than add it to the top command list
+     * @param command a stream command
+     */
+    private void emit(Command command) {
+        if (storedCommandsStack.isEmpty()) {
+            outputStream.emit(command);
+        } else {
+            List<Command> list = storedCommandsStack.peek();
+            list.add(command);
+        }
+    }
+
+    /**
+     * Extract all the variables in this command and mark them
+     * as used
+     * @param command - a stream command
+     */
+    private void registerUsage(Command command) {
+        List<String> usedVariables = CommandVariableUsage.extractVariables(command);
+        for (String usedVariable : usedVariables) {
+            VariableActivity activity = tracker.get(usedVariable);
+            if (activity != null) {
+                activity.markUsed();
+            }
+        }
+    }
+
+    /**
+     * Track the activity of a variable binding
+     */
+    static class VariableActivity {
+        private boolean used;
+        private VariableBinding.Start command;
+
+        VariableActivity(VariableBinding.Start command) {
+            this.command = command;
+        }
+
+        public void markUsed() {
+            used = true;
+        }
+
+        public boolean isUsed() {
+            return used;
+        }
+
+        public VariableBinding.Start getCommand() {
+            return command;
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/VariableFinder.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/VariableFinder.java
new file mode 100644
index 0000000..7806c79
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/VariableFinder.java
@@ -0,0 +1,128 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.optimization;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.util.expression.SideEffectVisitor;
+
+/**
+ * SideEffectVisitor which extracts all the variables from an expression
+ */
+public class VariableFinder extends SideEffectVisitor {
+
+    private final Set<String> variables;
+
+    public VariableFinder(Set<String> variables) {
+        this.variables = variables;
+    }
+
+    private void traverse(ExpressionNode node) {
+        if (node != null) {
+            node.accept(this);
+        }
+    }
+
+    public static Set<String> findVariables(ExpressionNode node) {
+        HashSet<String> result = new HashSet<String>();
+        VariableFinder finder = new VariableFinder(result);
+        finder.traverse(node);
+        return result;
+    }
+
+    @Override
+    public void visit(PropertyAccess propertyAccess) {
+        traverse(propertyAccess.getTarget());
+        traverse(propertyAccess.getProperty());
+    }
+
+    @Override
+    public void visit(Identifier identifier) {
+        variables.add(identifier.getName());
+    }
+
+    @Override
+    public void visit(StringConstant text) {
+    }
+
+    @Override
+    public void visit(BinaryOperation binaryOperation) {
+        traverse(binaryOperation.getLeftOperand());
+        traverse(binaryOperation.getRightOperand());
+    }
+
+    @Override
+    public void visit(BooleanConstant booleanConstant) {
+    }
+
+    @Override
+    public void visit(NumericConstant numericConstant) {
+    }
+
+    @Override
+    public void visit(UnaryOperation unaryOperation) {
+        traverse(unaryOperation.getTarget());
+    }
+
+    @Override
+    public void visit(TernaryOperator ternaryOperator) {
+        traverse(ternaryOperator.getCondition());
+        traverse(ternaryOperator.getThenBranch());
+        traverse(ternaryOperator.getElseBranch());
+    }
+
+    @Override
+    public void visit(RuntimeCall runtimeCall) {
+        for (ExpressionNode node : runtimeCall.getArguments()) {
+            traverse(node);
+        }
+    }
+
+    @Override
+    public void visit(MapLiteral mapLiteral) {
+        for (ExpressionNode value : mapLiteral.getMap().values()) {
+            traverse(value);
+        }
+    }
+
+    @Override
+    public void visit(ArrayLiteral arrayLiteral) {
+        for (ExpressionNode item : arrayLiteral.getItems()) {
+            traverse(item);
+        }
+    }
+
+    @Override
+    public void visit(NullLiteral nullLiteral) {
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ConstantFolding.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ConstantFolding.java
new file mode 100644
index 0000000..03ab99c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ConstantFolding.java
@@ -0,0 +1,95 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization.reduce;
+
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.optimization.StreamTransformer;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.EmitterVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.Streams;
+import org.apache.sling.scripting.sightly.impl.compiler.visitor.TrackingVisitor;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Optimization which evaluates constant expressions during compilation-time
+ */
+public final class ConstantFolding extends TrackingVisitor<EvalResult> implements EmitterVisitor {
+
+    private final RenderContext renderContext;
+    private final PushStream outStream = new PushStream();
+
+    private ConstantFolding(RenderContext renderContext) {
+        this.renderContext = renderContext;
+    }
+
+    public static StreamTransformer transformer(final RenderContext renderContext) {
+        return new StreamTransformer() {
+            @Override
+            public CommandStream transform(CommandStream inStream) {
+                return Streams.map(inStream, new ConstantFolding(renderContext));
+            }
+        };
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        String variable = variableBindingStart.getVariableName();
+        ExpressionNode node = variableBindingStart.getExpression();
+        EvalResult result = ExpressionReducer.reduce(node, tracker, renderContext);
+        result = avoidFoldingDataStructures(result);
+        tracker.pushVariable(variable, result);
+        outStream.emit(new VariableBinding.Start(variable, result.getNode()));
+    }
+
+    private EvalResult avoidFoldingDataStructures(EvalResult evalResult) {
+        //this prevents us from replacing variables that are bound to maps & collections
+        //in expressions since that would mean we rebuild the same constant data structures
+        //each time
+        if (evalResult.isConstant() && isDataStructure(evalResult.getValue())) {
+            return EvalResult.nonConstant(evalResult.getNode());
+        }
+        return evalResult;
+    }
+
+    private boolean isDataStructure(Object obj) {
+        return (obj instanceof Collection) || (obj instanceof Map);
+    }
+
+    @Override
+    protected EvalResult assignDefault(Command command) {
+        return null;
+    }
+
+    @Override
+    protected void onCommand(Command command) {
+        outStream.emit(command);
+    }
+
+    @Override
+    public PushStream getOutputStream() {
+        return outStream;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/EvalResult.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/EvalResult.java
new file mode 100644
index 0000000..1220872
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/EvalResult.java
@@ -0,0 +1,110 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization.reduce;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.CompilerException;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+
+/**
+ * Data structure used in expression reducing
+ */
+public final class EvalResult {
+    private final ExpressionNode node;
+    private final Object value;
+
+    public static EvalResult constant(Object obj) {
+        return new EvalResult(null, obj);
+    }
+
+    public static EvalResult nonConstant(ExpressionNode node) {
+        return new EvalResult(node, null);
+    }
+
+    private EvalResult(ExpressionNode node, Object value) {
+        this.node = node;
+        this.value = value;
+    }
+
+    public boolean isConstant() {
+        return node == null;
+    }
+
+    public Object getValue() {
+        if (!isConstant()) {
+            throw new CompilerException(new UnsupportedOperationException("Cannot get constant value from non-constant result"));
+        }
+        return value;
+    }
+
+    public ExpressionNode getNode() {
+        return (isConstant()) ? asLiteral(getValue()) : node;
+    }
+
+    private static ExpressionNode asLiteral(Object value) {
+        if (value instanceof Boolean) {
+            return new BooleanConstant((Boolean) value);
+        }
+        if (value instanceof String) {
+            return new StringConstant((String) value);
+        }
+        if (value instanceof Number) {
+            return new NumericConstant((Number) value);
+        }
+        if (value instanceof Map) {
+            //noinspection unchecked
+            return asMapLiteral((Map<String, Object>) value);
+        }
+        if (value instanceof List) {
+            //noinspection unchecked
+            return asArrayLiteral((List<Object>) value);
+        }
+        if (value == null) {
+            return NullLiteral.INSTANCE;
+        }
+        throw new CompilerException(new UnsupportedOperationException("Cannot transform to literal: " + value));
+    }
+
+    private static MapLiteral asMapLiteral(Map<String, Object> map) {
+        HashMap<String, ExpressionNode> literal = new HashMap<String, ExpressionNode>();
+        for (Map.Entry<String, Object> entry : map.entrySet()) {
+            literal.put(entry.getKey(), asLiteral(entry.getValue()));
+        }
+        return new MapLiteral(literal);
+    }
+
+    private static ArrayLiteral asArrayLiteral(List<Object> list) {
+        ArrayList<ExpressionNode> literal = new ArrayList<ExpressionNode>();
+        for (Object obj : list) {
+            literal.add(asLiteral(obj));
+        }
+        return new ArrayLiteral(literal);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ExpressionReducer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ExpressionReducer.java
new file mode 100644
index 0000000..268edd5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/optimization/reduce/ExpressionReducer.java
@@ -0,0 +1,212 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.optimization.reduce;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.CompilerException;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.util.VariableTracker;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Try to evaluate constant parts in expressions
+ */
+public class ExpressionReducer implements NodeVisitor<EvalResult> {
+
+    private final RenderContext renderContext;
+    private final VariableTracker<EvalResult> tracker;
+
+    public static EvalResult reduce(ExpressionNode node, VariableTracker<EvalResult> tracker, RenderContext renderContext) {
+        ExpressionReducer reducer = new ExpressionReducer(renderContext, tracker);
+        return reducer.eval(node);
+    }
+
+    public ExpressionReducer(RenderContext renderContext, VariableTracker<EvalResult> tracker) {
+        this.renderContext = renderContext;
+        this.tracker = tracker;
+    }
+
+    private EvalResult eval(ExpressionNode node) {
+        try {
+            return node.accept(this);
+        } catch (CompilerException e) {
+            throw e;
+        } catch (Exception e) {
+            //evaluating constant expressions may lead to errors (like division by zero)
+            //in this case we leave the node as-is.
+            return EvalResult.nonConstant(node);
+        }
+    }
+
+    @Override
+    public EvalResult evaluate(PropertyAccess propertyAccess) {
+        EvalResult target = eval(propertyAccess.getTarget());
+        EvalResult property = eval(propertyAccess.getProperty());
+        if (!target.isConstant() || !property.isConstant()) {
+            return EvalResult.nonConstant(new PropertyAccess(
+                    target.getNode(),
+                    property.getNode()));
+        }
+
+        return EvalResult.constant(renderContext.resolveProperty(
+                target.getValue(), property.getValue()));
+    }
+
+    @Override
+    public EvalResult evaluate(Identifier identifier) {
+        EvalResult result = tracker.get(identifier.getName());
+        if (result != null && result.isConstant()) {
+            return EvalResult.constant(result.getValue());
+        }
+        return EvalResult.nonConstant(identifier);
+    }
+
+    @Override
+    public EvalResult evaluate(StringConstant text) {
+        return EvalResult.constant(text.getText());
+    }
+
+    @Override
+    public EvalResult evaluate(BinaryOperation binaryOperation) {
+        EvalResult left = eval(binaryOperation.getLeftOperand());
+        EvalResult right = eval(binaryOperation.getRightOperand());
+        if (!(left.isConstant() && right.isConstant())) {
+            return EvalResult.nonConstant(new BinaryOperation(
+                    binaryOperation.getOperator(),
+                    left.getNode(),
+                    right.getNode()));
+        }
+        return EvalResult.constant(binaryOperation.getOperator().eval(renderContext, left.getValue(), right.getValue()));
+    }
+
+    @Override
+    public EvalResult evaluate(BooleanConstant booleanConstant) {
+        return EvalResult.constant(booleanConstant.getValue());
+    }
+
+    @Override
+    public EvalResult evaluate(NumericConstant numericConstant) {
+        return EvalResult.constant(numericConstant.getValue());
+    }
+
+    @Override
+    public EvalResult evaluate(UnaryOperation unaryOperation) {
+        EvalResult target = eval(unaryOperation.getTarget());
+        if (!target.isConstant()) {
+            return EvalResult.nonConstant(new UnaryOperation(
+                    unaryOperation.getOperator(), target.getNode()));
+        }
+        return EvalResult.constant(unaryOperation.getOperator().eval(renderContext, target.getValue()));
+    }
+
+    @Override
+    public EvalResult evaluate(TernaryOperator ternaryOperator) {
+        EvalResult condition = eval(ternaryOperator.getCondition());
+        if (!condition.isConstant()) {
+            return EvalResult.nonConstant(new TernaryOperator(
+                    condition.getNode(),
+                    ternaryOperator.getThenBranch(),
+                    ternaryOperator.getElseBranch()));
+        }
+        return (renderContext.toBoolean(condition.getValue()))
+                ? eval(ternaryOperator.getThenBranch())
+                : eval(ternaryOperator.getElseBranch());
+    }
+
+    @Override
+    public EvalResult evaluate(RuntimeCall runtimeCall) {
+        List<ExpressionNode> nodes = new ArrayList<ExpressionNode>();
+        for (ExpressionNode node : runtimeCall.getArguments()) {
+            EvalResult result = eval(node);
+            nodes.add(result.getNode());
+        }
+        return EvalResult.nonConstant(new RuntimeCall(runtimeCall.getFunctionName(), nodes));
+    }
+
+    @Override
+    public EvalResult evaluate(MapLiteral mapLiteral) {
+        HashMap<String, EvalResult> results = new HashMap<String, EvalResult>();
+        boolean isConstant = true;
+        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
+            EvalResult result = eval(entry.getValue());
+            results.put(entry.getKey(), result);
+            isConstant = isConstant && result.isConstant();
+        }
+        if (isConstant) {
+            HashMap<String, Object> map = new HashMap<String, Object>();
+            for (Map.Entry<String, EvalResult> entry : results.entrySet()) {
+                map.put(entry.getKey(), entry.getValue().getValue());
+            }
+            return EvalResult.constant(map);
+        } else {
+            HashMap<String, ExpressionNode> literal = new HashMap<String, ExpressionNode>();
+            for (Map.Entry<String, EvalResult> entry : results.entrySet()) {
+                literal.put(entry.getKey(), entry.getValue().getNode());
+            }
+            return EvalResult.nonConstant(new MapLiteral(literal));
+        }
+    }
+
+    @Override
+    public EvalResult evaluate(ArrayLiteral arrayLiteral) {
+        ArrayList<EvalResult> results = new ArrayList<EvalResult>();
+        boolean isConstant = true;
+        for (ExpressionNode node : arrayLiteral.getItems()) {
+            EvalResult result = eval(node);
+            results.add(result);
+            isConstant = isConstant && result.isConstant();
+        }
+        if (isConstant) {
+            ArrayList<Object> list = new ArrayList<Object>();
+            for (EvalResult result : results) {
+                list.add(result.getValue());
+            }
+            return EvalResult.constant(list);
+        } else {
+            ArrayList<ExpressionNode> literal = new ArrayList<ExpressionNode>();
+            for (EvalResult result : results) {
+                literal.add(result.getNode());
+            }
+            return EvalResult.nonConstant(new ArrayLiteral(literal));
+        }
+    }
+
+    @Override
+    public EvalResult evaluate(NullLiteral nullLiteral) {
+        return EvalResult.constant(null);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/Command.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/Command.java
new file mode 100644
index 0000000..ea90554
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/Command.java
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris;
+
+/**
+ * A text rendering command
+ */
+public interface Command {
+
+    /**
+     * Accept a visitor
+     * @param visitor - the visitor that will process this command
+     */
+    void accept(CommandVisitor visitor);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandHandler.java
new file mode 100644
index 0000000..982b444
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandHandler.java
@@ -0,0 +1,44 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris;
+
+/**
+ * Handles commands from streams
+ */
+public interface CommandHandler {
+
+    /**
+     * Handle the incoming command
+     * @param command - the received command
+     */
+    void onEmit(Command command);
+
+    /**
+     * Called when an error occurs.
+     * @param errorMessage - the message of the error
+     */
+    void onError(String errorMessage);
+
+    /**
+     * Called when the stream has finished. The contract is that after this call, no other
+     * commands or errors will be emitted.
+     */
+    void onDone();
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandStream.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandStream.java
new file mode 100644
index 0000000..5ac6abd
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandStream.java
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris;
+
+/**
+ * A push-stream of commands
+ */
+public interface CommandStream {
+
+    /**
+     * Add a listening handler
+     * @param handler - a command handler
+     */
+    void addHandler(CommandHandler handler);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandVisitor.java
new file mode 100644
index 0000000..358b7e5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/CommandVisitor.java
@@ -0,0 +1,56 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+
+/**
+ * Processor of rendering commands
+ */
+public interface CommandVisitor {
+
+    void visit(Conditional.Start conditionalStart);
+
+    void visit(Conditional.End conditionalEnd);
+
+    void visit(VariableBinding.Start variableBindingStart);
+
+    void visit(VariableBinding.End variableBindingEnd);
+
+    void visit(VariableBinding.Global globalAssignment);
+
+    void visit(OutVariable outVariable);
+
+    void visit(OutText outText);
+
+    void visit(Loop.Start loopStart);
+
+    void visit(Loop.End loopEnd);
+
+    void visit(Procedure.Start startProcedure);
+
+    void visit(Procedure.End endProcedure);
+
+    void visit(Procedure.Call procedureCall);
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Conditional.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Conditional.java
new file mode 100644
index 0000000..067064d
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Conditional.java
@@ -0,0 +1,77 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris.command;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Imposes a condition on the next rendering commands
+ */
+public class Conditional {
+
+    public static class Start implements Command {
+        private String variable;
+        private boolean expectedTruthValue;
+
+        public Start(String variable, boolean expectedTruthValue) {
+            this.variable = variable;
+            this.expectedTruthValue = expectedTruthValue;
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+
+        public String getVariable() {
+            return variable;
+        }
+
+        public boolean getExpectedTruthValue() {
+            return expectedTruthValue;
+        }
+
+        @Override
+        public String toString() {
+            return "Conditional.Start{" +
+                    "variable='" + variable + '\'' +
+                    ", expectedTruthValue=" + expectedTruthValue +
+                    '}';
+        }
+    }
+
+    public static final End END = new End();
+
+    public static final class End implements Command {
+
+        private End() {
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+
+        @Override
+        public String toString() {
+            return "Conditional.End{}";
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Loop.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Loop.java
new file mode 100644
index 0000000..39b9dca
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Loop.java
@@ -0,0 +1,86 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris.command;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Render a sequence of commands repeatedly. Must have a corresponding end loop later
+ * in the stream
+ */
+public class Loop {
+
+    public static class Start implements Command {
+
+        private String listVariable;
+        private String itemVariable;
+        private String indexVariable;
+
+        public Start(String listVariable, String itemVariable, String indexVariable) {
+            this.listVariable = listVariable;
+            this.itemVariable = itemVariable;
+            this.indexVariable = indexVariable;
+        }
+
+        public String getListVariable() {
+            return listVariable;
+        }
+
+        public String getItemVariable() {
+            return itemVariable;
+        }
+
+        public String getIndexVariable() {
+            return indexVariable;
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+
+        @Override
+        public String toString() {
+            return "Loop.Start{" +
+                    "listVariable='" + listVariable + '\'' +
+                    ", itemVariable='" + itemVariable + '\'' +
+                    ", indexVariable='" + indexVariable + '\'' +
+                    '}';
+        }
+    }
+
+    public static final End END = new End();
+
+    public static final class End implements Command {
+        private End() {
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+
+        @Override
+        public String toString() {
+            return "Loop.End{}";
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutText.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutText.java
new file mode 100644
index 0000000..3ddc21c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutText.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris.command;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Render a text fragment
+ */
+public class OutText implements Command {
+
+    private String text;
+
+    public OutText(String text) {
+        this.text = text;
+    }
+
+    @Override
+    public void accept(CommandVisitor visitor) {
+        visitor.visit(this);
+    }
+
+    public String getText() {
+        return text;
+    }
+
+    @Override
+    public String toString() {
+        return "OutText{" +
+                "text='" + text + '\'' +
+                '}';
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutVariable.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutVariable.java
new file mode 100644
index 0000000..b9521d8
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/OutVariable.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris.command;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Render the content of a variable
+ */
+public class OutVariable implements Command {
+
+    private final String variableName;
+
+    public OutVariable(String variableName) {
+        this.variableName = variableName;
+    }
+
+    @Override
+    public void accept(CommandVisitor visitor) {
+        visitor.visit(this);
+    }
+
+    public String getVariableName() {
+        return variableName;
+    }
+
+    @Override
+    public String toString() {
+        return "OutVariable{" +
+                "variableName='" + variableName + '\'' +
+                '}';
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Patterns.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Patterns.java
new file mode 100644
index 0000000..d63cc3f
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Patterns.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris.command;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Usual command patterns
+ */
+public class Patterns {
+
+    private static final String ALWAYS_FALSE_VAR = "always_false";
+
+    /**
+     * Inserts a sequence of commands that will ignore the rest of the stream until
+     * the end stream sequence is inserted
+     * @param stream - the stream
+     */
+    public static void beginStreamIgnore(PushStream stream) {
+        stream.emit(new VariableBinding.Start(ALWAYS_FALSE_VAR, BooleanConstant.FALSE));
+        stream.emit(new Conditional.Start(ALWAYS_FALSE_VAR, true));
+    }
+
+    /**
+     * Inserts a sequence of commands that cancels stream ignore
+     * @param stream - the input stream
+     */
+    public static void endStreamIgnore(PushStream stream) {
+        stream.emit(Conditional.END);
+        stream.emit(VariableBinding.END);
+    }
+
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Procedure.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Procedure.java
new file mode 100644
index 0000000..81a72d3
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/Procedure.java
@@ -0,0 +1,94 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris.command;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Commands that delimitate a procedure
+ */
+public class Procedure {
+
+    public static class Start implements Command {
+
+        private String name;
+        private Set<String> parameters;
+
+        public Start(String name, Set<String> parameters) {
+            this.name = name;
+            this.parameters = new HashSet<String>(parameters);
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public Set<String> getParameters() {
+            return Collections.unmodifiableSet(parameters);
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+    }
+
+    public static final End END = new End();
+
+    public static final class End implements Command {
+
+        private End() {
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+    }
+
+    public static class Call implements Command {
+
+        private final String templateVariable;
+        private final String argumentsVariable;
+
+        public Call(String templateVariable, String argumentsVariable) {
+            this.templateVariable = templateVariable;
+            this.argumentsVariable = argumentsVariable;
+        }
+
+        public String getTemplateVariable() {
+            return templateVariable;
+        }
+
+        public String getArgumentsVariable() {
+            return argumentsVariable;
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/VariableBinding.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/VariableBinding.java
new file mode 100644
index 0000000..afe7f2c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/ris/command/VariableBinding.java
@@ -0,0 +1,103 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.ris.command;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+
+/**
+ * Marks the binding of a variable. Must have a corresponding binding end later in the stream
+ */
+public class VariableBinding {
+
+    public static class Start implements Command {
+        private String variableName;
+        private ExpressionNode expression;
+
+        public Start(String variableName, ExpressionNode expression) {
+            this.variableName = variableName;
+            this.expression = expression;
+        }
+
+        public String getVariableName() {
+            return variableName;
+        }
+
+        public ExpressionNode getExpression() {
+            return expression;
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+
+        @Override
+        public String toString() {
+            return "VariableBinding.Start{" +
+                    "variableName='" + variableName + '\'' +
+                    ", expression=" + expression +
+                    '}';
+        }
+    }
+
+    public static final End END = new End();
+
+    public static final class End implements Command {
+
+        private End() {
+        }
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+
+        @Override
+        public String toString() {
+            return "VariableBinding.End{}";
+        }
+    }
+
+    public static final class Global implements Command {
+
+        private final String variableName;
+        private final ExpressionNode expressionNode;
+
+        public Global(String variableName, ExpressionNode expressionNode) {
+            this.variableName = variableName;
+            this.expressionNode = expressionNode;
+        }
+
+        public String getVariableName() {
+            return variableName;
+        }
+
+        public ExpressionNode getExpression() {
+            return expressionNode;
+        }
+
+
+        @Override
+        public void accept(CommandVisitor visitor) {
+            visitor.visit(this);
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowCheckBackend.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowCheckBackend.java
new file mode 100644
index 0000000..5faf713
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowCheckBackend.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.util;
+
+import java.util.Set;
+
+import org.apache.sling.scripting.sightly.impl.compiler.CompilerBackend;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.VisitorHandler;
+
+/**
+ * Wrapping backend that checks for global bindings shadowing
+ */
+public class GlobalShadowCheckBackend implements CompilerBackend {
+
+    private final CompilerBackend baseBackend;
+    private final Set<String> globals;
+
+    public GlobalShadowCheckBackend(CompilerBackend baseBackend, Set<String> globals) {
+        this.baseBackend = baseBackend;
+        this.globals = globals;
+    }
+
+    @Override
+    public void handle(CommandStream stream) {
+        stream.addHandler(new VisitorHandler(new GlobalShadowChecker(globals)));
+        baseBackend.handle(stream);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowChecker.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowChecker.java
new file mode 100644
index 0000000..bab08e7
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/GlobalShadowChecker.java
@@ -0,0 +1,114 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.util;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Checks whether variable declarations shadow global bindings
+ */
+public class GlobalShadowChecker implements CommandVisitor {
+
+    private static final Logger log = LoggerFactory.getLogger(GlobalShadowChecker.class);
+    private final Map<String, String> globals;
+
+    public GlobalShadowChecker(Set<String> globals) {
+        this.globals = new HashMap<String, String>();
+        for (String global : globals) {
+            this.globals.put(global.toLowerCase(), global);
+        }
+    }
+
+    @Override
+    public void visit(Conditional.Start conditionalStart) {
+    }
+
+    @Override
+    public void visit(Conditional.End conditionalEnd) {
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        checkVariable(variableBindingStart.getVariableName());
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+
+    }
+
+    @Override
+    public void visit(VariableBinding.Global globalAssignment) {
+        checkVariable(globalAssignment.getVariableName());
+    }
+
+    @Override
+    public void visit(OutVariable outVariable) {
+
+    }
+
+    @Override
+    public void visit(OutText outText) {
+
+    }
+
+    @Override
+    public void visit(Loop.Start loopStart) {
+        checkVariable(loopStart.getItemVariable());
+        checkVariable(loopStart.getIndexVariable());
+    }
+
+    @Override
+    public void visit(Loop.End loopEnd) {
+    }
+
+    @Override
+    public void visit(Procedure.Start startProcedure) {
+        checkVariable(startProcedure.getName());
+    }
+
+    @Override
+    public void visit(Procedure.End endProcedure) {
+    }
+
+    @Override
+    public void visit(Procedure.Call procedureCall) {
+    }
+
+    private void checkVariable(String variableName) {
+        variableName = variableName.toLowerCase();
+        if (globals.containsKey(variableName)) {
+            String originalName = globals.get(variableName);
+            log.warn("Global variable '{}' is being overridden in template", originalName);
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/SymbolGenerator.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/SymbolGenerator.java
new file mode 100644
index 0000000..6277b1f
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/SymbolGenerator.java
@@ -0,0 +1,45 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.util;
+
+public class SymbolGenerator {
+
+    public static final String DEFAULT_VAR_PREFIX = "var_";
+
+    private int counter = 0;
+    private final String prefix;
+
+    public SymbolGenerator() {
+        this(DEFAULT_VAR_PREFIX);
+    }
+
+    public SymbolGenerator(String prefix) {
+        this.prefix = prefix;
+    }
+
+    public String next(String hint) {
+        String middle = (hint != null) ? hint.replaceAll("\\-", "_") : "";
+        return prefix + middle + counter++;
+    }
+
+    public String next() {
+        return next(null);
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/VariableTracker.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/VariableTracker.java
new file mode 100644
index 0000000..7498ec5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/VariableTracker.java
@@ -0,0 +1,148 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.util;
+
+import java.util.AbstractMap;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Stack;
+
+/**
+ * Track information related to Sightly variables
+ */
+public class VariableTracker<T> {
+
+    private final Map<String, Stack<T>> variableData = new HashMap<String, Stack<T>>();
+    private final Stack<String> declarationStack = new Stack<String>();
+
+    public boolean isDeclared(String name) {
+        name = name.toLowerCase();
+        Stack<T> dataStack = variableData.get(name);
+        return dataStack != null;
+    }
+
+    /**
+     * Push a variable. Use this at a variable declaration
+     * @param name - the name of the variable
+     * @param data - data associated with the variable
+     */
+    public void pushVariable(String name, T data) {
+        name = name.toLowerCase();
+        Stack<T> dataStack = variableData.get(name);
+        if (dataStack == null) {
+            dataStack = new Stack<T>();
+            variableData.put(name, dataStack);
+        }
+        dataStack.push(data);
+        declarationStack.push(name);
+    }
+
+    /**
+     * Pop a variable. Use this when a variable goes out of scope
+     * @return - the name of the popped variable
+     * @throws java.util.NoSuchElementException - if there are no declared variables in the scope
+     */
+    public String popVariable() {
+        String variable = declarationStack.pop();
+        Stack<T> dataStack = variableData.get(variable);
+        assert dataStack != null;
+        dataStack.pop();
+        if (dataStack.isEmpty()) {
+            variableData.remove(variable);
+        }
+        return variable;
+    }
+
+    /**
+     * Peek at the top of the declaration stack
+     * @return - the most recently declared variable and it's associated data
+     * @throws java.util.NoSuchElementException - if there are no variables in scope
+     */
+    public Map.Entry<String, T> peek() {
+        String variable = declarationStack.peek();
+        Stack<T> dataStack = variableData.get(variable);
+        assert dataStack != null;
+        T data = dataStack.peek();
+        return new AbstractMap.SimpleImmutableEntry<String, T>(variable, data);
+    }
+
+    public boolean isEmpty() {
+        return declarationStack.isEmpty();
+    }
+
+    /**
+     * Get the data associated with the given variable
+     * @param name - the name of the variable
+     * @return the associated data or null if that variable is not in scope
+     */
+    public T get(String name) {
+        name = name.toLowerCase();
+        Stack<T> dataStack = variableData.get(name);
+        if (dataStack == null) {
+            return null;
+        }
+        assert !dataStack.isEmpty();
+        return dataStack.peek();
+    }
+
+    /**
+     * Check whether a variable was declared and is visible in the current scope
+     * @param name - the name of the variable
+     * @return - the visibility of the variable in the current scope
+     */
+    public boolean isInScope(String name) {
+        name = name.toLowerCase();
+        return variableData.get(name) != null;
+    }
+
+    /**
+     * Get an immutable view of all the data items associated with the specified
+     * variable.
+     * @param name - the name of the variable
+     * @return - a list of all the data associated with this variable name. If the
+     * variable is not declared in the current scope then that list will be empty. Otherwise
+     * it will contain all the data associated for the current scope starting with the data
+     * associated at the topmost scope and ending with the most recently associated data
+     */
+    public List<T> getAll(String name) {
+        name = name.toLowerCase();
+        Stack<T> dataStack = variableData.get(name);
+        if (dataStack == null) {
+            return Collections.emptyList();
+        }
+        return Collections.unmodifiableList(dataStack);
+    }
+
+    /**
+     * Get how many times a variable was declared in the current scope
+     * @param name - the name of the variable
+     * @return - the number of declarations for a variable in the current scope
+     */
+    public int getOccurrenceCount(String name) {
+        name = name.toLowerCase();
+        Stack<T> dataStack = variableData.get(name);
+        if (dataStack == null) {
+            return 0;
+        }
+        return dataStack.size();
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/HomogenousNodeVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/HomogenousNodeVisitor.java
new file mode 100644
index 0000000..0177cfd
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/HomogenousNodeVisitor.java
@@ -0,0 +1,103 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.util.expression;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+
+/**
+ * Apply the same evaluation for all expression nodes
+ */
+public abstract class HomogenousNodeVisitor<T> implements NodeVisitor<T> {
+
+    protected abstract T evaluateDefault(ExpressionNode node);
+
+    @Override
+    public T evaluate(PropertyAccess propertyAccess) {
+        return evaluateDefault(propertyAccess);
+    }
+
+    @Override
+    public T evaluate(Identifier identifier) {
+        return evaluateDefault(identifier);
+    }
+
+    @Override
+    public T evaluate(StringConstant text) {
+        return evaluateDefault(text);
+    }
+
+    @Override
+    public T evaluate(BinaryOperation binaryOperation) {
+        return evaluateDefault(binaryOperation);
+    }
+
+    @Override
+    public T evaluate(BooleanConstant booleanConstant) {
+        return evaluateDefault(booleanConstant);
+    }
+
+    @Override
+    public T evaluate(NumericConstant numericConstant) {
+        return evaluateDefault(numericConstant);
+    }
+
+    @Override
+    public T evaluate(UnaryOperation unaryOperation) {
+        return evaluateDefault(unaryOperation);
+    }
+
+    @Override
+    public T evaluate(TernaryOperator ternaryOperator) {
+        return evaluateDefault(ternaryOperator);
+    }
+
+    @Override
+    public T evaluate(RuntimeCall runtimeCall) {
+        return evaluateDefault(runtimeCall);
+    }
+
+    @Override
+    public T evaluate(MapLiteral mapLiteral) {
+        return evaluateDefault(mapLiteral);
+    }
+
+    @Override
+    public T evaluate(ArrayLiteral arrayLiteral) {
+        return evaluateDefault(arrayLiteral);
+    }
+
+    @Override
+    public T evaluate(NullLiteral nullLiteral) {
+        return evaluateDefault(nullLiteral);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/NodeTransformer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/NodeTransformer.java
new file mode 100644
index 0000000..6dd776b
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/NodeTransformer.java
@@ -0,0 +1,125 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.util.expression;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+
+public class NodeTransformer implements NodeVisitor<ExpressionNode> {
+
+    public final ExpressionNode transform(ExpressionNode node) {
+        return node.accept(this);
+    }
+
+    @Override
+    public ExpressionNode evaluate(PropertyAccess propertyAccess) {
+        return new PropertyAccess(transform(propertyAccess.getTarget()), transform(propertyAccess.getProperty()));
+    }
+
+    @Override
+    public ExpressionNode evaluate(Identifier identifier) {
+        return identifier;
+    }
+
+    @Override
+    public ExpressionNode evaluate(StringConstant text) {
+        return text;
+    }
+
+    @Override
+    public ExpressionNode evaluate(BinaryOperation binaryOperation) {
+        return new BinaryOperation(binaryOperation.getOperator(),
+                transform(binaryOperation.getLeftOperand()),
+                transform(binaryOperation.getRightOperand()));
+    }
+
+    @Override
+    public ExpressionNode evaluate(BooleanConstant booleanConstant) {
+        return booleanConstant;
+    }
+
+    @Override
+    public ExpressionNode evaluate(NumericConstant numericConstant) {
+        return numericConstant;
+    }
+
+    @Override
+    public ExpressionNode evaluate(UnaryOperation unaryOperation) {
+        return new UnaryOperation(unaryOperation.getOperator(), transform(unaryOperation.getTarget()));
+    }
+
+    @Override
+    public ExpressionNode evaluate(TernaryOperator ternaryOperator) {
+        return new TernaryOperator(
+                transform(ternaryOperator.getCondition()),
+                transform(ternaryOperator.getThenBranch()),
+                transform(ternaryOperator.getElseBranch()));
+    }
+
+    @Override
+    public ExpressionNode evaluate(RuntimeCall runtimeCall) {
+        List<ExpressionNode> children = transformList(runtimeCall.getArguments());
+        return new RuntimeCall(runtimeCall.getFunctionName(), children);
+    }
+
+    @Override
+    public ExpressionNode evaluate(MapLiteral mapLiteral) {
+        HashMap<String, ExpressionNode> map = new HashMap<String, ExpressionNode>();
+        for (Map.Entry<String, ExpressionNode> entry : mapLiteral.getMap().entrySet()) {
+            map.put(entry.getKey(), transform(entry.getValue()));
+        }
+        return new MapLiteral(map);
+    }
+
+    @Override
+    public ExpressionNode evaluate(ArrayLiteral arrayLiteral) {
+        return new ArrayLiteral(transformList(arrayLiteral.getItems()));
+    }
+
+    @Override
+    public ExpressionNode evaluate(NullLiteral nullLiteral) {
+        return nullLiteral;
+    }
+
+    private List<ExpressionNode> transformList(List<ExpressionNode> nodes) {
+        ArrayList<ExpressionNode> result = new ArrayList<ExpressionNode>();
+        for (ExpressionNode node : nodes) {
+            result.add(transform(node));
+        }
+        return result;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/SideEffectVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/SideEffectVisitor.java
new file mode 100644
index 0000000..70ce31a
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/expression/SideEffectVisitor.java
@@ -0,0 +1,137 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.util.expression;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.NodeVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.ArrayLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.TernaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+
+/**
+ * Expression visitor which does not return anything for a node. Instead
+ * it performs specific side-effects depending on the expression node type.
+ */
+public abstract class SideEffectVisitor implements NodeVisitor<Object> {
+
+    public abstract void visit(PropertyAccess propertyAccess);
+
+    public abstract void visit(Identifier identifier);
+
+    public abstract void visit(StringConstant text);
+
+    public abstract void visit(BinaryOperation binaryOperation);
+
+    public abstract void visit(BooleanConstant booleanConstant);
+
+    public abstract void visit(NumericConstant numericConstant);
+
+    public abstract void visit(UnaryOperation unaryOperation);
+
+    public abstract void visit(TernaryOperator ternaryOperator);
+
+    public abstract void visit(RuntimeCall runtimeCall);
+
+    public abstract void visit(MapLiteral mapLiteral);
+
+    public abstract void visit(ArrayLiteral arrayLiteral);
+
+    public abstract void visit(NullLiteral nullLiteral);
+
+    @Override
+    public Object evaluate(PropertyAccess propertyAccess) {
+        visit(propertyAccess);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(Identifier identifier) {
+        visit(identifier);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(StringConstant text) {
+        visit(text);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(BinaryOperation binaryOperation) {
+        visit(binaryOperation);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(BooleanConstant booleanConstant) {
+        visit(booleanConstant);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(NumericConstant numericConstant) {
+        visit(numericConstant);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(UnaryOperation unaryOperation) {
+        visit(unaryOperation);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(TernaryOperator ternaryOperator) {
+        visit(ternaryOperator);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(RuntimeCall runtimeCall) {
+        visit(runtimeCall);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(MapLiteral mapLiteral) {
+        visit(mapLiteral);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(ArrayLiteral arrayLiteral) {
+        visit(arrayLiteral);
+        return null;
+    }
+
+    @Override
+    public Object evaluate(NullLiteral nullLiteral) {
+        visit(nullLiteral);
+        return null;
+    }
+}
+
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/BroadcastHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/BroadcastHandler.java
new file mode 100644
index 0000000..da0273b
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/BroadcastHandler.java
@@ -0,0 +1,62 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.util.stream;
+
+import java.util.ArrayList;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandHandler;
+
+/**
+ * Broadcasts commands to other handlers
+ */
+public class BroadcastHandler implements CommandHandler {
+
+    private ArrayList<CommandHandler> handlers = new ArrayList<CommandHandler>();
+
+    /**
+     * Add a new child handler
+     * @param handler - the listening handler
+     */
+    public void addHandler(CommandHandler handler) {
+        handlers.add(handler);
+    }
+
+
+    @Override
+    public void onEmit(Command command) {
+        for (CommandHandler handler : handlers) {
+            handler.onEmit(command);
+        }
+    }
+
+    @Override
+    public void onError(String errorMessage) {
+        for (CommandHandler handler : handlers) {
+            handler.onError(errorMessage);
+        }
+    }
+
+    @Override
+    public void onDone() {
+        for (CommandHandler handler : handlers) {
+            handler.onDone();
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/EmitterVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/EmitterVisitor.java
new file mode 100644
index 0000000..4aab3bf
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/EmitterVisitor.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.util.stream;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Command visitor which writes to an output stream
+ */
+public interface EmitterVisitor extends CommandVisitor {
+
+    /**
+     * Get the output stream
+     * @return - the output stream of this visitor
+     */
+    PushStream getOutputStream();
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/PushStream.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/PushStream.java
new file mode 100644
index 0000000..ebb50f9
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/PushStream.java
@@ -0,0 +1,78 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.util.stream;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandHandler;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+
+/**
+ * A stream that can be written into
+ */
+public class PushStream implements CommandStream {
+
+    private BroadcastHandler handler = new BroadcastHandler();
+    private boolean closed;
+
+    /**
+     * Add a command handler
+     * @param handler - a command handler
+     */
+    @Override
+    public void addHandler(CommandHandler handler) {
+        this.handler.addHandler(handler);
+    }
+
+    /**
+     * Emit the specified command
+     * @param command - the emitted command
+     * @throws UnsupportedOperationException - if the stream is closed
+     */
+    public void emit(Command command) {
+        if (closed) {
+            throw new UnsupportedOperationException("Stream is closed");
+        }
+        this.handler.onEmit(command);
+    }
+
+    /**
+     * Signal an error
+     * @param message - the error message
+     * @throws UnsupportedOperationException - if the stream is already closed
+     */
+    public void signalError(String message) {
+        if (closed) {
+            throw new UnsupportedOperationException("Stream is closed");
+        }
+        closed = true;
+        this.handler.onError(message);
+    }
+
+    /**
+     * Close the stream
+     * @throws UnsupportedOperationException - if the stream is already closed
+     */
+    public void signalDone() {
+        if (closed) {
+            throw new UnsupportedOperationException("Stream is already closed");
+        }
+        closed = true;
+        this.handler.onDone();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/ReplayStream.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/ReplayStream.java
new file mode 100644
index 0000000..06db9a3
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/ReplayStream.java
@@ -0,0 +1,45 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.util.stream;
+
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandHandler;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+
+/**
+ * A stream which replays the same commands for all handlers
+ */
+public class ReplayStream implements CommandStream {
+
+    private final List<Command> commands;
+
+    public ReplayStream(List<Command> commands) {
+        this.commands = commands;
+    }
+
+    @Override
+    public void addHandler(CommandHandler handler) {
+        for (Command command : commands) {
+            handler.onEmit(command);
+        }
+        handler.onDone();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/Streams.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/Streams.java
new file mode 100644
index 0000000..b148354
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/Streams.java
@@ -0,0 +1,58 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.util.stream;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandStream;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Utility functions for streams
+ */
+public class Streams {
+
+    /**
+     * Attach the visitor as a handle to the inStream and propagate
+     * the done signal from the inStream to the outStream
+     * @param inStream - the input stream
+     * @param outStream - the output stream
+     * @param visitor - a command visitor
+     */
+    public static void connect(CommandStream inStream, final PushStream outStream, CommandVisitor visitor) {
+        inStream.addHandler(new VisitorHandler(visitor) {
+            @Override
+            public void onDone() {
+                outStream.signalDone();
+            }
+        });
+    }
+
+    /**
+     * Attach the emitting visitor to the inStream.
+     * @param inStream - the input stream
+     * @param emitterVisitor - the emitter visitor
+     * @return - the output stream of the emitter
+     */
+    public static CommandStream map(CommandStream inStream, EmitterVisitor emitterVisitor) {
+        PushStream outStream = emitterVisitor.getOutputStream();
+        connect(inStream, outStream, emitterVisitor);
+        return outStream;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/VisitorHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/VisitorHandler.java
new file mode 100644
index 0000000..cf21291
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/util/stream/VisitorHandler.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.util.stream;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandHandler;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+
+/**
+ * Delegates commands to a visitor
+ */
+public class VisitorHandler implements CommandHandler {
+
+    private CommandVisitor visitor;
+
+    public VisitorHandler(CommandVisitor visitor) {
+        this.visitor = visitor;
+    }
+
+    @Override
+    public void onEmit(Command command) {
+        command.accept(visitor);
+    }
+
+    @Override
+    public void onError(String errorMessage) {
+        throw new RuntimeException(errorMessage);
+    }
+
+    @Override
+    public void onDone() {
+
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/CodeGenVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/CodeGenVisitor.java
new file mode 100644
index 0000000..806528c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/CodeGenVisitor.java
@@ -0,0 +1,263 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.visitor;
+
+import java.util.HashSet;
+import java.util.Set;
+import java.util.Stack;
+
+import org.apache.sling.scripting.sightly.impl.compiled.ExpressionTranslator;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaSource;
+import org.apache.sling.scripting.sightly.impl.compiled.SourceGenConstants;
+import org.apache.sling.scripting.sightly.impl.compiled.Type;
+import org.apache.sling.scripting.sightly.impl.compiled.TypeInference;
+import org.apache.sling.scripting.sightly.impl.compiled.TypeInfo;
+import org.apache.sling.scripting.sightly.impl.compiled.UnitBuilder;
+import org.apache.sling.scripting.sightly.impl.compiled.VariableAnalyzer;
+import org.apache.sling.scripting.sightly.impl.compiled.VariableDescriptor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
+
+/**
+ * Java code generator
+ */
+public class CodeGenVisitor implements CommandVisitor {
+
+    private final JavaSource source;
+    private final UnitBuilder unitBuilder;
+    private final Stack<String> loopStatusStack = new Stack<String>();
+    private final VariableAnalyzer analyzer = new VariableAnalyzer();
+    private final StatefulVisitor.StateControl control;
+    private final Set<String> unitParameters;
+
+    public CodeGenVisitor(UnitBuilder unitBuilder, StatefulVisitor.StateControl control) {
+        this.unitBuilder = unitBuilder;
+        this.source = unitBuilder.getSource();
+        this.control = control;
+        this.unitParameters = new HashSet<String>();
+        for (String param : unitBuilder.getParameters()) {
+            this.unitParameters.add(param.toLowerCase());
+        }
+    }
+
+    /**
+     * Complete building the source
+     */
+    public void finish() {
+        source.prepend(initializations());
+    }
+
+    private String initializations() {
+        JavaSource initSource = new JavaSource();
+        for (VariableDescriptor descriptor : analyzer.allVariables()) {
+            initVariable(descriptor, initSource);
+        }
+        return initSource.toString();
+    }
+
+    private void initVariable(VariableDescriptor descriptor, JavaSource initSource) {
+        switch (descriptor.getScope()) {
+            case DYNAMIC:
+                initSource.beginAssignment(descriptor.getAssignedName());
+                if (descriptor.isTemplateVariable()) {
+                    initSource.startCall(SourceGenConstants.OBJ_GET);
+                } else if (unitParameters.contains(descriptor.getOriginalName().toLowerCase())) {
+                    initSource.startMethodCall(SourceGenConstants.ARGUMENTS_FIELD, SourceGenConstants.BINDINGS_GET_METHOD);
+                } else {
+                    initSource.startMethodCall(SourceGenConstants.BINDINGS_FIELD, SourceGenConstants.BINDINGS_GET_METHOD);
+                }
+                initSource.stringLiteral(descriptor.getOriginalName())
+                        .endCall()
+                        .endStatement();
+                break;
+            case GLOBAL:
+                initSource.beginAssignment(descriptor.getAssignedName())
+                        .nullLiteral()
+                        .endStatement();
+                break;
+        }
+        String listCoercionVar = descriptor.getListCoercion();
+        if (listCoercionVar != null) {
+            //need to initialize the list coercion to null
+            initSource.beginAssignment(listCoercionVar, SourceGenConstants.COLLECTION_TYPE)
+                    .nullLiteral().endStatement();
+        }
+    }
+
+    @Override
+    public void visit(Conditional.Start conditional) {
+        VariableDescriptor descriptor = analyzer.descriptor(conditional.getVariable());
+        boolean negate = !conditional.getExpectedTruthValue();
+        source.beginIf();
+        if (negate) {
+            source.negation();
+        }
+        if (descriptor.getType() == Type.BOOLEAN) {
+            source.append(descriptor.getAssignedName());
+        } else {
+            source.startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, RenderContextImpl.BOOLEAN_COERCE)
+                    .append(descriptor.getAssignedName())
+                    .endCall();
+        }
+        source.completeIf();
+    }
+
+    @Override
+    public void visit(Conditional.End conditionalEnd) {
+        source.endIf();
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBinding) {
+        source.startBlock();
+        TypeInfo typeInfo = TypeInference.inferTypes(variableBinding.getExpression(), analyzer);
+        Type type = typeInfo.typeOf(variableBinding.getExpression());
+        String properName = declare(variableBinding.getVariableName(), type);
+        source.beginAssignment(properName, type.getNativeClass());
+        ExpressionTranslator.buildExpression(
+                variableBinding.getExpression(),
+                source,
+                analyzer,
+                typeInfo);
+        source.endStatement();
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+        VariableDescriptor descriptor = analyzer.endVariable();
+        String listCoercionVar = descriptor.getListCoercion();
+        if (listCoercionVar != null) {
+            //this variable was coerced to list at some point
+            generateCoercionClearing(listCoercionVar);
+        }
+        source.endBlock();
+    }
+
+    @Override
+    public void visit(VariableBinding.Global globalAssignment) {
+        TypeInfo typeInfo = TypeInference.inferTypes(globalAssignment.getExpression(), analyzer);
+        VariableDescriptor descriptor = analyzer.declareGlobal(globalAssignment.getVariableName());
+        String name = descriptor.getAssignedName();
+        source.append(name).assign();
+        ExpressionTranslator.buildExpression(
+                globalAssignment.getExpression(),
+                source,
+                analyzer,
+                typeInfo);
+        source.endStatement();
+        String listCoercionVar = descriptor.getListCoercion();
+        if (listCoercionVar != null) {
+            //variable was used for list coercion. Generating a coercion clearing
+            generateCoercionClearing(listCoercionVar);
+        }
+    }
+
+    @Override
+    public void visit(OutVariable outVariable) {
+        String variable = analyzer.assignedName(outVariable.getVariableName());
+        source.startStatement()
+                .startMethodCall(SourceGenConstants.OUT_BUFFER, SourceGenConstants.WRITE_METHOD)
+                .startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, RenderContextImpl.STRING_COERCE)
+                .append(variable)
+                .endCall()
+                .endCall()
+                .endStatement();
+    }
+
+    @Override
+    public void visit(OutText outText) {
+        source.startStatement()
+                .startMethodCall(SourceGenConstants.OUT_BUFFER, SourceGenConstants.WRITE_METHOD)
+                .stringLiteral(outText.getText())
+                .endCall()
+                .endStatement();
+    }
+
+    @Override
+    public void visit(Loop.Start loop) {
+        VariableDescriptor descriptor = analyzer.descriptor(loop.getListVariable());
+        String listVariable = descriptor.getAssignedName();
+        String collectionVar = descriptor.requireListCoercion();
+        source.beginIf().append(collectionVar).equality().nullLiteral().completeIf()
+                .startStatement()
+                .append(collectionVar)
+                .assign()
+                .startMethodCall(SourceGenConstants.RENDER_CONTEXT_INSTANCE, RenderContextImpl.COLLECTION_COERCE)
+                .append(listVariable)
+                .endCall()
+                .endStatement()
+                .endIf();
+        String indexVar = declare(loop.getIndexVariable(), Type.LONG);
+        source.beginAssignment(indexVar, Type.LONG.getNativeClass()).number(0).endStatement();
+        String itemVar = declare(loop.getItemVariable(), Type.UNKNOWN);
+        source.beginFor(itemVar, collectionVar);
+        loopStatusStack.push(indexVar);
+    }
+
+    @Override
+    public void visit(Loop.End loopEnd) {
+        String indexVar = loopStatusStack.pop();
+        source.startStatement().append(indexVar).increment().endStatement();
+        source.endFor();
+        analyzer.endVariable();
+        analyzer.endVariable();
+    }
+
+    @Override
+    public void visit(Procedure.Start startProcedure) {
+        UnitBuilder subTemplateUnit = unitBuilder.newSubBuilder(startProcedure.getName(), startProcedure.getParameters());
+        analyzer.declareTemplate(startProcedure.getName());
+        control.push(new CodeGenVisitor(subTemplateUnit, control));
+    }
+
+    @Override
+    public void visit(Procedure.End endProcedure) {
+        CodeGenVisitor previous = (CodeGenVisitor) control.pop();
+        previous.finish();
+    }
+
+    @Override
+    public void visit(Procedure.Call procedureCall) {
+        String templateVar = analyzer.assignedName(procedureCall.getTemplateVariable());
+        String argVar = analyzer.assignedName(procedureCall.getArgumentsVariable());
+        source.startStatement()
+                .startCall(SourceGenConstants.CALL_UNIT_METHOD, false)
+                .append(SourceGenConstants.RENDER_CONTEXT_INSTANCE)
+                .separateArgument()
+                .append(templateVar)
+                .separateArgument()
+                .append(argVar)
+                .endCall()
+                .endStatement();
+    }
+
+    private String declare(String originalName, Type type) {
+        return analyzer.declareVariable(originalName, type).getAssignedName();
+    }
+
+    private void generateCoercionClearing(String coercionVariableName) {
+        source.startStatement().append(coercionVariableName).assign().nullLiteral().endStatement();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/IgnoreRange.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/IgnoreRange.java
new file mode 100644
index 0000000..acd23f1
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/IgnoreRange.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.visitor;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+
+/**
+ * Ignore a nested range of commands
+ */
+public abstract class IgnoreRange extends UniformVisitor {
+
+    private final Class<? extends Command> rangeStart;
+    private final Class<? extends Command> rangeEnd;
+
+    private int skipCount = 1;
+
+    public IgnoreRange(Class<? extends Command> rangeStart, Class<? extends Command> rangeEnd) {
+        this.rangeStart = rangeStart;
+        this.rangeEnd = rangeEnd;
+    }
+
+    @Override
+    public void onCommand(Command command) {
+        Class<? extends Command> commandClass = command.getClass();
+        if (commandClass.equals(rangeStart)) {
+            skipCount++;
+        } else if (commandClass.equals(rangeEnd)) {
+            skipCount--;
+        }
+        if (skipCount == 0) {
+            onCompleted();
+        }
+    }
+
+    protected abstract void onCompleted();
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulRangeIgnore.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulRangeIgnore.java
new file mode 100644
index 0000000..7d2d1f1
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulRangeIgnore.java
@@ -0,0 +1,41 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.visitor;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+
+/**
+ * Variant of {@link IgnoreRange} to be used in stateful visitors.
+ */
+public class StatefulRangeIgnore extends IgnoreRange {
+
+    private final StatefulVisitor.StateControl stateControl;
+
+    public StatefulRangeIgnore(StatefulVisitor.StateControl stateControl, Class<? extends Command> rangeStart,
+                               Class<? extends Command> rangeEnd) {
+        super(rangeStart, rangeEnd);
+        this.stateControl = stateControl;
+    }
+
+    @Override
+    protected void onCompleted() {
+        stateControl.pop();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulVisitor.java
new file mode 100644
index 0000000..770c570
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/StatefulVisitor.java
@@ -0,0 +1,156 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.visitor;
+
+import java.util.Stack;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+
+/**
+ * Implements the state pattern for command visitors
+ */
+public class StatefulVisitor implements CommandVisitor {
+
+    private final Stack<CommandVisitor> stack = new Stack<CommandVisitor>();
+    private CommandVisitor visitor;
+    private StateControl control = new StateControl();
+
+    public StatefulVisitor() {
+        this.visitor = InvalidState.INSTANCE;
+    }
+
+    public StateControl getControl() {
+        return control;
+    }
+
+    public void initializeWith(CommandVisitor initialState) {
+        if (this.visitor != InvalidState.INSTANCE) {
+            throw new IllegalStateException("Initial state is already set");
+        }
+        this.visitor = initialState;
+    }
+
+    @Override
+    public void visit(Conditional.Start conditionalStart) {
+        visitor.visit(conditionalStart);
+    }
+
+    @Override
+    public void visit(Conditional.End conditionalEnd) {
+        visitor.visit(conditionalEnd);
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        visitor.visit(variableBindingStart);
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+        visitor.visit(variableBindingEnd);
+    }
+
+    @Override
+    public void visit(VariableBinding.Global globalAssignment) {
+        visitor.visit(globalAssignment);
+    }
+
+    @Override
+    public void visit(OutVariable outVariable) {
+        visitor.visit(outVariable);
+    }
+
+    @Override
+    public void visit(OutText outText) {
+        visitor.visit(outText);
+    }
+
+    @Override
+    public void visit(Loop.Start loopStart) {
+        visitor.visit(loopStart);
+    }
+
+    @Override
+    public void visit(Loop.End loopEnd) {
+        visitor.visit(loopEnd);
+    }
+
+    @Override
+    public void visit(Procedure.Start startProcedure) {
+        visitor.visit(startProcedure);
+    }
+
+    @Override
+    public void visit(Procedure.End endProcedure) {
+        visitor.visit(endProcedure);
+    }
+
+    @Override
+    public void visit(Procedure.Call procedureCall) {
+        visitor.visit(procedureCall);
+    }
+
+    private void pushVisitor(CommandVisitor visitor) {
+        stack.push(this.visitor);
+        this.visitor = visitor;
+    }
+
+    private CommandVisitor popVisitor() {
+        CommandVisitor top = this.visitor;
+        this.visitor = this.stack.pop();
+        return top;
+    }
+
+    public final class StateControl {
+
+        public void push(CommandVisitor visitor) {
+            pushVisitor(visitor);
+        }
+
+        public CommandVisitor pop() {
+            return popVisitor();
+        }
+
+        public CommandVisitor replace(CommandVisitor visitor) {
+            CommandVisitor current = pop();
+            push(visitor);
+            return current;
+        }
+    }
+
+    private static final class InvalidState extends UniformVisitor {
+
+        public static final InvalidState INSTANCE = new InvalidState();
+
+        private InvalidState() {
+        }
+
+        @Override
+        public void onCommand(Command command) {
+            throw new IllegalStateException("StatefulVisitor has not been initialized");
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/TrackingVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/TrackingVisitor.java
new file mode 100644
index 0000000..a32200c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/TrackingVisitor.java
@@ -0,0 +1,61 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.compiler.visitor;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.util.VariableTracker;
+
+/**
+ * Command visitor which tracks variables in commands
+ */
+public abstract class TrackingVisitor<T> extends UniformVisitor {
+
+    protected final VariableTracker<T> tracker = new VariableTracker<T>();
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        super.visit(variableBindingStart);
+        tracker.pushVariable(variableBindingStart.getVariableName(), assignDefault(variableBindingStart));
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+        super.visit(variableBindingEnd);
+        tracker.popVariable();
+    }
+
+    @Override
+    public void visit(Loop.Start loopStart) {
+        super.visit(loopStart);
+        tracker.pushVariable(loopStart.getIndexVariable(), assignDefault(loopStart));
+        tracker.pushVariable(loopStart.getItemVariable(), assignDefault(loopStart));
+    }
+
+    @Override
+    public void visit(Loop.End loopEnd) {
+        super.visit(loopEnd);
+        tracker.popVariable();
+        tracker.popVariable();
+    }
+
+    protected abstract T assignDefault(Command command);
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/UniformVisitor.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/UniformVisitor.java
new file mode 100644
index 0000000..16b8966
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/compiler/visitor/UniformVisitor.java
@@ -0,0 +1,96 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.compiler.visitor;
+
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.CommandVisitor;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+
+/**
+ * Do not dispatch for different command types
+ */
+public abstract class UniformVisitor implements CommandVisitor {
+
+    protected abstract void onCommand(Command command);
+
+    @Override
+    public void visit(Conditional.Start conditionalStart) {
+        onCommand(conditionalStart);
+    }
+
+    @Override
+    public void visit(Conditional.End conditionalEnd) {
+        onCommand(conditionalEnd);
+    }
+
+    @Override
+    public void visit(VariableBinding.Start variableBindingStart) {
+        onCommand(variableBindingStart);
+    }
+
+    @Override
+    public void visit(VariableBinding.End variableBindingEnd) {
+        onCommand(variableBindingEnd);
+    }
+
+    @Override
+    public void visit(VariableBinding.Global globalAssignment) {
+        onCommand(globalAssignment);
+    }
+
+    @Override
+    public void visit(OutVariable outVariable) {
+        onCommand(outVariable);
+    }
+
+    @Override
+    public void visit(OutText outText) {
+        onCommand(outText);
+    }
+
+    @Override
+    public void visit(Loop.Start loopStart) {
+        onCommand(loopStart);
+    }
+
+    @Override
+    public void visit(Loop.End loopEnd) {
+        onCommand(loopEnd);
+    }
+
+    @Override
+    public void visit(Procedure.Start startProcedure) {
+        onCommand(startProcedure);
+    }
+
+    @Override
+    public void visit(Procedure.End endProcedure) {
+        onCommand(endProcedure);
+    }
+
+    @Override
+    public void visit(Procedure.Call procedureCall) {
+        onCommand(procedureCall);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/ExtensionRegistryService.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/ExtensionRegistryService.java
new file mode 100644
index 0000000..c5da6dd
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/ExtensionRegistryService.java
@@ -0,0 +1,89 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.ReferenceCardinality;
+import org.apache.felix.scr.annotations.ReferencePolicy;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.commons.osgi.PropertiesUtil;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.osgi.framework.Constants;
+
+/**
+ * Aggregator for all runtime extensions.
+ */
+@Component
+@Service(ExtensionRegistryService.class)
+@Reference(
+        policy = ReferencePolicy.DYNAMIC,
+        referenceInterface = RuntimeExtension.class,
+        name = "extensionService",
+        cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
+)
+public class ExtensionRegistryService {
+
+    private volatile Map<String, RuntimeExtension> mapping = new HashMap<String, RuntimeExtension>();
+    private Map<String, Integer> mappingPriorities = new HashMap<String, Integer>(10, 0.9f);
+
+    public Map<String, RuntimeExtension> extensions() {
+        return mapping;
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected synchronized void bindExtensionService(RuntimeExtension extension, Map<String, Object> properties) {
+        Integer newPriority = PropertiesUtil.toInteger(properties.get(Constants.SERVICE_RANKING), 0);
+        String extensionName = PropertiesUtil.toString(properties.get(RuntimeExtension.SCR_PROP_NAME), "");
+        Integer priority = PropertiesUtil.toInteger(mappingPriorities.get(extensionName), 0);
+        if (newPriority > priority) {
+                mapping = Collections.unmodifiableMap(add(mapping, extension, extensionName));
+                mappingPriorities.put(extensionName, newPriority);
+        } else {
+            if (!mapping.containsKey(extensionName)) {
+                mapping = Collections.unmodifiableMap(add(mapping, extension, extensionName));
+                mappingPriorities.put(extensionName, newPriority);
+            }
+        }
+
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected synchronized void unbindExtensionService(RuntimeExtension extension, Map<String, Object> properties) {
+        String extensionName = PropertiesUtil.toString(properties.get(RuntimeExtension.SCR_PROP_NAME), "");
+        mappingPriorities.remove(extensionName);
+        mapping = Collections.unmodifiableMap(remove(mapping, extensionName));
+    }
+
+    private Map<String, RuntimeExtension> add(Map<String, RuntimeExtension> oldMap, RuntimeExtension extension, String extensionName) {
+        HashMap<String, RuntimeExtension> newMap = new HashMap<String, RuntimeExtension>(oldMap);
+        newMap.put(extensionName, extension);
+        return newMap;
+    }
+
+    private Map<String, RuntimeExtension> remove(Map<String, RuntimeExtension> oldMap, String extensionName) {
+        HashMap<String, RuntimeExtension> newMap = new HashMap<String, RuntimeExtension>(oldMap);
+        newMap.remove(extensionName);
+        return newMap;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyBindingsValuesProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyBindingsValuesProvider.java
new file mode 100644
index 0000000..f7ba40d
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyBindingsValuesProvider.java
@@ -0,0 +1,53 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine;
+
+import javax.script.Bindings;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ValueMap;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.scripting.api.BindingsValuesProvider;
+
+/**
+ * Sightly specific {@code BindingsValuesProvider}.
+ */
+@Component()
+@Service(BindingsValuesProvider.class)
+@Properties({
+        @Property(name = "javax.script.name", value = "sightly", propertyPrivate = true)
+})
+public class SightlyBindingsValuesProvider implements BindingsValuesProvider {
+
+    public static final String PROPERTIES = "properties";
+
+    @Override
+    public void addBindings(Bindings bindings) {
+        if (!bindings.containsKey(PROPERTIES)) {
+            Resource currentResource = (Resource) bindings.get(SlingBindings.RESOURCE);
+            if (currentResource != null) {
+                bindings.put(PROPERTIES, currentResource.adaptTo(ValueMap.class));
+            }
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyEngineConfiguration.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyEngineConfiguration.java
new file mode 100644
index 0000000..6bf2c07
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyEngineConfiguration.java
@@ -0,0 +1,108 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Dictionary;
+import java.util.jar.Attributes;
+import java.util.jar.Manifest;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.commons.osgi.PropertiesUtil;
+import org.osgi.service.component.ComponentContext;
+
+/**
+ * Holds various Sightly engine global configurations.
+ */
+@Component(
+        metatype = true,
+        label = "Apache Sling Scripting Sightly Engine Configuration",
+        description = "Sightly Engine Configuration Options"
+)
+@Service(SightlyEngineConfiguration.class)
+@Properties({
+        @Property(
+                name = SightlyEngineConfiguration.SCR_PROP_NAME_DEVMODE,
+                boolValue = SightlyEngineConfiguration.SCR_PROP_DEFAULT_DEVMODE,
+                label = "Development Mode",
+                description = "If enabled, Sightly components will be recompiled at every request instead of loading objects from memory."
+        ),
+        @Property(
+                name = SightlyEngineConfiguration.SCR_PROP_NAME_ENCODING,
+                value = SightlyEngineConfiguration.SCR_PROP_DEFAULT_ENCODING,
+                label = "Template Files Default Encoding",
+                description = "The default encoding used for reading Sightly template files (this directly affects how Sightly templates" +
+                        "are rendered)."
+        )
+})
+public class SightlyEngineConfiguration {
+
+    public static final String SCR_PROP_NAME_DEVMODE = "org.apache.sling.scripting.sightly.devmode";
+    public static final boolean SCR_PROP_DEFAULT_DEVMODE = false;
+
+    public static final String SCR_PROP_NAME_ENCODING = "org.apache.sling.scripting.sightly.encoding";
+    public static final String SCR_PROP_DEFAULT_ENCODING = "UTF-8";
+
+    private String engineVersion = "0";
+    private boolean devMode = false;
+    private String encoding = SCR_PROP_DEFAULT_ENCODING;
+
+    public String getEngineVersion() {
+        return engineVersion;
+    }
+
+    public boolean isDevMode() {
+        return devMode;
+    }
+
+    public String getEncoding() {
+        return encoding;
+    }
+
+    protected void activate(ComponentContext componentContext) {
+        InputStream ins = null;
+        try {
+            ins = getClass().getResourceAsStream("/META-INF/MANIFEST.MF");
+            if (ins != null) {
+                Manifest manifest = new Manifest(ins);
+                Attributes attrs = manifest.getMainAttributes();
+                String version = attrs.getValue("ScriptEngine-Version");
+                if (version != null) {
+                    engineVersion = version;
+                }
+            }
+        } catch (IOException ioe) {
+        } finally {
+            if (ins != null) {
+                try {
+                    ins.close();
+                } catch (IOException ignore) {
+                }
+            }
+        }
+        Dictionary properties = componentContext.getProperties();
+        devMode = PropertiesUtil.toBoolean(properties.get(SCR_PROP_NAME_DEVMODE), SCR_PROP_DEFAULT_DEVMODE);
+        encoding = PropertiesUtil.toString(properties.get(SCR_PROP_NAME_ENCODING), SCR_PROP_DEFAULT_ENCODING);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngine.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngine.java
new file mode 100644
index 0000000..9d5e6a7
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngine.java
@@ -0,0 +1,158 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine;
+
+import java.io.Reader;
+import java.util.Collections;
+
+import javax.script.Bindings;
+import javax.script.ScriptContext;
+import javax.script.ScriptEngineFactory;
+import javax.script.ScriptException;
+import javax.script.SimpleBindings;
+
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.commons.classloader.DynamicClassLoader;
+import org.apache.sling.scripting.api.AbstractSlingScriptEngine;
+import org.apache.sling.scripting.sightly.SightlyException;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderUnit;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * The Sightly Script engine
+ */
+public class SightlyScriptEngine extends AbstractSlingScriptEngine {
+
+    private static final Logger LOG = LoggerFactory.getLogger(SightlyScriptEngine.class);
+    private static final Bindings EMPTY_BINDINGS = new SimpleBindings(Collections.<String, Object>emptyMap());
+    private static final int MAX_CLASSLOADER_RETRIES = 5;
+
+    private final UnitLoader unitLoader;
+    private final ExtensionRegistryService extensionRegistryService;
+
+    public SightlyScriptEngine(ScriptEngineFactory scriptEngineFactory,
+                               UnitLoader unitLoader,
+                               ExtensionRegistryService extensionRegistryService) {
+        super(scriptEngineFactory);
+        this.unitLoader = unitLoader;
+        this.extensionRegistryService = extensionRegistryService;
+    }
+
+    @Override
+    public Object eval(Reader reader, ScriptContext scriptContext) throws ScriptException {
+        ClassLoader old = Thread.currentThread().getContextClassLoader();
+        Thread.currentThread().setContextClassLoader(((SightlyScriptEngineFactory) getFactory()).getClassLoader());
+        checkArguments(reader, scriptContext);
+        Bindings bindings = scriptContext.getBindings(ScriptContext.ENGINE_SCOPE);
+        SlingScriptHelper slingScriptHelper = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+        Resource scriptResource = slingScriptHelper.getScript().getScriptResource();
+
+        final SlingBindings slingBindings = new SlingBindings();
+        slingBindings.putAll(bindings);
+
+        Bindings globalBindings = new SimpleBindings(slingBindings);
+
+        final SlingHttpServletRequest request = slingBindings.getRequest();
+        final Object oldValue = request.getAttribute(SlingBindings.class.getName());
+        try {
+            request.setAttribute(SlingBindings.class.getName(), slingBindings);
+            evaluateScript(scriptResource, globalBindings);
+        } finally {
+            request.setAttribute(SlingBindings.class.getName(), oldValue);
+            Thread.currentThread().setContextClassLoader(old);
+        }
+
+        return null;
+    }
+
+    private void evaluateScript(Resource scriptResource, Bindings bindings) {
+        ResourceResolver resourceResolver = null;
+        RenderContextImpl renderContext = new RenderContextImpl(bindings, extensionRegistryService.extensions());
+        RenderUnit renderUnit = unitLoader.createUnit(scriptResource, bindings, renderContext);
+        try {
+            resourceResolver = getAdminResourceResolver(bindings);
+            renderUnit.render(renderContext, EMPTY_BINDINGS);
+        } catch (NoClassDefFoundError defFoundError) {
+            if (renderContext != null) {
+                ClassLoader dcl = renderUnit.getClass().getClassLoader().getParent();
+                if (dcl instanceof DynamicClassLoader && !((DynamicClassLoader) dcl).isLive()) {
+                    boolean defError = true;
+                    int retries = 0;
+                    while (defError) {
+                        try {
+                            renderUnit = unitLoader.createUnit(scriptResource, bindings, renderContext);
+                            renderUnit.render(renderContext, EMPTY_BINDINGS);
+                            defError = false;
+                        } catch (Throwable t) {
+                            if (!(t instanceof NoClassDefFoundError)) {
+                                // break immediately if there's a different error than a classloader one
+                                if (t instanceof Error) {
+                                    throw (Error) t;
+                                }
+                                throw (RuntimeException) t;
+                            }
+                            retries++;
+                            if (retries > MAX_CLASSLOADER_RETRIES) {
+                                LOG.error("Max number of retries (" + MAX_CLASSLOADER_RETRIES +
+                                        ") for obtaining a valid RenderUnit was exceeded.");
+                                throw defFoundError;
+                            }
+                        }
+                    }
+                } else {
+                    // if we can't recover from this just throw the original exception
+                    throw defFoundError;
+                }
+            }
+        }
+        finally {
+            if (resourceResolver != null) {
+                resourceResolver.close();
+            }
+        }
+    }
+
+    private void checkArguments(Reader reader, ScriptContext scriptContext) {
+        if (reader == null) {
+            throw new NullPointerException("Reader cannot be null");
+        }
+        if (scriptContext == null) {
+            throw new NullPointerException("ScriptContext cannot be null");
+        }
+    }
+
+    private ResourceResolver getAdminResourceResolver(Bindings bindings) {
+        SlingScriptHelper sling = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+        ResourceResolverFactory rrf = sling.getService(ResourceResolverFactory.class);
+        try {
+            return rrf.getAdministrativeResourceResolver(null);
+        } catch (LoginException e) {
+            throw new SightlyException(e);
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngineFactory.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngineFactory.java
new file mode 100644
index 0000000..e8cbccb
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/SightlyScriptEngineFactory.java
@@ -0,0 +1,102 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine;
+
+import javax.script.ScriptEngine;
+import javax.script.ScriptEngineFactory;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.commons.classloader.DynamicClassLoaderManager;
+import org.apache.sling.scripting.api.AbstractScriptEngineFactory;
+
+/**
+ * Sightly template engine factory
+ */
+@Component()
+@Service(ScriptEngineFactory.class)
+@Properties({
+        @Property(name = "service.description", value = "Sightly Templating Engine"),
+        @Property(name = "compatible.javax.script.name", value = "sly")
+})
+public class SightlyScriptEngineFactory extends AbstractScriptEngineFactory {
+
+    @Reference
+    private UnitLoader unitLoader = null;
+
+    @Reference
+    private ExtensionRegistryService extensionRegistryService = null;
+
+    @Reference()
+    private DynamicClassLoaderManager dynamicClassLoaderManager;
+
+    private ClassLoader dynamicClassLoader;
+
+    public final static String SHORT_NAME = "sightly";
+
+    public final static String LANGUAGE_NAME = "The Sightly Templating Language";
+
+    public final static String LANGUAGE_VERSION = "1.0";
+
+    public final static String EXTENSION = "html";
+
+    public SightlyScriptEngineFactory() {
+        setNames(SHORT_NAME);
+        setExtensions(EXTENSION);
+    }
+
+    @Override
+    public String getLanguageName() {
+        return LANGUAGE_NAME;
+    }
+
+    @Override
+    public String getLanguageVersion() {
+        return LANGUAGE_VERSION;
+    }
+
+    @Override
+    public ScriptEngine getScriptEngine() {
+        return new SightlyScriptEngine(this, unitLoader, extensionRegistryService);
+    }
+
+    protected void bindDynamicClassLoaderManager(final DynamicClassLoaderManager dclm) {
+        if (this.dynamicClassLoader != null) {
+            this.dynamicClassLoader = null;
+            this.dynamicClassLoaderManager = null;
+        }
+        this.dynamicClassLoaderManager = dclm;
+        dynamicClassLoader = dclm.getDynamicClassLoader();
+    }
+
+    protected void unbindDynamicClassLoaderManager(final DynamicClassLoaderManager dclm) {
+        if (this.dynamicClassLoaderManager == dclm) {
+            this.dynamicClassLoader = null;
+            this.dynamicClassLoaderManager = null;
+        }
+    }
+
+    protected ClassLoader getClassLoader() {
+        return dynamicClassLoader;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/UnitLoader.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/UnitLoader.java
new file mode 100644
index 0000000..61fdd2d
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/UnitLoader.java
@@ -0,0 +1,448 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.util.Calendar;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+import javax.script.Bindings;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.felix.scr.annotations.Activate;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.SlingConstants;
+import org.apache.sling.api.SlingHttpServletResponse;
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.PersistenceException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.api.resource.ResourceUtil;
+import org.apache.sling.api.resource.ValueMap;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.scripting.sightly.SightlyException;
+import org.apache.sling.scripting.sightly.impl.compiled.CompilationOutput;
+import org.apache.sling.scripting.sightly.impl.compiled.JavaClassBackend;
+import org.apache.sling.scripting.sightly.impl.compiler.SightlyJavaCompilerService;
+import org.apache.sling.scripting.sightly.impl.compiler.SightlyParsingException;
+import org.apache.sling.scripting.sightly.impl.compiler.SightlyCompilerService;
+import org.apache.sling.scripting.sightly.impl.compiler.util.GlobalShadowCheckBackend;
+import org.apache.sling.scripting.sightly.impl.engine.compiled.JavaClassTemplate;
+import org.apache.sling.scripting.sightly.impl.engine.compiled.SourceIdentifier;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderUnit;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.SightlyRenderException;
+import org.apache.sling.settings.SlingSettingsService;
+import org.osgi.service.component.ComponentContext;
+import org.osgi.service.event.Event;
+import org.osgi.service.event.EventConstants;
+import org.osgi.service.event.EventHandler;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Create rendering units from resources.
+ */
+@Component
+@Service({UnitLoader.class, EventHandler.class})
+@Properties({
+        @Property(
+                name = EventConstants.EVENT_TOPIC,
+                value = {SlingConstants.TOPIC_RESOURCE_ADDED, SlingConstants.TOPIC_RESOURCE_CHANGED, SlingConstants.TOPIC_RESOURCE_REMOVED}
+        ),
+        @Property(
+                name = EventConstants.EVENT_FILTER,
+                value = "(|(" + SlingConstants.PROPERTY_PATH + "=/apps/**/*." + SightlyScriptEngineFactory.EXTENSION + ")(" +
+                        SlingConstants.PROPERTY_PATH + "=/libs/**/*." + SightlyScriptEngineFactory.EXTENSION + "))"
+        )
+})
+public class UnitLoader implements EventHandler {
+
+    public static final String DEFAULT_REPO_BASE_PATH = "/var/classes";
+    private static final Logger log = LoggerFactory.getLogger(UnitLoader.class);
+    private static final String CLASS_NAME_PREFIX = "SightlyJava_";
+    private static final String MAIN_TEMPLATE_PATH = "templates/compiled_unit_template.txt";
+    private static final String CHILD_TEMPLATE_PATH = "templates/subtemplate.txt";
+
+    private static final String NT_FOLDER = "nt:folder";
+    private static final String NT_FILE = "nt:file";
+    private static final String NT_RESOURCE = "nt:resource";
+    private static final String JCR_PRIMARY_TYPE = "jcr:primaryType";
+    private static final String JCR_CONTENT = "jcr:content";
+    private static final String JCR_DATA = "jcr:data";
+    private static final String JCR_LASTMODIFIED = "jcr:lastModified";
+    private static final String JCR_ENCODING = "jcr:encoding";
+
+    private String mainTemplate;
+    private String childTemplate;
+    private Map<String, Long> slyScriptsMap = new ConcurrentHashMap<String, Long>();
+
+    private final Map<String, Lock> activeWrites = new HashMap<String, Lock>();
+
+    @Reference
+    private SightlyCompilerService sightlyCompilerService = null;
+
+    @Reference
+    private SightlyJavaCompilerService sightlyJavaCompilerService = null;
+
+    @Reference
+    private SightlyEngineConfiguration sightlyEngineConfiguration = null;
+
+    @Reference
+    private ResourceResolverFactory rrf = null;
+
+    @Reference
+    private SlingSettingsService slingSettings = null;
+
+    private static long getLastModifiedDate(ResourceResolver resolver, String path) {
+        try {
+            Resource ntResource = getNtResource(resolver, path);
+            if (ntResource != null) {
+                ValueMap ntResourceProperties = ntResource.adaptTo(ValueMap.class);
+                /**
+                 * make sure to use 0L for the default value; otherwise we get an Integer
+                 * overflow due to the long value stored in JCR
+                 */
+                return ntResourceProperties.get(JCR_LASTMODIFIED, 0L);
+            }
+        } catch (Exception e) {
+            log.error("Error while reading last modification date: ", e);
+        }
+        return 0L;
+    }
+
+    private static Resource getNtResource(ResourceResolver resolver, String path) {
+        Resource resource = resolver.getResource(path);
+        if (resource != null) {
+            if (path.endsWith(JCR_CONTENT) && resource.isResourceType(NT_RESOURCE)) {
+                return resource;
+            } else {
+                Resource ntResource = resource.getChild(JCR_CONTENT);
+                if (ntResource != null && ntResource.isResourceType(NT_RESOURCE)) {
+                    return ntResource;
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Create a render unit from the given resource
+     *
+     * @param scriptResource the resource
+     * @param bindings       the bindings
+     * @param renderContext  the rendering context
+     * @return the render unit
+     */
+    public RenderUnit createUnit(Resource scriptResource, Bindings bindings, RenderContextImpl renderContext) {
+        Lock lock = null;
+        ResourceResolver adminResolver = null;
+        try {
+            SourceIdentifier sourceIdentifier = obtainIdentifier(scriptResource);
+            adminResolver = rrf.getAdministrativeResourceResolver(null);
+            Object obj;
+            ValueMap templateProperties = adminResolver.getResource(scriptResource.getPath()).getChild(JCR_CONTENT).adaptTo(ValueMap.class);
+            String encoding = templateProperties.get(JCR_ENCODING, sightlyEngineConfiguration.getEncoding());
+            SlingHttpServletResponse response = (SlingHttpServletResponse) bindings.get(SlingBindings.RESPONSE);
+            response.setCharacterEncoding(encoding);
+            if (needsUpdate(adminResolver, sourceIdentifier)) {
+                synchronized (activeWrites) {
+                    String sourceFullPath = sourceIdentifier.getSourceFullPath();
+                    lock = activeWrites.get(sourceFullPath);
+                    if (lock == null) {
+                        lock = new ReentrantLock();
+                        activeWrites.put(sourceFullPath, lock);
+                    }
+                    lock.lock();
+                }
+                createClass(adminResolver, sourceIdentifier, bindings, encoding, renderContext);
+                Resource javaClassResource = adminResolver.getResource(sourceIdentifier.getSourceFullPath());
+                obj = sightlyJavaCompilerService.compileSource(javaClassResource, sourceIdentifier.getFullyQualifiedName());
+            } else {
+                Resource javaClassResource = adminResolver.getResource(sourceIdentifier.getSourceFullPath());
+                obj = sightlyJavaCompilerService.getInstance(javaClassResource, sourceIdentifier.getFullyQualifiedName());
+            }
+            if (!(obj instanceof RenderUnit)) {
+                throw new SightlyRenderException("Class is not a RenderUnit instance");
+            }
+            return (RenderUnit) obj;
+        } catch (LoginException e) {
+            throw new SightlyRenderException("Unable to create a RenderUnit.", e);
+        } finally {
+            if (adminResolver != null) {
+                adminResolver.close();
+            }
+            if (lock != null) {
+                lock.unlock();
+            }
+        }
+    }
+
+    @Override
+    public void handleEvent(Event event) {
+        String path = (String) event.getProperty(SlingConstants.PROPERTY_PATH);
+        String topic = event.getTopic();
+        if (SlingConstants.TOPIC_RESOURCE_ADDED.equals(topic) || SlingConstants.TOPIC_RESOURCE_CHANGED.equals(topic)) {
+            slyScriptsMap.put(path, Calendar.getInstance().getTimeInMillis());
+        } else if (SlingConstants.TOPIC_RESOURCE_REMOVED.equals(topic)) {
+            slyScriptsMap.remove(path);
+        }
+    }
+
+    @Activate
+    @SuppressWarnings("unused")
+    protected void activate(ComponentContext componentContext) {
+        mainTemplate = resourceFile(componentContext, MAIN_TEMPLATE_PATH);
+        childTemplate = resourceFile(componentContext, CHILD_TEMPLATE_PATH);
+        String basePath =
+                DEFAULT_REPO_BASE_PATH + "/" + slingSettings.getSlingId() + "/sightly/";
+        ResourceResolver adminResolver = null;
+        try {
+            adminResolver = rrf.getAdministrativeResourceResolver(null);
+            Resource basePathResource;
+            if ((basePathResource = adminResolver.getResource(basePath)) != null) {
+                for (Resource resource : basePathResource.getChildren()) {
+                    if (!resource.getName().equals(sightlyEngineConfiguration.getEngineVersion())) {
+                        adminResolver.delete(resource);
+                    }
+                }
+                if (adminResolver.hasChanges()) {
+                    adminResolver.commit();
+                }
+            }
+        } catch (Exception e) {
+            log.error("Cannot delete stale Sightly Java classes.", e);
+        } finally {
+            if (adminResolver != null) {
+                adminResolver.close();
+            }
+        }
+    }
+
+    private synchronized void writeSource(ResourceResolver resolver, String sourceFullPath, String source) {
+        try {
+            String sourceParentPath = ResourceUtil.getParent(sourceFullPath);
+            Map<String, Object> sourceFolderProperties = new HashMap<String, Object>();
+            sourceFolderProperties.put(JCR_PRIMARY_TYPE, NT_FOLDER);
+            createResource(resolver, sourceParentPath, sourceFolderProperties, NT_FOLDER, true, false);
+
+            Map<String, Object> sourceFileProperties = new HashMap<String, Object>();
+            sourceFileProperties.put(JCR_PRIMARY_TYPE, NT_FILE);
+            createResource(resolver, sourceFullPath, sourceFileProperties, null, false, false);
+
+            Map<String, Object> ntResourceProperties = new HashMap<String, Object>();
+            ntResourceProperties.put(JCR_PRIMARY_TYPE, NT_RESOURCE);
+            ntResourceProperties.put(JCR_DATA, new ByteArrayInputStream(source.getBytes()));
+            ntResourceProperties.put(JCR_LASTMODIFIED, Calendar.getInstance());
+            createResource(resolver, sourceFullPath + "/" + JCR_CONTENT, ntResourceProperties, NT_RESOURCE, true, true);
+            log.debug("Successfully written Java source file to repository: {}", sourceFullPath);
+        } catch (PersistenceException e) {
+            log.error("Repository error while writing Java source file: " + sourceFullPath, e);
+        }
+    }
+
+    private SourceIdentifier obtainIdentifier(Resource resource) {
+        String basePath =
+                DEFAULT_REPO_BASE_PATH + "/" + slingSettings.getSlingId() + "/sightly/" + sightlyEngineConfiguration.getEngineVersion();
+        return new SourceIdentifier(resource, CLASS_NAME_PREFIX, basePath);
+    }
+
+    private void createClass(ResourceResolver resolver, SourceIdentifier identifier, Bindings bindings, String encoding,
+                             RenderContextImpl renderContext) {
+        String scriptSource = null;
+        try {
+            Resource scriptResource = resolver.getResource(identifier.getResource().getPath());
+            if (scriptResource != null) {
+                scriptSource = IOUtils.toString(scriptResource.adaptTo(InputStream.class), encoding);
+                String javaSourceCode = obtainResultSource(scriptSource, identifier, bindings, renderContext);
+                writeSource(resolver, identifier.getSourceFullPath(), javaSourceCode);
+            }
+        } catch (SightlyParsingException e) {
+            String offendingInput = e.getOffendingInput();
+            if (StringUtils.isNotEmpty(offendingInput)) {
+                offendingInput = StringEscapeUtils.unescapeHtml(offendingInput.trim());
+                int errorLine = getLineWhereErrorOccurred(scriptSource, offendingInput);
+                throw new SightlyParsingException("Parsing error in template " + identifier.getResource().getPath() + " at line " +
+                        errorLine + ":\n" + offendingInput + "\n");
+            } else {
+                throw e;
+            }
+
+        } catch (IOException e) {
+            throw new SightlyRenderException(e);
+        }
+    }
+
+    private String obtainResultSource(String scriptSource, SourceIdentifier identifier, Bindings bindings, RenderContextImpl renderContext) {
+        JavaClassTemplate classTemplate = newMainTemplate();
+        classTemplate.setClassName(identifier.getClassName());
+        classTemplate.setPackageName(identifier.getPackageName());
+        CompilationOutput compilationOutput = obtainOutput(scriptSource, bindings, renderContext);
+        processCompilationResult(compilationOutput, classTemplate);
+        return classTemplate.toString();
+    }
+
+    private CompilationOutput obtainOutput(String source, Bindings bindings, RenderContextImpl renderContext) {
+        JavaClassBackend backend = new JavaClassBackend();
+        sightlyCompilerService.compile(source, new GlobalShadowCheckBackend(backend, bindings.keySet()), renderContext);
+        return backend.build();
+    }
+
+    private void processCompilationResult(CompilationOutput result, JavaClassTemplate mainTemplate) {
+        mainTemplate.writeMainBody(result.getMainBody());
+        for (Map.Entry<String, CompilationOutput> entry : result.getSubTemplates().entrySet()) {
+            JavaClassTemplate childTemplate = newChildTemplate();
+            processCompilationResult(entry.getValue(), childTemplate);
+            mainTemplate.writeSubTemplate(entry.getKey(), childTemplate.toString());
+        }
+    }
+
+    private JavaClassTemplate newMainTemplate() {
+        return new JavaClassTemplate(mainTemplate);
+    }
+
+    private JavaClassTemplate newChildTemplate() {
+        return new JavaClassTemplate(childTemplate);
+    }
+
+    private String resourceFile(ComponentContext componentContext, String path) {
+        InputStream inputStream = null;
+        try {
+            URL url = componentContext.getBundleContext().getBundle().getEntry(path);
+            if (url == null) {
+                throw new SightlyException("No bundle resource resides at " + path);
+            }
+            inputStream = componentContext.getBundleContext().getBundle().getEntry(path).openStream();
+            return IOUtils.toString(inputStream);
+        } catch (IOException e) {
+            throw new SightlyException("Java class templates could not be found");
+        } finally {
+            if (inputStream != null) {
+                try {
+                    inputStream.close();
+                } catch (IOException e) {
+                    log.error("Error when closing bundle resource stream", e);
+                }
+            }
+        }
+    }
+
+    private int getLineWhereErrorOccurred(String documentFragment, String offendingInput) {
+        int offendingInputIndex = documentFragment.indexOf(offendingInput);
+        String textBeforeError = documentFragment.substring(0, offendingInputIndex);
+        int line = 0;
+        int newLine = 0;
+        while (textBeforeError.length() > 0 && newLine != -1) {
+            newLine = textBeforeError.indexOf("\n");
+            if (newLine != -1) {
+                line++;
+                textBeforeError = textBeforeError.substring(newLine + 1, textBeforeError.length());
+            }
+        }
+        return ++line;
+    }
+
+    private boolean needsUpdate(ResourceResolver resolver, SourceIdentifier sourceIdentifier) {
+        if (sightlyEngineConfiguration.isDevMode()) {
+            return true;
+        }
+        String javaPath = sourceIdentifier.getSourceFullPath();
+        String slyPath = sourceIdentifier.getResource().getPath();
+        Long javaFileDate = getLastModifiedDate(resolver, javaPath);
+        if (javaFileDate != 0) {
+
+            Long slyScriptChangeDate = slyScriptsMap.get(slyPath);
+            if (slyScriptChangeDate != null) {
+                if (slyScriptChangeDate < javaFileDate) {
+                    return false;
+                }
+            } else {
+                slyScriptsMap.put(slyPath, Calendar.getInstance().getTimeInMillis());
+            }
+            return true;
+        }
+        slyScriptsMap.put(slyPath, Calendar.getInstance().getTimeInMillis());
+        return true;
+    }
+
+    private Resource createResource(ResourceResolver resolver, String path, Map<String, Object> resourceProperties, String intermediateType,
+                                    boolean autoCommit, boolean forceOverwrite) throws PersistenceException {
+        Resource rsrc = resolver.getResource(path);
+        if (rsrc == null || forceOverwrite) {
+            final int lastPos = path.lastIndexOf('/');
+            final String name = path.substring(lastPos + 1);
+
+            final Resource parentResource;
+            if (lastPos == 0) {
+                parentResource = resolver.getResource("/");
+            } else {
+                final String parentPath = path.substring(0, lastPos);
+                Map<String, Object> parentProperties = new HashMap<String, Object>();
+                parentProperties.put(JCR_PRIMARY_TYPE, intermediateType);
+                parentResource = createResource(resolver, parentPath, parentProperties, intermediateType, autoCommit, false);
+            }
+            if (autoCommit) {
+                resolver.refresh();
+            }
+            if (forceOverwrite) {
+                Resource resource = resolver.getResource(parentResource, name);
+                if (resource != null) {
+                    resolver.delete(resource);
+                }
+            }
+            try {
+                rsrc = resolver.create(parentResource, name, resourceProperties);
+                if (autoCommit) {
+                    resolver.commit();
+                    resolver.refresh();
+                    rsrc = resolver.getResource(parentResource, name);
+                }
+            } catch (PersistenceException pe) {
+                resolver.revert();
+                resolver.refresh();
+                rsrc = resolver.getResource(parentResource, name);
+                if (rsrc == null) {
+                    rsrc = resolver.create(parentResource, name, resourceProperties);
+                }
+            } finally {
+                if (autoCommit) {
+                    resolver.commit();
+                    resolver.refresh();
+                    rsrc = resolver.getResource(parentResource, name);
+                }
+            }
+        }
+        return rsrc;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/JavaClassTemplate.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/JavaClassTemplate.java
new file mode 100644
index 0000000..aa43a8b
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/JavaClassTemplate.java
@@ -0,0 +1,70 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.compiled;
+
+/**
+ * Template for generated Java classes.
+ */
+public class JavaClassTemplate {
+
+
+    private String classTemplate;
+
+    private static final String MAIN_BODY = "MainBody";
+    private static final String CLASS_NAME = "ClassName";
+    private static final String PACKAGE_NAME = "PackageName";
+    private static final String TEMPLATE_INIT = "SubTemplateMapInit";
+    private static final String NAME = "Name";
+
+    private StringBuilder templateInitBuilder = new StringBuilder();
+
+    public JavaClassTemplate(String template) {
+        this.classTemplate = template;
+    }
+
+    public void writeMainBody(String content) {
+        setPart(MAIN_BODY, content);
+    }
+
+    public void writeSubTemplate(String name, String content) {
+        templateInitBuilder.append(insertPart(NAME, content, name));
+    }
+
+    public void setClassName(String name) {
+        setPart(CLASS_NAME, name);
+    }
+
+    public void setPackageName(String name) {
+        setPart(PACKAGE_NAME, name);
+    }
+
+    @Override
+    public String toString() {
+        return insertPart(TEMPLATE_INIT, classTemplate, templateInitBuilder.toString());
+    }
+
+    private void setPart(String partName, String content) {
+        classTemplate = insertPart(partName, classTemplate, content);
+    }
+
+    private String insertPart(String partName, String original, String content) {
+        String id = "##" + partName + "##";
+        return original.replace(id, content);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/SourceIdentifier.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/SourceIdentifier.java
new file mode 100644
index 0000000..b6b53d0
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/compiled/SourceIdentifier.java
@@ -0,0 +1,105 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.compiled;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceUtil;
+
+/**
+ * Identifies a Java source file in a JCR repository.
+ */
+public class SourceIdentifier {
+
+    private final String className;
+    private final Resource resource;
+    private final String packageName;
+    private final String sourceFileName;
+    private final String sourceFullPath;
+    private final String fullyQualifiedName;
+
+    public SourceIdentifier(Resource resource, String classNamePrefix, String basePath) {
+        this.resource = resource;
+        this.className = buildClassName(resource, classNamePrefix);
+        this.packageName = buildPackageName(resource);
+        this.sourceFileName = buildSourceFileName(this.className);
+        this.sourceFullPath = buildSourceFullPath(resource, basePath, this.sourceFileName);
+        this.fullyQualifiedName = buildFullyQualifiedName(packageName, className);
+    }
+
+    public String getClassName() {
+        return className;
+    }
+
+    public Resource getResource() {
+        return resource;
+    }
+
+    public String getPackageName() {
+        return packageName;
+    }
+
+    public String getSourceFileName() {
+        return sourceFileName;
+    }
+
+    public String getSourceFullPath() {
+        return sourceFullPath;
+    }
+
+    public String getFullyQualifiedName() {
+        return fullyQualifiedName;
+    }
+
+    private String buildFullyQualifiedName(String packageName, String className) {
+        return packageName + "." + className;
+    }
+
+    private String buildClassName(Resource resource, String classNamePrefix) {
+        String scriptName = ResourceUtil.getName(resource.getPath());
+        scriptName = scriptName.substring(0, scriptName.lastIndexOf(getExtension(scriptName)));
+        String className = classNamePrefix + scriptName;
+        return className.replaceAll("-", "_").replaceAll("\\.", "_");
+    }
+
+    private String buildPackageName(Resource resource) {
+        return ResourceUtil.getParent(resource.getPath())
+                .replaceAll("/", ".")
+                .substring(1)
+                .replaceAll("-", "_");
+    }
+
+    private String buildSourceFileName(String className) {
+        return className + ".java";
+    }
+
+    private String buildSourceFullPath(Resource resource, String basePath, String sourceFileName) {
+        String sourceParentPath = basePath + ResourceUtil.getParent(resource.getPath());
+        return sourceParentPath + "/" + sourceFileName;
+    }
+
+    private String getExtension(String scriptName) {
+        if (StringUtils.isEmpty(scriptName)) {
+            return null;
+        }
+        int lastDotIndex = scriptName.lastIndexOf('.');
+        return scriptName.substring(lastDotIndex);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ExtensionUtils.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ExtensionUtils.java
new file mode 100644
index 0000000..609bfff
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ExtensionUtils.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.extension;
+
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtensionException;
+
+/**
+ * Helper class for {@link RuntimeExtension} implementations.
+ */
+public class ExtensionUtils {
+
+    /**
+     * Helper method for checking if the number of arguments passed to a {@link RuntimeExtension} are equal to what the extension requires.
+     *
+     * @param extensionName the name of the extension
+     * @param arguments     the arguments array
+     * @param count         the expected number or arguments
+     * @throws RuntimeExtensionException if the number of supplied arguments differs from what's expected
+     */
+    public static void checkArgumentCount(String extensionName, Object[] arguments, int count) {
+        if (arguments.length != count) {
+            throw new RuntimeExtensionException(String.format("Extension %s requires %d arguments", extensionName, count));
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/I18nRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/I18nRuntimeExtension.java
new file mode 100644
index 0000000..86ccac0
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/I18nRuntimeExtension.java
@@ -0,0 +1,99 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.extension;
+
+import java.util.Enumeration;
+import java.util.Locale;
+import java.util.ResourceBundle;
+
+import javax.script.Bindings;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.i18n.ResourceBundleProvider;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.impl.filter.I18nFilter;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@Component
+@Service(RuntimeExtension.class)
+@Properties({
+        @Property(name = RuntimeExtension.SCR_PROP_NAME, value = I18nFilter.FUNCTION)
+})
+public class I18nRuntimeExtension implements RuntimeExtension {
+
+    private static final Logger LOG = LoggerFactory.getLogger(I18nRuntimeExtension.class);
+
+    @Override
+    public ExtensionInstance provide(final RenderContext renderContext) {
+
+        return new ExtensionInstance() {
+            @Override
+            public Object call(Object... arguments) {
+                ExtensionUtils.checkArgumentCount(I18nFilter.FUNCTION, arguments, 3);
+                String text = renderContext.toString(arguments[0]);
+                String locale = renderContext.toString(arguments[1]);
+                String hint = renderContext.toString(arguments[2]);
+                return get(text, locale, hint);
+            }
+
+            private String get(String text, String locale, String hint) {
+                final Bindings bindings = renderContext.getBindings();
+                final SlingScriptHelper slingScriptHelper = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+                final SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
+                final ResourceBundleProvider resourceBundleProvider = slingScriptHelper.getService(ResourceBundleProvider.class);
+                if (resourceBundleProvider != null) {
+                    String key = text;
+                    if (StringUtils.isNotEmpty(hint)) {
+                        key += " ((" + hint + "))";
+                    }
+                    if (StringUtils.isEmpty(locale)) {
+                        Enumeration<Locale> requestLocales = request.getLocales();
+                        while (requestLocales.hasMoreElements()) {
+                            Locale l = requestLocales.nextElement();
+                            ResourceBundle resourceBundle = resourceBundleProvider.getResourceBundle(l);
+                            if (resourceBundle != null && resourceBundle.containsKey(key)) {
+                                return resourceBundle.getString(key);
+                            }
+                        }
+                    } else {
+                        Locale l = new Locale(locale);
+                        ResourceBundle resourceBundle = resourceBundleProvider.getResourceBundle(l);
+                        if (resourceBundle != null && resourceBundle.containsKey(key)) {
+                            return resourceBundle.getString(key);
+                        }
+                    }
+                }
+                LOG.warn("No translation found for string '{}' using expression provided locale '{}' or default locale '{}'",
+                        new String[] {text, locale, resourceBundleProvider.getDefaultLocale().getLanguage()});
+                return text;
+            }
+
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/IncludeRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/IncludeRuntimeExtension.java
new file mode 100644
index 0000000..a648c16
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/IncludeRuntimeExtension.java
@@ -0,0 +1,131 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.extension;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.util.Map;
+
+import javax.script.Bindings;
+import javax.servlet.Servlet;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.api.SlingHttpServletResponse;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.api.servlets.ServletResolver;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.SightlyRenderException;
+import org.apache.sling.scripting.sightly.impl.plugin.IncludePlugin;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@Component
+@Service(RuntimeExtension.class)
+@Properties({
+        @Property(name = RuntimeExtension.SCR_PROP_NAME, value = IncludePlugin.FUNCTION)
+})
+@SuppressWarnings("unused")
+/**
+ * Runtime support for including resources in a Sightly script through {@code data-sly-include}. For more details check the implementation
+ * of the {@link org.apache.sling.scripting.sightly.impl.plugin.IncludePlugin}.
+ */
+public class IncludeRuntimeExtension implements RuntimeExtension {
+
+    private static final Logger LOG = LoggerFactory.getLogger(IncludeRuntimeExtension.class);
+    private static final String OPTION_FILE = "file";
+    private static final String OPTION_PREPEND_PATH = "prependPath";
+    private static final String OPTION_APPEND_PATH = "appendPath";
+
+
+    @Override
+    public ExtensionInstance provide(final RenderContext renderContext) {
+
+        return new ExtensionInstance() {
+
+            private final Bindings bindings = renderContext.getBindings();
+
+            @Override
+            public Object call(Object... arguments) {
+                ExtensionUtils.checkArgumentCount(IncludePlugin.FUNCTION, arguments, 2);
+                String originalPath = renderContext.toString(arguments[0]);
+                Map options = (Map) arguments[1];
+                String path = buildPath(originalPath, options);
+                if (path == null) {
+                    throw new SightlyRenderException("Path for include is empty");
+                }
+                StringWriter output = new StringWriter();
+                includeScript(path, new PrintWriter(output));
+                return output.toString();
+
+            }
+
+            private String buildPath(String path, Map options) {
+                if (StringUtils.isEmpty(path)) {
+                    path = (String) options.get(OPTION_FILE);
+                }
+                if (StringUtils.isEmpty(path)) {
+                    return null;
+                }
+                String prependPath = (String) options.get(OPTION_PREPEND_PATH);
+                String appendPath = (String) options.get(OPTION_APPEND_PATH);
+                if (StringUtils.isNotEmpty(prependPath)) {
+                    path = prependPath + path;
+                }
+                if (StringUtils.isNotEmpty(appendPath)) {
+                    path = path + appendPath;
+                }
+                return path;
+            }
+
+            private void includeScript(String script, PrintWriter out) {
+                if (StringUtils.isEmpty(script)) {
+                    LOG.error("Script path cannot be empty");
+                } else {
+                    SlingScriptHelper slingScriptHelper = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+                    ServletResolver servletResolver = slingScriptHelper.getService(ServletResolver.class);
+                    if (servletResolver != null) {
+                        SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
+                        Servlet servlet = servletResolver.resolveServlet(request.getResource(), script);
+                        if (servlet != null) {
+                            try {
+                                SlingHttpServletResponse response = (SlingHttpServletResponse) bindings.get(SlingBindings.RESPONSE);
+                                PrintWriterResponseWrapper resWrapper = new PrintWriterResponseWrapper(out, response);
+                                servlet.service(request, resWrapper);
+                            } catch (Exception e) {
+                                LOG.error("Failed to include script {}", script, e);
+                            }
+                        } else {
+                            LOG.error("Failed to locate script {}", script);
+                        }
+                    } else {
+                        LOG.error("Sling ServletResolver service is unavailable, failed to include {}", script);
+                    }
+                }
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/PrintWriterResponseWrapper.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/PrintWriterResponseWrapper.java
new file mode 100644
index 0000000..11bd1b8
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/PrintWriterResponseWrapper.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.extension;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import org.apache.sling.api.SlingHttpServletResponse;
+import org.apache.sling.api.wrappers.SlingHttpServletResponseWrapper;
+
+/**
+ * Wrapper response to redirect the output into a specified print writer
+ */
+public class PrintWriterResponseWrapper extends SlingHttpServletResponseWrapper {
+
+    private final PrintWriter writer;
+
+    /**
+     * Create a wrapper for the supplied wrappedRequest
+     *
+     * @param writer - the base writer
+     * @param wrappedResponse - the wrapped response
+     */
+    public PrintWriterResponseWrapper(PrintWriter writer, SlingHttpServletResponse wrappedResponse) {
+        super(wrappedResponse);
+        this.writer = writer;
+    }
+
+    @Override
+    public PrintWriter getWriter() throws IOException {
+        return writer;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ResourceRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ResourceRuntimeExtension.java
new file mode 100644
index 0000000..5b5821e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/ResourceRuntimeExtension.java
@@ -0,0 +1,241 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.extension;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.script.Bindings;
+import javax.servlet.RequestDispatcher;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.api.SlingHttpServletResponse;
+import org.apache.sling.api.request.RequestDispatcherOptions;
+import org.apache.sling.api.resource.NonExistingResource;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceUtil;
+import org.apache.sling.api.resource.SyntheticResource;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.impl.plugin.ResourcePlugin;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Runtime support for including resources in a Sightly script through {@code data-sly-resource}. For more details check the implementation
+ * of the {@link org.apache.sling.scripting.sightly.impl.plugin.ResourcePlugin}.
+ */
+@Component
+@Service(RuntimeExtension.class)
+@Properties(
+        @Property(name = RuntimeExtension.SCR_PROP_NAME, value = ResourcePlugin.FUNCTION)
+)
+@SuppressWarnings("unused")
+public class ResourceRuntimeExtension implements RuntimeExtension {
+
+    private static final Logger LOG = LoggerFactory.getLogger(ResourceRuntimeExtension.class);
+    private static final String OPTION_RESOURCE_TYPE = "resourceType";
+    private static final String OPTION_PATH = "path";
+    private static final String OPTION_PREPEND_PATH = "prependPath";
+    private static final String OPTION_APPEND_PATH = "appendPath";
+    private static final String OPTION_SELECTORS = "selectors";
+    private static final String OPTION_REMOVE_SELECTORS = "removeSelectors";
+    private static final String OPTION_ADD_SELECTORS = "addSelectors";
+    private static final String OPTION_REPLACE_SELECTORS = "replaceSelectors";
+
+    @Override
+    public ExtensionInstance provide(final RenderContext renderContext) {
+        return new ExtensionInstance() {
+
+            private final Bindings bindings = renderContext.getBindings();
+
+            @Override
+            @SuppressWarnings("unchecked")
+            public Object call(Object... arguments) {
+                ExtensionUtils.checkArgumentCount(ResourcePlugin.FUNCTION, arguments, 2);
+                return provideResource(arguments[0], (Map<String, Object>) arguments[1]);
+            }
+
+            private String provideResource(Object pathObj, Map<String, Object> options) {
+                Map<String, Object> opts = new HashMap<String, Object>(options);
+                String path = buildPath(pathObj, opts);
+                String resourceType = getAndRemoveOption(opts, OPTION_RESOURCE_TYPE);
+                handleSelectors(path, opts);
+                String dispatcherOptions = createDispatcherOptions(opts);
+                StringWriter writer = new StringWriter();
+                PrintWriter printWriter = new PrintWriter(writer);
+                includeResource(printWriter, path, dispatcherOptions, resourceType);
+                return writer.toString();
+            }
+
+            private void handleSelectors(String path, Map<String, Object> options) {
+                String selectors = getAndRemoveOption(options, OPTION_SELECTORS);
+                if (StringUtils.isNotEmpty(selectors)) {
+                    // handle the selectors option
+                    options.put(OPTION_ADD_SELECTORS, selectors);
+                    options.put(OPTION_REPLACE_SELECTORS, " ");
+                } else {
+                    if (options.containsKey(OPTION_REMOVE_SELECTORS)) {
+                        String removeSelectors = getAndRemoveOption(options, OPTION_REMOVE_SELECTORS);
+                        if (StringUtils.isEmpty(removeSelectors)) {
+                            options.put(OPTION_REPLACE_SELECTORS, " ");
+                        } else {
+                            String currentSelectors = getSelectorsFromPath(path);
+                            if (StringUtils.isEmpty(currentSelectors)) {
+                                currentSelectors = ((SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST)).getRequestPathInfo()
+                                        .getSelectorString();
+                            }
+                            if (StringUtils.isNotEmpty(currentSelectors)) {
+                                options.put(OPTION_REPLACE_SELECTORS, " ");
+                                String addSelectors = currentSelectors.replace(removeSelectors, "").replaceAll("\\.\\.", "\\.");
+                                if (addSelectors.startsWith(".")) {
+                                    addSelectors = addSelectors.substring(1);
+                                }
+                                if (addSelectors.endsWith(".")) {
+                                    addSelectors = addSelectors.substring(0, addSelectors.length() - 1);
+                                }
+                                options.put(OPTION_ADD_SELECTORS, addSelectors);
+                            }
+                        }
+                    }
+                }
+            }
+
+            private String buildPath(Object pathObj, Map<String, Object> options) {
+                String path = coerceString(pathObj);
+                String prependPath = getAndRemoveOption(options, OPTION_PREPEND_PATH);
+                String appendPath = getAndRemoveOption(options, OPTION_APPEND_PATH);
+                if (StringUtils.isEmpty(path)) {
+                    path = getOption(options, OPTION_PATH);
+                }
+                if (StringUtils.isNotEmpty(prependPath)) {
+                    path = prependPath + "/" + path;
+                }
+                if (StringUtils.isNotEmpty(appendPath)) {
+                    path = path + "/" + appendPath;
+                }
+
+                return path;
+            }
+
+            private String createDispatcherOptions(Map<String, Object> options) {
+                if (options == null || options.isEmpty()) {
+                    return null;
+                }
+                StringBuilder buffer = new StringBuilder();
+                boolean hasPreceding = false;
+                for (Map.Entry<String, Object> option : options.entrySet()) {
+                    if (hasPreceding) {
+                        buffer.append(", ");
+                    }
+                    String key = option.getKey();
+                    buffer.append(key).append("=");
+                    String strVal = coerceString(option.getValue());
+                    if (strVal == null) {
+                        strVal = "";
+                    }
+                    buffer.append(strVal);
+                    hasPreceding = true;
+                }
+                return buffer.toString();
+            }
+
+            private String coerceString(Object obj) {
+                if (obj instanceof String) {
+                    return (String) obj;
+                }
+                return null;
+            }
+
+            private String getOption(Map<String, Object> options, String property) {
+                return (String) options.get(property);
+            }
+
+            private String getAndRemoveOption(Map<String, Object> options, String property) {
+                return (String) options.remove(property);
+            }
+
+            private String getSelectorsFromPath(String path) {
+                String filePath;
+                if (path.contains("/")) {
+                    filePath = path.substring(path.lastIndexOf('/') + 1, path.length());
+                } else {
+                    filePath = path;
+                }
+                String[] parts = filePath.split("\\.");
+                if (parts.length > 2) {
+                    StringBuilder sb = new StringBuilder();
+                    for (int i = 1; i < parts.length - 1; i++) {
+                        sb.append(parts[i]);
+                        if (i != parts.length - 2) {
+                            sb.append(".");
+                        }
+                    }
+                    if (sb.length() > 0) {
+                        return sb.toString();
+                    }
+                }
+                return null;
+            }
+
+            private void includeResource(PrintWriter out, String script, String dispatcherOptions, String resourceType) {
+                if (StringUtils.isEmpty(script)) {
+                    LOG.error("Script path cannot be empty");
+                } else {
+                    SlingHttpServletResponse customResponse = new PrintWriterResponseWrapper(out,
+                            (SlingHttpServletResponse) bindings.get(SlingBindings.RESPONSE));
+                    SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
+                    script = normalizePath(request, script);
+
+                    Resource includeRes = request.getResourceResolver().resolve(script);
+                    if (includeRes instanceof NonExistingResource || includeRes.isResourceType(Resource.RESOURCE_TYPE_NON_EXISTING)) {
+                        includeRes = new SyntheticResource(request.getResourceResolver(), script, resourceType);
+                    }
+                    try {
+                        RequestDispatcherOptions opts = new RequestDispatcherOptions(dispatcherOptions);
+                        if (StringUtils.isNotEmpty(resourceType)) {
+                            opts.setForceResourceType(resourceType);
+                        }
+                        RequestDispatcher dispatcher = request.getRequestDispatcher(includeRes, opts);
+                        dispatcher.include(request, customResponse);
+                    } catch (Exception e) {
+                        LOG.error("Failed to include resource {}", script, e);
+                    }
+                }
+            }
+
+            private String normalizePath(SlingHttpServletRequest request, String path) {
+                if (!path.startsWith("/")) {
+                    path = request.getResource().getPath() + "/" + path;
+                }
+                return ResourceUtil.normalize(path);
+            }
+
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/XSSRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/XSSRuntimeExtension.java
new file mode 100644
index 0000000..ee0f01d
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/XSSRuntimeExtension.java
@@ -0,0 +1,239 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.extension;
+
+import java.util.HashSet;
+import java.util.Set;
+import java.util.regex.Pattern;
+
+import javax.script.Bindings;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtensionException;
+import org.apache.sling.scripting.sightly.impl.compiler.CompilerException;
+import org.apache.sling.scripting.sightly.impl.filter.XSSFilter;
+import org.apache.sling.scripting.sightly.impl.html.MarkupUtils;
+import org.apache.sling.scripting.sightly.impl.plugin.MarkupContext;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.apache.sling.xss.XSSAPI;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Runtime support for XSS filtering
+ */
+@Component
+@Service(RuntimeExtension.class)
+@Properties(
+        @Property(name = RuntimeExtension.SCR_PROP_NAME, value = XSSFilter.FUNCTION_NAME)
+)
+public class XSSRuntimeExtension implements RuntimeExtension {
+
+    private static final Set<String> elementNameWhiteList = new HashSet<String>();
+    private static final Logger LOG = LoggerFactory.getLogger(XSSRuntimeExtension.class);
+    private static final Pattern VALID_ATTRIBUTE = Pattern.compile("^[a-zA-Z_:][\\-a-zA-Z0-9_:\\.]*$");
+
+    @Override
+    public ExtensionInstance provide(final RenderContext renderContext) {
+
+        final XSSAPI xssapi = obtainAPI(renderContext.getBindings());
+
+        return new ExtensionInstance() {
+            @Override
+            public Object call(Object... arguments) {
+                if (arguments.length < 2) {
+                    throw new RuntimeExtensionException(
+                            String.format("Extension %s requires at least %d arguments", XSSFilter.FUNCTION_NAME, 2));
+                }
+                Object original = arguments[0];
+                Object option = arguments[1];
+                Object hint = null;
+                if (arguments.length >= 3) {
+                    hint = arguments[2];
+                }
+                MarkupContext markupContext = null;
+                if (option != null && option instanceof String) {
+                    String name = (String) option;
+                    markupContext = MarkupContext.lookup(name);
+                }
+                if (markupContext == MarkupContext.UNSAFE) {
+                    return original;
+                }
+                if (markupContext == null) {
+                    LOG.warn("Expression context {} is invalid, expression will be replaced by the empty string", option);
+                    return "";
+                }
+                String text = renderContext.toString(original);
+                return applyXSSFilter(text, hint, markupContext);
+            }
+
+            private String applyXSSFilter(String text, Object hint, MarkupContext xssContext) {
+                if (xssContext.equals(MarkupContext.ATTRIBUTE) && hint instanceof String) {
+                    String attributeName = (String) hint;
+                    MarkupContext attrMarkupContext = getAttributeMarkupContext(attributeName);
+                    return applyXSSFilter(text, attrMarkupContext);
+                }
+                return applyXSSFilter(text, xssContext);
+            }
+
+            private String applyXSSFilter(String text, MarkupContext xssContext) {
+                switch (xssContext) {
+                    case ATTRIBUTE:
+                        return xssapi.encodeForHTMLAttr(text);
+                    case COMMENT:
+                    case TEXT:
+                        return xssapi.encodeForHTML(text);
+                    case ATTRIBUTE_NAME:
+                        return escapeAttributeName(text);
+                    case NUMBER:
+                        return xssapi.getValidLong(text, 0).toString();
+                    case URI:
+                        return xssapi.getValidHref(text);
+                    case SCRIPT_TOKEN:
+                    case SCRIPT_COMMENT:
+                        return xssapi.getValidJSToken(text, "");
+                    case STYLE_TOKEN:
+                        return xssapi.getValidStyleToken(text, "");
+                    case SCRIPT_STRING:
+                        return xssapi.encodeForJSString(text);
+                    case ELEMENT_NAME:
+                        return escapeElementName(text);
+                    case HTML:
+                        return xssapi.filterHTML(text);
+                }
+                return text; //todo: apply the rest of XSS filters
+            }
+        };
+    }
+
+    private String escapeElementName(String original) {
+        original = original.trim();
+        if (elementNameWhiteList.contains(original.toLowerCase())) {
+            return original;
+        }
+        return "";
+    }
+
+    private XSSAPI obtainAPI(Bindings bindings) {
+        SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get("request");
+        if (request == null) {
+            throw new CompilerException("Cannot obtain request from bindings");
+        }
+        return request.adaptTo(XSSAPI.class);
+    }
+
+    private MarkupContext getAttributeMarkupContext(String attributeName) {
+        if ("src".equalsIgnoreCase(attributeName) || "href".equalsIgnoreCase(attributeName)) {
+            return MarkupContext.URI;
+        }
+        return MarkupContext.ATTRIBUTE;
+    }
+
+    private String escapeAttributeName(String attributeName) {
+        if (attributeName == null) {
+            return null;
+        }
+        attributeName = attributeName.trim();
+        if (matchPattern(VALID_ATTRIBUTE, attributeName) && !MarkupUtils.isSensitiveAttribute(attributeName)) {
+            return attributeName;
+        }
+        return null;
+    }
+
+    private boolean matchPattern(Pattern pattern, String str) {
+        return pattern.matcher(str).matches();
+    }
+
+    static {
+        elementNameWhiteList.add("section");
+        elementNameWhiteList.add("nav");
+        elementNameWhiteList.add("article");
+        elementNameWhiteList.add("aside");
+        elementNameWhiteList.add("h1");
+        elementNameWhiteList.add("h2");
+        elementNameWhiteList.add("h3");
+        elementNameWhiteList.add("h4");
+        elementNameWhiteList.add("h5");
+        elementNameWhiteList.add("h6");
+        elementNameWhiteList.add("header");
+        elementNameWhiteList.add("footer");
+        elementNameWhiteList.add("address");
+        elementNameWhiteList.add("main");
+        elementNameWhiteList.add("p");
+        elementNameWhiteList.add("pre");
+        elementNameWhiteList.add("blockquote");
+        elementNameWhiteList.add("ol");
+        elementNameWhiteList.add("li");
+        elementNameWhiteList.add("dl");
+        elementNameWhiteList.add("dt");
+        elementNameWhiteList.add("dd");
+        elementNameWhiteList.add("figure");
+        elementNameWhiteList.add("figcaption");
+        elementNameWhiteList.add("div");
+        elementNameWhiteList.add("a");
+        elementNameWhiteList.add("em");
+        elementNameWhiteList.add("strong");
+        elementNameWhiteList.add("small");
+        elementNameWhiteList.add("s");
+        elementNameWhiteList.add("cite");
+        elementNameWhiteList.add("q");
+        elementNameWhiteList.add("dfn");
+        elementNameWhiteList.add("abbbr");
+        elementNameWhiteList.add("data");
+        elementNameWhiteList.add("time");
+        elementNameWhiteList.add("code");
+        elementNameWhiteList.add("var");
+        elementNameWhiteList.add("samp");
+        elementNameWhiteList.add("kbd");
+        elementNameWhiteList.add("sub");
+        elementNameWhiteList.add("sup");
+        elementNameWhiteList.add("i");
+        elementNameWhiteList.add("b");
+        elementNameWhiteList.add("u");
+        elementNameWhiteList.add("mark");
+        elementNameWhiteList.add("ruby");
+        elementNameWhiteList.add("rt");
+        elementNameWhiteList.add("rp");
+        elementNameWhiteList.add("bdi");
+        elementNameWhiteList.add("bdo");
+        elementNameWhiteList.add("span");
+        elementNameWhiteList.add("br");
+        elementNameWhiteList.add("wbr");
+        elementNameWhiteList.add("ins");
+        elementNameWhiteList.add("del");
+        elementNameWhiteList.add("table");
+        elementNameWhiteList.add("caption");
+        elementNameWhiteList.add("colgroup");
+        elementNameWhiteList.add("col");
+        elementNameWhiteList.add("tbody");
+        elementNameWhiteList.add("thead");
+        elementNameWhiteList.add("tfoot");
+        elementNameWhiteList.add("tr");
+        elementNameWhiteList.add("td");
+        elementNameWhiteList.add("th");
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ClassUseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ClassUseProvider.java
new file mode 100644
index 0000000..6a97c4b
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ClassUseProvider.java
@@ -0,0 +1,120 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.extension.use;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.script.Bindings;
+import javax.servlet.ServletRequest;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.commons.classloader.DynamicClassLoaderManager;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.apache.sling.scripting.sightly.use.ProviderOutcome;
+import org.apache.sling.scripting.sightly.use.UseProvider;
+import org.osgi.framework.Constants;
+
+/**
+ * Interprets the identifier as a class name and tries to load that class
+ * using a dynamic class loader
+ */
+@Component(
+        metatype = true,
+        label = "Apache Sling Scripting Sightly Class Use Provider",
+        description = "The Class Use Provider is responsible for instantiating Use-API objects that are adaptable from Resource or " +
+                "SlingHttpServletRequest."
+)
+@Service(UseProvider.class)
+@Properties({
+        @Property(
+                name = Constants.SERVICE_RANKING,
+                label = "Service Ranking",
+                description = "The Service Ranking value acts as the priority with which this Use Provider is queried to return an " +
+                        "Use-object. A higher value represents a higher priority.",
+                intValue = 80,
+                propertyPrivate = false
+        )
+})
+public class ClassUseProvider implements UseProvider {
+
+    @Override
+    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
+        Bindings globalBindings = renderContext.getBindings();
+        Bindings bindings = UseProviderUtils.merge(globalBindings, arguments);
+        SlingScriptHelper sling = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+        Resource resource = (Resource) bindings.get(SlingBindings.RESOURCE);
+        final SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
+        Map<String, Object> overrides = setRequestAttributes(request, arguments);
+        
+        DynamicClassLoaderManager classLoaderManager = sling.getService(DynamicClassLoaderManager.class);
+        Object obj;
+        try {
+            Class<?> cls = classLoaderManager.getDynamicClassLoader().loadClass(identifier);
+            obj = resource.adaptTo(cls);
+            if (obj == null) {
+                obj = request.adaptTo(cls);
+            }
+        } catch (ClassNotFoundException e) {
+            obj = null;
+        } finally {
+            resetRequestAttribute(request, overrides);
+        }
+        return ProviderOutcome.notNullOrFailure(obj);
+    }
+
+    private Map<String, Object> setRequestAttributes(ServletRequest request, Bindings arguments) {
+        Map<String, Object> overrides = new HashMap<String, Object>();
+        for (Map.Entry<String, Object> entry : arguments.entrySet()) {
+            String key = entry.getKey();
+            Object value = entry.getValue();
+            Object oldValue = request.getAttribute(key);
+            if (oldValue != null) {
+                overrides.put(key, oldValue);
+            } else {
+                overrides.put(key, NULL);
+            }
+            request.setAttribute(key, value);
+        }
+        return overrides;
+    }
+
+    private void resetRequestAttribute(ServletRequest request, Map<String, Object> overrides) {
+        for (Map.Entry<String, Object> entry : overrides.entrySet()) {
+            String key = entry.getKey();
+            Object value = entry.getValue();
+            if (value == NULL) {
+                request.removeAttribute(key);
+            } else {
+                request.setAttribute(key, value);
+            }
+        }
+    }
+
+    private static final Object NULL = new Object();
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/PojoUseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/PojoUseProvider.java
new file mode 100644
index 0000000..8558e2c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/PojoUseProvider.java
@@ -0,0 +1,94 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.extension.use;
+
+import javax.script.Bindings;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.scripting.sightly.ResourceResolution;
+import org.apache.sling.scripting.sightly.impl.compiler.SightlyJavaCompilerService;
+import org.apache.sling.scripting.sightly.pojo.Use;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.apache.sling.scripting.sightly.use.ProviderOutcome;
+import org.apache.sling.scripting.sightly.use.UseProvider;
+import org.osgi.framework.Constants;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Provider which instantiates POJOs.
+ */
+@Component(
+        metatype = true,
+        label = "Apache Sling Scripting Sightly POJO Use Provider",
+        description = "The POJO Use Provider is responsible for instantiating Use-API objects that optionally can implement the org" +
+                ".apache.sling.scripting.sightly.use.Use interface."
+)
+@Service(UseProvider.class)
+@Properties({
+        @Property(
+                name = Constants.SERVICE_RANKING,
+                label = "Service Ranking",
+                description = "The Service Ranking value acts as the priority with which this Use Provider is queried to return an " +
+                        "Use-object. A higher value represents a higher priority.",
+                intValue = 90,
+                propertyPrivate = false
+        )
+})
+public class PojoUseProvider implements UseProvider {
+
+    private final Logger LOG = LoggerFactory.getLogger(PojoUseProvider.class);
+
+    @Reference
+    private SightlyJavaCompilerService sightlyJavaCompilerService = null;
+
+    @Override
+    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
+        Bindings globalBindings = renderContext.getBindings();
+        Bindings bindings = UseProviderUtils.merge(globalBindings, arguments);
+        SlingScriptHelper sling = UseProviderUtils.getHelper(bindings);
+        ResourceResolverFactory rrf = sling.getService(ResourceResolverFactory.class);
+        ResourceResolver adminResolver = null;
+        try {
+            adminResolver = rrf.getAdministrativeResourceResolver(null);
+            Resource resource = ResourceResolution.resolveComponentForRequest(adminResolver, sling.getRequest());
+            Object result = sightlyJavaCompilerService.getInstance(resource, identifier);
+            if (result instanceof Use) {
+                ((Use) result).init(bindings);
+            }
+            return ProviderOutcome.notNullOrFailure(result);
+        } catch (Exception e) {
+            LOG.error(String.format("Can't instantiate %s POJO.", identifier), e);
+            return ProviderOutcome.failure();
+        } finally {
+            if (adminResolver != null) {
+                adminResolver.close();
+            }
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/RenderUnitProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/RenderUnitProvider.java
new file mode 100644
index 0000000..78f2334
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/RenderUnitProvider.java
@@ -0,0 +1,105 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.extension.use;
+
+import javax.script.Bindings;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.SlingHttpServletRequest;
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.scripting.sightly.ResourceResolution;
+import org.apache.sling.scripting.sightly.impl.engine.SightlyScriptEngineFactory;
+import org.apache.sling.scripting.sightly.impl.engine.UnitLoader;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderUnit;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.apache.sling.scripting.sightly.use.ProviderOutcome;
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+import org.apache.sling.scripting.sightly.use.UseProvider;
+import org.osgi.framework.Constants;
+
+/**
+ * Interprets identifiers as paths to other Sightly templates
+ */
+@Component(
+        metatype = true,
+        label = "Apache Sling Scripting Sightly Render Unit Use Provider",
+        description = "The Render Unit Use Provider is responsible for instantiating Sightly templates through the Use-API."
+)
+@Service(UseProvider.class)
+@Properties({
+        @Property(
+                name = Constants.SERVICE_RANKING,
+                label = "Service Ranking",
+                description = "The Service Ranking value acts as the priority with which this Use Provider is queried to return an " +
+                        "Use-object. A higher value represents a higher priority.",
+                intValue = 100,
+                propertyPrivate = false
+        )
+})
+public class RenderUnitProvider implements UseProvider {
+
+    @Reference
+    private UnitLoader unitLoader = null;
+
+    @Reference
+    private ResourceResolverFactory rrf = null;
+
+    @Override
+    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
+        if (identifier.endsWith("." + SightlyScriptEngineFactory.EXTENSION)) {
+            Bindings globalBindings = renderContext.getBindings();
+            Resource renderUnitResource = locateResource(globalBindings, identifier);
+            RenderUnit renderUnit = unitLoader.createUnit(renderUnitResource, globalBindings, (RenderContextImpl) renderContext);
+            return ProviderOutcome.notNullOrFailure(renderUnit);
+        }
+        return ProviderOutcome.failure();
+    }
+
+    private Resource locateResource(Bindings bindings, String script) {
+        ResourceResolver adminResolver = null;
+        try {
+            adminResolver = rrf.getAdministrativeResourceResolver(null);
+            SlingHttpServletRequest request = (SlingHttpServletRequest) bindings.get(SlingBindings.REQUEST);
+            SlingScriptHelper ssh = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+            Resource resource = ResourceResolution.resolveComponentForRequest(adminResolver, request);
+            if (resource != null) {
+                return ResourceResolution.resolveComponentRelative(adminResolver, resource, script);
+            } else {
+                return ResourceResolution.resolveComponentRelative(adminResolver, ssh.getScript().getScriptResource(), script);
+            }
+        } catch (LoginException e) {
+            throw new SightlyUseException(e);
+        } finally {
+            if (adminResolver != null) {
+                adminResolver.close();
+            }
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ScriptUseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ScriptUseProvider.java
new file mode 100644
index 0000000..d4e64d5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/ScriptUseProvider.java
@@ -0,0 +1,128 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.extension.use;
+
+import javax.script.Bindings;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScript;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.scripting.sightly.impl.engine.SightlyScriptEngineFactory;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.apache.sling.scripting.sightly.use.ProviderOutcome;
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+import org.apache.sling.scripting.sightly.use.UseProvider;
+import org.osgi.framework.Constants;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Use provider that interprets the identifier as a script path, and runs the respective script using a script engine that matches the
+ * script extension.
+ *
+ * This provider returns a non-failure outcome only if the evaluated script actually returns something. For more details check the
+ * implementation of the {@link SlingScript#eval(SlingBindings)} method for the available script engines from your platform.
+ */
+@Component(
+        metatype = true,
+        label = "Apache Sling Scripting Sightly Script Use Provider",
+        description = "The Script Use Provider is responsible for instantiating objects from scripts evaluated by other Sling Scripting " +
+                "Engines."
+)
+@Service(UseProvider.class)
+@Properties({
+        @Property(
+                name = Constants.SERVICE_RANKING,
+                label = "Service Ranking",
+                description = "The Service Ranking value acts as the priority with which this Use Provider is queried to return an " +
+                        "Use-object. A higher value represents a higher priority.",
+                intValue = 0,
+                propertyPrivate = false
+        )
+})
+public class ScriptUseProvider implements UseProvider {
+
+    private static final Logger log = LoggerFactory.getLogger(ScriptUseProvider.class);
+
+    @Reference
+    private ResourceResolverFactory rrf = null;
+
+    @Override
+    public ProviderOutcome provide(String scriptName, RenderContext renderContext, Bindings arguments) {
+        Bindings globalBindings = renderContext.getBindings();
+        Bindings bindings = UseProviderUtils.merge(globalBindings, arguments);
+        String extension = scriptExtension(scriptName);
+        if (extension == null || extension.equals(SightlyScriptEngineFactory.EXTENSION)) {
+            return ProviderOutcome.failure();
+        }
+        SlingScriptHelper sling = (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+        ResourceResolver adminResolver = null;
+        try {
+            adminResolver = rrf.getAdministrativeResourceResolver(null);
+            if (adminResolver == null) {
+                log.warn("Cannot obtain administrative resource resolver for " + scriptName);
+                return ProviderOutcome.failure();
+            }
+            Resource scriptResource = UseProviderUtils.locateScriptResource(adminResolver, sling, scriptName);
+            if (scriptResource == null) {
+                log.debug("Path does not match an existing resource: {}", scriptName);
+                return ProviderOutcome.failure();
+            }
+            return evalScript(scriptResource, bindings);
+        } catch (LoginException e) {
+            throw new SightlyUseException(e);
+        } finally {
+            if (adminResolver != null) {
+                adminResolver.close();
+            }
+        }
+
+    }
+
+    private ProviderOutcome evalScript(Resource scriptResource, Bindings bindings) {
+        SlingScript slingScript = scriptResource.adaptTo(SlingScript.class);
+        if (slingScript == null) {
+            return ProviderOutcome.failure();
+        }
+        SlingBindings slingBindings = new SlingBindings();
+        slingBindings.putAll(bindings);
+        Object scriptEval = slingScript.eval(slingBindings);
+        return ProviderOutcome.notNullOrFailure(scriptEval);
+    }
+
+    private String scriptExtension(String path) {
+        String extension = StringUtils.substringAfterLast(path, ".");
+        if (StringUtils.isEmpty(extension)) {
+            extension = null;
+        }
+        return extension;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseProviderUtils.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseProviderUtils.java
new file mode 100644
index 0000000..e4ac915
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseProviderUtils.java
@@ -0,0 +1,94 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.extension.use;
+
+import javax.script.Bindings;
+import javax.script.SimpleBindings;
+
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.scripting.sightly.ResourceResolution;
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+import org.apache.sling.scripting.sightly.use.UseProvider;
+
+/**
+ * Helper class for {@link UseProvider} implementations.
+ */
+public class UseProviderUtils {
+
+    /**
+     * Combine two bindings objects. Priority goes to latter bindings.
+     *
+     * @param former first map of bindings
+     * @param latter second map of bindings, which can override the fist one
+     * @return the merging of the two maps
+     */
+    public static Bindings merge(Bindings former, Bindings latter) {
+        Bindings bindings = new SimpleBindings();
+        bindings.putAll(former);
+        bindings.putAll(latter);
+        return bindings;
+    }
+
+    /**
+     * Retrieves the {@link SlingScriptHelper} from a {@link Bindings} map.
+     *
+     * @param bindings the bindings map
+     * @return the {@link SlingScriptHelper} if found, {@code null} otherwise
+     */
+    public static SlingScriptHelper getHelper(Bindings bindings) {
+        return (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+    }
+
+    /**
+     * Locates a script resource identified by the {@code script} path. This path can be absolute or relative. If the path is relative
+     * then it will be used to locate a script for the current request, provided by the {@link SlingScriptHelper} parameter.
+     *
+     * @param resourceResolver a resource resolver used for searching the script
+     * @param sling            the {@link SlingScriptHelper}
+     * @param script           the path to the script
+     * @return the script resource if found, {@code null} otherwise
+     */
+    public static Resource locateScriptResource(ResourceResolver resourceResolver, SlingScriptHelper sling, String script) {
+        Resource result = null;
+        if (script.startsWith("/")) {
+            result = resourceResolver.getResource(script);
+        }
+        if (result == null) {
+            Resource componentResource = ResourceResolution.resolveComponentForRequest(resourceResolver, sling.getRequest());
+            result = ResourceResolution.resolveComponentRelative(resourceResolver, componentResource, script);
+        }
+        if (result != null) {
+            checkSearchPath(result, resourceResolver);
+        }
+        return result;
+    }
+
+    private static void checkSearchPath(Resource resource, ResourceResolver resourceResolver) {
+        String resourcePath = resource.getPath();
+        for (String path : resourceResolver.getSearchPath()) {
+            if (resourcePath.startsWith(path)) {
+                return;
+            }
+        }
+        throw new SightlyUseException("Use plugin cannot access path: " + resource.getPath());
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseRuntimeExtension.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseRuntimeExtension.java
new file mode 100644
index 0000000..3550aa9
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/extension/use/UseRuntimeExtension.java
@@ -0,0 +1,109 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.extension.use;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.ListIterator;
+import java.util.Map;
+import java.util.concurrent.ConcurrentSkipListMap;
+
+import javax.script.Bindings;
+import javax.script.SimpleBindings;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.ReferenceCardinality;
+import org.apache.felix.scr.annotations.ReferencePolicy;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtensionException;
+import org.apache.sling.scripting.sightly.impl.plugin.UsePlugin;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.apache.sling.scripting.sightly.use.ProviderOutcome;
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+import org.apache.sling.scripting.sightly.use.UseProvider;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.ServiceReference;
+
+/**
+ * Runtime extension for the USE plugin
+ */
+@Component
+@Service(RuntimeExtension.class)
+@Properties(
+        @Property(name = RuntimeExtension.SCR_PROP_NAME, value = UsePlugin.FUNCTION_NAME)
+)
+@Reference(
+        policy = ReferencePolicy.DYNAMIC,
+        referenceInterface = UseProvider.class,
+        name = "useProvider",
+        cardinality = ReferenceCardinality.OPTIONAL_MULTIPLE
+)
+public class UseRuntimeExtension implements RuntimeExtension {
+
+    private final Map<ServiceReference, UseProvider> providersMap = new ConcurrentSkipListMap<ServiceReference, UseProvider>();
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public ExtensionInstance provide(final RenderContext renderContext) {
+        return new ExtensionInstance() {
+
+            @Override
+            public Object call(Object... arguments) {
+                if (arguments.length != 2) {
+                    throw new RuntimeExtensionException("Use extension requires two arguments");
+                }
+                String identifier = renderContext.toString(arguments[0]);
+                if (StringUtils.isEmpty(identifier)) {
+                    return null;
+                }
+                Map<String, Object> useArgumentsMap = renderContext.toMap(arguments[1]);
+                Bindings useArguments = new SimpleBindings(Collections.unmodifiableMap(useArgumentsMap));
+                ArrayList<UseProvider> providers = new ArrayList<UseProvider>(providersMap.values());
+                ListIterator<UseProvider> iterator = providers.listIterator(providers.size());
+                while (iterator.hasPrevious()) {
+                    UseProvider provider = iterator.previous();
+                    ProviderOutcome outcome = provider.provide(identifier, renderContext, useArguments);
+                    if (outcome.isSuccess()) {
+                        return outcome.getResult();
+                    }
+                }
+                throw new SightlyUseException("No use provider could resolve identifier: " + identifier);
+            }
+        };
+    }
+
+    // OSGi ################################################################################################################################
+
+    @SuppressWarnings("UnusedDeclaration")
+    private void bindUseProvider(ServiceReference serviceReference) {
+        BundleContext bundleContext = serviceReference.getBundle().getBundleContext();
+        providersMap.put(serviceReference, (UseProvider) bundleContext.getService(serviceReference));
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    private void unbindUseProvider(ServiceReference serviceReference) {
+        providersMap.remove(serviceReference);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderContextImpl.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderContextImpl.java
new file mode 100644
index 0000000..b7540d1
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderContextImpl.java
@@ -0,0 +1,418 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.runtime;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.script.Bindings;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.sling.api.adapter.Adaptable;
+import org.apache.sling.api.resource.ValueMap;
+import org.apache.sling.scripting.sightly.Record;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Rendering context for Sightly rendering units.
+ * @see RenderUnit
+ */
+public class RenderContextImpl implements RenderContext {
+
+    public static final String TO_STRING_METHOD = "toString";
+    public static final String PROPERTY_ACCESS = "resolveProperty";
+    public static final String COLLECTION_COERCE = "toCollection";
+    public static final String NUMERIC_COERCE = "toNumber";
+    public static final String STRING_COERCE = "toString";
+    public static final String BOOLEAN_COERCE = "toBoolean";
+
+
+    private final Bindings bindings;
+    private final Map<String, RuntimeExtension> mapping;
+    private final Map<String, ExtensionInstance> instanceCache = new HashMap<String, ExtensionInstance>();
+
+    public RenderContextImpl(Bindings bindings, Map<String, RuntimeExtension> mapping) {
+        this.bindings = bindings;
+        this.mapping = mapping;
+    }
+
+    /**
+     * Provide the bindings for this script
+     * @return - the list of global bindings available to the script
+     */
+    @Override
+    public Bindings getBindings() {
+        return bindings;
+    }
+
+    @Override
+    public Object call(String functionName, Object... arguments) {
+        ExtensionInstance instance;
+        instance = instanceCache.get(functionName);
+        if (instance == null) {
+            instance = createInstance(functionName);
+            instanceCache.put(functionName, instance);
+        }
+        return instance.call(arguments);
+    }
+
+    private ExtensionInstance createInstance(String name) {
+        RuntimeExtension extension = mapping.get(name);
+        if (extension == null) {
+            throw new SightlyRenderException("Runtime extension is not available: " + name);
+        }
+        return extension.provide(this);
+    }
+
+    @Override
+    public Object resolveProperty(Object target, Object property) {
+        if (property instanceof Number) {
+            return getIndex(target, ((Number) property).intValue());
+        }
+        return getProperty(target, property);
+    }
+
+    @Override
+    public String toString(Object target) {
+        return objectToString(target);
+    }
+
+    @Override
+    public boolean toBoolean(Object object) {
+        return toBooleanInternal(object);
+    }
+
+    @Override
+    public Collection<Object> toCollection(Object object) {
+        return obtainCollection(object);
+    }
+
+    @Override
+    public Map toMap(Object object) {
+        if (object instanceof Map) {
+            return (Map) object;
+        }
+        return Collections.emptyMap();
+    }
+
+
+    @Override
+    public Number toNumber(Object object) {
+        if (object instanceof Number) {
+            return (Number) object;
+        }
+        return 0;
+    }
+
+    @Override
+    public boolean isCollection(Object obj) {
+        return (obj instanceof Collection) || (obj instanceof Object[])
+                || (obj instanceof Iterable)
+                || (obj instanceof Iterator);
+    }
+
+    @SuppressWarnings("unchecked")
+    private Collection<Object> obtainCollection(Object obj) {
+        if (obj == null) {
+            return Collections.emptyList();
+        }
+        if (obj instanceof Object[]) {
+            return Arrays.asList((Object[]) obj);
+        }
+        if (obj instanceof Collection) {
+            return (Collection<Object>) obj;
+        }
+        if (obj instanceof Map) {
+            return ((Map) obj).keySet();
+        }
+        if (obj instanceof Record) {
+            return ((Record) obj).properties();
+        }
+        if (obj instanceof Enumeration) {
+            return Collections.list((Enumeration<Object>) obj);
+        }
+        if (obj instanceof Iterator) {
+            return fromIterator((Iterator<Object>) obj);
+        }
+        return Collections.emptyList();
+    }
+
+    private Collection<Object> fromIterator(Iterator<Object> iterator) {
+        ArrayList<Object> result = new ArrayList<Object>();
+        while (iterator.hasNext()) {
+            result.add(iterator.next());
+        }
+        return result;
+    }
+
+    private boolean toBooleanInternal(Object obj) {
+        if (obj == null) {
+            return false;
+        }
+
+        if (obj instanceof Number) {
+            Number number = (Number) obj;
+            //todo should we consider precision issues?
+            return !(number.doubleValue() == 0.0);
+        }
+
+        String s = obj.toString().trim();
+        if ("".equals(s)) {
+            return false;
+        } else if ("true".equalsIgnoreCase(s) || "false".equalsIgnoreCase(s)) {
+            return Boolean.parseBoolean(s);
+        }
+
+        if (obj instanceof Collection) {
+            return ((Collection) obj).size() > 0;
+        }
+
+        if (obj instanceof Map) {
+            return ((Map) obj).size() > 0;
+        }
+
+        if (obj instanceof Iterable<?>) {
+            return ((Iterable<?>) obj).iterator().hasNext();
+        }
+
+        if (obj instanceof Iterator<?>) {
+            return ((Iterator<?>) obj).hasNext();
+        }
+
+        if (obj instanceof Object[]) {
+            return ((Object[]) obj).length > 0;
+        }
+
+        return true;
+    }
+
+    private Object getProperty(Object target, Object propertyObj) {
+        String property = toString(propertyObj);
+        if (StringUtils.isEmpty(property)) {
+            throw new IllegalArgumentException("Invalid property name");
+        }
+        if (target == null) {
+            return null;
+        }
+        Object result = null;
+        if (target instanceof Map) {
+            result = getMapProperty((Map) target, property);
+        }
+        if (result == null && target instanceof Record) {
+            result = ((Record) target).get(property);
+        }
+        if (result == null) {
+            result = getObjectProperty(target, property);
+        }
+        if (result == null && target instanceof Adaptable) {
+            result = getValueMapProperty(((Adaptable) target).adaptTo(ValueMap.class), property);
+        }
+        return result;
+    }
+
+    private Object getIndex(Object obj, int index) {
+        if (obj instanceof Map) {
+            Map map = (Map) obj;
+            if (map.containsKey(index)) {
+                return map.get(index);
+            }
+        }
+        Collection collection = toCollection(obj);
+        if (collection instanceof List) {
+            return getIndexSafe((List) collection, index);
+        }
+        return null;
+    }
+
+    private Object getIndexSafe(List list, int index) {
+        if (index < 0 || index >= list.size()) {
+            return null;
+        }
+        return list.get(index);
+    }
+
+    private Object getValueMapProperty(ValueMap valueMap, String property) {
+        if (valueMap == null) {
+            return null;
+        }
+        return valueMap.get(property);
+    }
+
+    private Object getMapProperty(Map map, String property) {
+        return map.get(property);
+    }
+
+    private Object getObjectProperty(Object obj, String property) {
+        Object result = getObjectNoArgMethod(obj, property);
+        if (result != null) return result;
+        return getField(obj, property);
+    }
+
+    private Object getField(Object obj, String property) {
+        if (obj instanceof Object[] && "length".equals(property)) {
+            // Working around this limitation: http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getFields%28%29
+            return ((Object[]) obj).length;
+        }
+        Class<?> cls = obj.getClass();
+        try {
+            Field field = cls.getDeclaredField(property);
+            return field.get(obj);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    private Object getObjectNoArgMethod(Object obj, String property) {
+        Class<?> cls = obj.getClass();
+        Method method = findMethod(cls, property);
+        if (method != null) {
+            try {
+                method = extractMethodInheritanceChain(cls, method);
+                return method.invoke(obj);
+            } catch (Exception e) {
+                throw new SightlyRenderException(e);
+            }
+        }
+        return null;
+    }
+
+    private Method findMethod(Class<?> cls, String baseName) {
+        Method method;
+        String capitalized = StringUtils.capitalize(baseName);
+        method = tryMethod(cls, "get" + capitalized);
+        if (method != null) return method;
+        method = tryMethod(cls, "is" + capitalized);
+        if (method != null) return method;
+        method = tryMethod(cls, baseName);
+        return method;
+    }
+
+
+    private Method tryMethod(Class<?> cls, String name) {
+        try {
+            Method m = cls.getMethod(name);
+            Class<?> declaringClass = m.getDeclaringClass();
+            return (isMethodAllowed(m)) ? m : null;
+        } catch (NoSuchMethodException e) {
+            return null;
+        }
+    }
+
+    private boolean isMethodAllowed(Method method) {
+        Class<?> declaringClass = method.getDeclaringClass();
+        //methods of the Object.class are forbidden (except toString, which is allowed)
+        return declaringClass != Object.class || TO_STRING_METHOD.equals(method.getName());
+    }
+
+
+    private String objectToString(Object obj) {
+        String output = "";
+        if (obj != null) {
+            if (obj instanceof String) {
+                output = (String) obj;
+            } else if (isPrimitive(obj)) {
+                output = obj.toString();
+            } else {
+                Collection<?> col = obtainCollection(obj);
+                if (col != null) {
+                    output = collectionToString(col);
+                }
+            }
+        }
+        return output;
+    }
+
+    private static final Set<Class<?>> primitiveClasses = primitiveClasses();
+
+    private boolean isPrimitive(Object obj) {
+        return primitiveClasses.contains(obj.getClass());
+    }
+
+    private String collectionToString(Collection<?> col) {
+        StringBuilder builder = new StringBuilder();
+        String prefix = "";
+        for (Object o : col) {
+            builder.append(prefix).append(objectToString(o));
+            prefix = ",";
+        }
+        return builder.toString();
+    }
+
+    private static Set<Class<?>> primitiveClasses() {
+        Set<Class<?>> set = new HashSet<Class<?>>();
+        set.add(Boolean.class);
+        set.add(Character.class);
+        set.add(Byte.class);
+        set.add(Short.class);
+        set.add(Integer.class);
+        set.add(Long.class);
+        set.add(Float.class);
+        set.add(Double.class);
+        set.add(Void.class);
+        return set;
+    }
+
+    private static Method extractMethodInheritanceChain(Class type, Method m) {
+        if (m == null || Modifier.isPublic(type.getModifiers())) {
+            return m;
+        }
+        Class[] inf = type.getInterfaces();
+        Method mp;
+        for (Class<?> iface : inf) {
+            try {
+                mp = iface.getMethod(m.getName(), m.getParameterTypes());
+                mp = extractMethodInheritanceChain(mp.getDeclaringClass(), mp);
+                if (mp != null) {
+                    return mp;
+                }
+            } catch (NoSuchMethodException e) {
+                // do nothing
+            }
+        }
+        Class<?> sup = type.getSuperclass();
+        if (sup != null) {
+            try {
+                mp = sup.getMethod(m.getName(), m.getParameterTypes());
+                mp = extractMethodInheritanceChain(mp.getDeclaringClass(), mp);
+                if (mp != null) {
+                    return mp;
+                }
+            } catch (NoSuchMethodException e) {
+                // do nothing
+            }
+        }
+        return null;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderUnit.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderUnit.java
new file mode 100644
index 0000000..a961717
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/RenderUnit.java
@@ -0,0 +1,146 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.engine.runtime;
+
+import java.io.PrintWriter;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import javax.script.Bindings;
+import javax.script.SimpleBindings;
+
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.scripting.sightly.Record;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Basic unit of rendering. This also extends the record interface. The properties for a unit are the sub-units.
+ */
+public abstract class RenderUnit implements Record<RenderUnit> {
+
+    private final Map<String, RenderUnit> subTemplates = new HashMap<String, RenderUnit>();
+
+    private Map<String, RenderUnit> siblings;
+
+    /**
+     * Render the main script template
+     * @param renderContext - the rendering context
+     * @param arguments - the arguments for this unit
+     */
+    public final void render(RenderContext renderContext, Bindings arguments) {
+        Bindings globalBindings = renderContext.getBindings();
+        PrintWriter writer = (PrintWriter) globalBindings.get(SlingBindings.OUT);
+        render(writer, buildGlobalScope(globalBindings), new CaseInsensitiveBindings(arguments), (RenderContextImpl) renderContext);
+    }
+
+    @Override
+    public RenderUnit get(String name) {
+        return subTemplates.get(name.toLowerCase());
+    }
+
+    @Override
+    public Set<String> properties() {
+        return subTemplates.keySet();
+    }
+
+    protected abstract void render(PrintWriter writer,
+                                   Bindings bindings,
+                                   Bindings arguments,
+                                   RenderContextImpl renderContext);
+
+    @SuppressWarnings({"unused", "unchecked"})
+    protected void callUnit(RenderContext renderContext, Object templateObj, Object argsObj) {
+        if (!(templateObj instanceof RenderUnit)) {
+            return;
+        }
+        RenderUnit unit = (RenderUnit) templateObj;
+        SlingScriptHelper ssh = (SlingScriptHelper) renderContext.getBindings().get(SlingBindings.SLING);
+        Map<String, Object> argumentsMap = renderContext.toMap(argsObj);
+        Bindings arguments = new SimpleBindings(Collections.unmodifiableMap(argumentsMap));
+        unit.render(renderContext, arguments);
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected FluentMap obj() {
+        return new FluentMap();
+    }
+
+    protected final void addSubTemplate(String name, RenderUnit renderUnit) {
+        renderUnit.setSiblings(subTemplates);
+        subTemplates.put(name.toLowerCase(), renderUnit);
+    }
+
+    private void setSiblings(Map<String, RenderUnit> siblings) {
+        this.siblings = siblings;
+    }
+
+    private Bindings buildGlobalScope(Bindings bindings) {
+        SimpleBindings simpleBindings = new SimpleBindings(bindings);
+        simpleBindings.putAll(bindings);
+        if (siblings != null) {
+            simpleBindings.putAll(siblings);
+        }
+        simpleBindings.putAll(subTemplates);
+        return new CaseInsensitiveBindings(simpleBindings);
+    }
+
+    protected static class FluentMap extends HashMap<String, Object> {
+
+        /**
+         * Fluent variant of put
+         * @param name - the name of the property
+         * @param value - the value of the property
+         * @return - this instance
+         */
+        public FluentMap with(String name, Object value) {
+            put(name, value);
+            return this;
+        }
+
+    }
+
+    private static final class CaseInsensitiveBindings extends SimpleBindings {
+
+        private CaseInsensitiveBindings(Map<String, Object> m) {
+            for (Map.Entry<String, Object> entry : m.entrySet()) {
+                put(entry.getKey().toLowerCase(), entry.getValue());
+            }
+        }
+
+        @Override
+        public Object get(Object key) {
+            if (!(key instanceof String)) {
+                throw new ClassCastException("key should be a String");
+            }
+            return super.get(((String) key).toLowerCase());
+        }
+
+        @Override
+        public boolean containsKey(Object key) {
+            if (!(key instanceof String)) {
+                throw new ClassCastException("key should be a String");
+            }
+            return super.containsKey(((String) key).toLowerCase());
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/SightlyRenderException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/SightlyRenderException.java
new file mode 100644
index 0000000..7a4cfb7
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/engine/runtime/SightlyRenderException.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.engine.runtime;
+
+import org.apache.sling.scripting.sightly.SightlyException;
+
+/**
+ * Exceptions generated by Sightly during runtime
+ */
+public class SightlyRenderException extends SightlyException {
+
+    public SightlyRenderException() {
+    }
+
+    public SightlyRenderException(String message) {
+        super(message);
+    }
+
+    public SightlyRenderException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public SightlyRenderException(Throwable cause) {
+        super(cause);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/Filter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/Filter.java
new file mode 100644
index 0000000..1c32e2d
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/Filter.java
@@ -0,0 +1,45 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.filter;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+
+/**
+ * A filter is a transformation which performs modifications on expressions. Unlike plugins, filters
+ * are always applied on an expression. Whether the filter transformation is actually necessary is
+ * decided by the filter. The application order of filters is given by filter priority.
+ */
+public interface Filter extends Comparable<Filter> {
+
+    /**
+     * Transform the given expression
+     * @param expression the original expression
+     * @return a transformed expression. If the filter is not applicable
+     * to the given expression, then the original expression shall be returned
+     */
+    Expression apply(Expression expression);
+
+    /**
+     * The priority with which filters are applied. This establishes order between filters. Filters with
+     * lower priority are applied first.
+     * @return an integer representing the filter's priority
+     */
+    int priority();
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FilterComponent.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FilterComponent.java
new file mode 100644
index 0000000..5c04180
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FilterComponent.java
@@ -0,0 +1,58 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.filter;
+
+import java.util.Dictionary;
+
+import org.apache.felix.scr.annotations.Activate;
+import org.apache.sling.commons.osgi.PropertiesUtil;
+import org.osgi.service.component.ComponentContext;
+
+/**
+ * Filters implemented as components.
+ */
+public abstract class FilterComponent implements Filter {
+
+    public static final String PRIORITY = "org.apache.sling.scripting.sightly.impl.filter.priority";
+    public static final int DEFAULT_PRIORITY = 100;
+
+    private int priority = DEFAULT_PRIORITY;
+
+    @Override
+    public int priority() {
+        return priority;
+    }
+
+    @Override
+    public int compareTo(Filter o) {
+        if (this.priority < o.priority()) {
+            return -1;
+        } else if (this.priority == o.priority()) {
+            return  0;
+        }
+        return 1;
+    }
+
+    @Activate
+    protected void activate(ComponentContext componentContext) {
+        Dictionary properties = componentContext.getProperties();
+        priority = PropertiesUtil.toInteger(properties.get(PRIORITY), DEFAULT_PRIORITY);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FormatFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FormatFilter.java
new file mode 100644
index 0000000..4803dd0
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/FormatFilter.java
@@ -0,0 +1,117 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.filter;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtensionException;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Implementation for the format filter & runtime support.
+ */
+@Component
+@Service({Filter.class, RuntimeExtension.class})
+@Properties({
+        @Property(name = RuntimeExtension.SCR_PROP_NAME, value = FormatFilter.FORMAT_FUNCTION)
+})
+public class FormatFilter extends FilterComponent implements RuntimeExtension {
+
+    public static final String FORMAT_OPTION = "format";
+    public static final String FORMAT_FUNCTION = "format";
+
+    private static final Pattern PLACEHOLDER_REGEX = Pattern.compile("\\{\\d}");
+
+    @Override
+    public Expression apply(Expression expression) {
+        //todo: if the expression is a string constant, we can produce the transformation at
+        //compile time, with no need of a runtime function
+        if (!expression.containsOption(FORMAT_OPTION)) {
+            return expression;
+        }
+        ExpressionNode argNode = expression.getOption(FORMAT_OPTION);
+        ExpressionNode formattedNode = new RuntimeCall(FORMAT_FUNCTION, expression.getRoot(), argNode);
+        return expression.withNode(formattedNode).removeOptions(FORMAT_OPTION);
+    }
+
+    @Override
+    public ExtensionInstance provide(final RenderContext renderContext) {
+
+        return new ExtensionInstance() {
+            @Override
+            public Object call(Object... arguments) {
+                if (arguments.length != 2) {
+                    throw new RuntimeExtensionException("Format function must be called with two arguments");
+                }
+                String source = renderContext.toString(arguments[0]);
+                Object[] params = decodeParams(arguments[1]);
+                return replace(source, params);
+            }
+
+            private Object[] decodeParams(Object paramObj) {
+                if (renderContext.isCollection(paramObj)) {
+                    return renderContext.toCollection(paramObj).toArray();
+                }
+                return new Object[] {paramObj};
+            }
+
+            private String replace(String source, Object[] params) {
+                Matcher matcher = PLACEHOLDER_REGEX.matcher(source);
+                StringBuilder builder = new StringBuilder();
+                int lastPos = 0;
+                boolean matched = true;
+                while (matched) {
+                    matched = matcher.find();
+                    if (matched) {
+                        int paramIndex = placeholderIndex(matcher.group());
+                        String replacement = param(params, paramIndex);
+                        int matchStart = matcher.start();
+                        int matchEnd = matcher.end();
+                        builder.append(source, lastPos, matchStart).append(replacement);
+                        lastPos = matchEnd;
+                    }
+                }
+                builder.append(source, lastPos, source.length());
+                return builder.toString();
+            }
+
+            private String param(Object[] params, int index) {
+                if (index >= 0 && index < params.length) {
+                    return renderContext.toString(params[index]);
+                }
+                return "";
+            }
+
+            private int placeholderIndex(String placeholder) {
+                return Integer.parseInt(placeholder.substring(1, placeholder.length() - 1));
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/I18nFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/I18nFilter.java
new file mode 100644
index 0000000..11bfbb1
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/I18nFilter.java
@@ -0,0 +1,62 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.filter;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NullLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+
+/**
+ * Filter for i18n translation
+ */
+@Component
+@Service(Filter.class)
+@Property(name = FilterComponent.PRIORITY, intValue = 90)
+public class I18nFilter extends FilterComponent {
+
+    public static final String FUNCTION = "i18nTranslation";
+
+    public static final String I18N_OPTION = "i18n";
+    public static final String HINT_OPTION = "hint";
+    public static final String LOCALE_OPTION = "locale";
+
+    @Override
+    public Expression apply(Expression expression) {
+        if (!expression.containsOption(I18N_OPTION)) {
+            return expression;
+        }
+        ExpressionNode hint = option(expression, HINT_OPTION);
+        ExpressionNode locale = option(expression, LOCALE_OPTION);
+        ExpressionNode translation = new RuntimeCall(FUNCTION, expression.getRoot(), locale, hint);
+        return expression.withNode(translation).removeOptions(HINT_OPTION, LOCALE_OPTION);
+    }
+
+    private ExpressionNode option(Expression expression, String optionName) {
+        ExpressionNode node = expression.getOption(optionName);
+        if (node == null) {
+            return NullLiteral.INSTANCE;
+        }
+        return node;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/JoinFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/JoinFilter.java
new file mode 100644
index 0000000..29d25e8
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/JoinFilter.java
@@ -0,0 +1,89 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.filter;
+
+import java.util.Collection;
+import java.util.Iterator;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtensionException;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+/**
+ * Filter providing support for the {@code join} option applied to arrays.
+ */
+@Component
+@Service({Filter.class, RuntimeExtension.class})
+@Properties({
+        @Property(name = RuntimeExtension.SCR_PROP_NAME, value = JoinFilter.JOIN_FUNCTION)
+})
+public class JoinFilter extends FilterComponent implements RuntimeExtension {
+
+    public static final String JOIN_OPTION = "join";
+    public static final String JOIN_FUNCTION = "join";
+
+    @Override
+    public Expression apply(Expression expression) {
+        if (!expression.containsOption(JOIN_OPTION)) {
+            return expression;
+        }
+        ExpressionNode argumentNode = expression.getOption(JOIN_OPTION);
+        ExpressionNode joinResult = new RuntimeCall(JOIN_FUNCTION, expression.getRoot(), argumentNode);
+        return expression.withNode(joinResult).removeOptions(JOIN_OPTION);
+    }
+
+    @Override
+    public ExtensionInstance provide(final RenderContext renderContext) {
+
+        return new ExtensionInstance() {
+            @Override
+            public Object call(Object... arguments) {
+                if (arguments.length != 2) {
+                    throw new RuntimeExtensionException("Join function must be called with two arguments.");
+                }
+                Collection<?> collection = renderContext.toCollection(arguments[0]);
+                String joinString = renderContext.toString(arguments[1]);
+                return join(collection, joinString);
+            }
+
+            private String join(Collection<?> collection, String joinString) {
+                StringBuilder sb = new StringBuilder();
+                Iterator<?> iterator = collection.iterator();
+                while (iterator.hasNext()) {
+                    String element = renderContext.toString(iterator.next());
+                    sb.append(element);
+                    if (iterator.hasNext()) {
+                        sb.append(joinString);
+                    }
+                }
+                return sb.toString();
+            }
+        };
+
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/XSSFilter.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/XSSFilter.java
new file mode 100644
index 0000000..2ef64fa
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/filter/XSSFilter.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.filter;
+
+import java.util.Map;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.Syntax;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+
+/**
+ * XSS filter implementation
+ */
+@Component
+@Service(Filter.class)
+@Property(name = FilterComponent.PRIORITY, intValue = 110)
+public class XSSFilter extends FilterComponent {
+
+    public static final String FUNCTION_NAME = "xss";
+
+    @Override
+    public Expression apply(Expression expression) {
+        ExpressionNode node = expression.getRoot();
+        Map<String, ExpressionNode> options = expression.getOptions();
+        ExpressionNode context = options.get(Syntax.CONTEXT_OPTION);
+        if (context != null) {
+            return new Expression(new RuntimeCall(FUNCTION_NAME, node, context), options);
+        }
+        return expression;
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/MarkupUtils.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/MarkupUtils.java
new file mode 100644
index 0000000..0b7356a
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/MarkupUtils.java
@@ -0,0 +1,40 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.html;
+
+import java.util.regex.Pattern;
+
+/**
+ * Utility methods related to markup
+ */
+public class MarkupUtils {
+
+    private static final Pattern ATTRIBUTE_BLACKLIST = Pattern.compile("^(style|(on.*))$", Pattern.CASE_INSENSITIVE);
+
+    /**
+     * Attributes which should not be generated by Sightly
+     * @param name the name of the attribute
+     * @return if the attribute is sensitive or not
+     */
+    public static boolean isSensitiveAttribute(String name) {
+        return ATTRIBUTE_BLACKLIST.matcher(name).matches();
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/AttributeList.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/AttributeList.java
new file mode 100644
index 0000000..2597a01
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/AttributeList.java
@@ -0,0 +1,93 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom;
+
+import java.util.Iterator;
+
+/**
+ * Contains the list of attributes inside an HTML tag.
+ */
+public interface AttributeList {
+
+    /**
+     * Return the count of attributes
+     * @return count of attributes
+     */
+    int attributeCount();
+
+    /**
+     * Return the list of attribute names
+     * @return <code>Iterator</code> iterating over the attribute names
+     */
+    Iterator<String> attributeNames();
+
+    /**
+     * Return a flag indicating whether a specified attribute exists
+     * @return <code>true</code> if the specified attribute exists,
+     * <code>false</code> otherwise
+     */
+    boolean containsAttribute(String name);
+
+    /**
+     * Return an attribute's value, given its name or <code>null</code>
+     * if the attribute cannot be found.
+     * @param name   attribute name
+     * @return an attribute's value
+     */
+    String getValue(String name);
+
+    /**
+     * Return an attribute's quote character, given its name or <code>0</code>
+     * if the attribute cannot be found.
+     * @param name   attribute name
+     * @return an attribute's quote character
+     */
+    char getQuoteChar(String name);
+
+    /**
+     * Return an attribute's value, already surrounded with the quotes
+     * originally in place. Returns <code>null</code> if the attribute
+     * cannot be found
+     * @param name   attribute name
+     * @return an attribute's value
+     */
+    String getQuotedValue(String name);
+
+    /**
+     * Set an attribute's value. If the value is <code>null</code>, this
+     * is semantically different to a {@link #removeValue(String)}.
+     *
+     * @param name      attribute name
+     * @param value     attribute value
+     */
+    void setValue(String name, String value);
+
+    /**
+     * Remove an attribute's value.
+     * @param name      attribute name
+     */
+    void removeValue(String name);
+
+    /**
+     * Return a flag indicating whether this object was modified.
+     * @return <code>true</code> if the object was modified
+     *         <code>false</code> otherwise
+     */
+    boolean isModified();
+}
\ No newline at end of file
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/DocumentHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/DocumentHandler.java
new file mode 100644
index 0000000..91c5f9c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/DocumentHandler.java
@@ -0,0 +1,62 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom;
+
+import java.io.IOException;
+
+
+/**
+ * Invoked by the <code>HTMLParser</code> when elements are scanned.
+ */
+public interface DocumentHandler {
+
+    /**
+     * Receive notification of unparsed character data.
+     */
+    void onCharacters(char[] ch, int off, int len) throws IOException;
+
+    void onComment(String characters) throws IOException;
+
+    /**
+     * Receive notification of the beginning of an element.
+     * @param name     tag name
+     * @param attList  attribute list
+     * @param endSlash flag indicating whether the element is closed with
+     *                 an ending slash (xhtml-compliant)
+     */
+    void onStartElement(String name, AttributeList attList, boolean endSlash)
+    throws IOException;
+
+    /**
+     * Receive notification of the end of an element.
+     * @param name tag name
+     */
+    void onEndElement(String name)
+    throws IOException;
+
+    /**
+     * Receive notification of parsing start.
+     */
+    void onStart() throws IOException;
+
+    /**
+     * Receive notification of parsing end.
+     */
+    void onEnd() throws IOException;
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParser.java
new file mode 100644
index 0000000..b4439e3
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParser.java
@@ -0,0 +1,468 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom;
+
+import java.io.CharArrayWriter;
+import java.io.IOException;
+import java.io.Reader;
+
+/**
+ * HTML parser. Invokes a <code>DocumentHandler</code> whenever an event occurs.
+ */
+public final class HtmlParser {
+
+    /** Internal character buffer */
+    private final CharArrayWriter buffer = new CharArrayWriter(256);
+
+    /** Tag tokenizer */
+    private final TagTokenizer tokenizer = new TagTokenizer();
+
+    /** Tag name buffer */
+    private final CharArrayWriter tagNameBuffer = new CharArrayWriter(30);
+
+    /** Tag name */
+    private String tagName;
+
+    /** Registered document handler */
+    private final DocumentHandler documentHandler;
+
+    private enum PARSE_STATE {
+        OUTSIDE,
+        TAG,
+        SCRIPT,
+        COMMENT,
+        STRING,
+        EXPRESSION
+    }
+
+    /** Tag type constant */
+    private final static int TT_NONE = 0;
+
+    /** Tag type constant */
+    private final static int TT_MAYBE = 1;
+
+    /** Tag type constant */
+    private final static int TT_TAG = 2;
+
+    /** Expression state constant */
+    private final static int EXPR_NONE = 0;
+
+    /** Expression state constant */
+    private final static int EXPR_MAYBE = 1;
+
+    /** Parse state */
+    private PARSE_STATE parseState = PARSE_STATE.OUTSIDE;
+
+    /** Parse substate */
+    private int parseSubState;
+
+    /** Previous parse state */
+    private PARSE_STATE prevParseState;
+
+    /** Current tag type */
+    private int tagType;
+
+    /** Expression type */
+    private int exprType;
+
+    /** Quote character */
+    private char quoteChar;
+
+    public static void parse(final Reader reader, final DocumentHandler documentHandler)
+    throws IOException {
+        final HtmlParser parser = new HtmlParser(documentHandler);
+        parser.parse(reader);
+    }
+
+    /**
+     * Default constructor.
+     */
+    private HtmlParser(final DocumentHandler documentHandler) {
+        this.documentHandler = documentHandler;
+    }
+
+    private void parse(final Reader reader)
+    throws IOException {
+        try {
+            this.documentHandler.onStart();
+            final char[] readBuffer = new char[2048];
+            int readLen = 0;
+            while ( (readLen = reader.read(readBuffer)) > 0 ) {
+                this.update(readBuffer, readLen);
+            }
+            this.flushBuffer();
+            this.documentHandler.onEnd();
+        } finally {
+            try {
+                reader.close();
+            } catch ( final IOException ignore) {
+                // ignore
+            }
+        }
+    }
+
+    /**
+     * Feed characters to the parser.
+     *
+     * @param buf character buffer
+     * @param len length of affected buffer
+     */
+    private void update(final char[] buf, int len) throws IOException {
+        int start = 0;
+        final int end = len;
+
+        for (int curr = start; curr < end; curr++) {
+            final char c = buf[curr];
+
+            switch (parseState) {
+            case OUTSIDE:
+                if (c == '<') {
+                    if (curr > start) {
+                        documentHandler.onCharacters(buf, start, curr - start);
+                    }
+                    start = curr;
+                    parseState = PARSE_STATE.TAG;
+                    parseSubState = 0;
+                    tagType = TT_MAYBE;
+                    resetTagName();
+                } else if (c == '$') {
+                    exprType = EXPR_MAYBE;
+                    parseState = PARSE_STATE.EXPRESSION;
+                }
+                break;
+            case TAG:
+                switch (parseSubState) {
+                case -1:
+                    if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        prevParseState = parseState;
+                        parseState = PARSE_STATE.STRING;
+                        parseSubState = -1;
+                    } else if (c == '>') {
+                        parseState = PARSE_STATE.OUTSIDE;
+                    }
+                    break;
+                case 0:
+                    if (c == '!') {
+                        parseState = PARSE_STATE.COMMENT;
+                        parseSubState = 0;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    } else if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        prevParseState = parseState;
+                        parseState = PARSE_STATE.STRING;
+                        parseSubState = -1;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    } else if (c == '>') {
+                        parseState = PARSE_STATE.OUTSIDE;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    } else if (!Character.isWhitespace(c)) {
+                        tagNameBuffer.write(c);
+                        parseSubState = 1;
+                    } else {
+                        parseSubState = -1;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    }
+                    break;
+                case 1:
+                    if (c == '"' || c == '\'') {
+                        tagType = TT_TAG;
+                        parseSubState = 2;
+                        quoteChar = c;
+                        prevParseState = parseState;
+                        parseState = PARSE_STATE.STRING;
+                    } else if (c == '>') {
+                        parseState = processTag(buf, start, curr - start + 1) ? PARSE_STATE.SCRIPT : PARSE_STATE.OUTSIDE;
+                        start = curr + 1;
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                    } else if (Character.isWhitespace(c)) {
+                        tagType = TT_TAG;
+                        parseSubState = 2;
+                    } else {
+                        tagNameBuffer.write(c);
+                    }
+                    break;
+                case 2:
+                    if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        prevParseState = parseState;
+                        parseState = PARSE_STATE.STRING;
+                    } else if (c == '>') {
+                        if (tagType == TT_TAG) {
+                            parseState = processTag(buf, start, curr - start + 1) ? PARSE_STATE.SCRIPT : PARSE_STATE.OUTSIDE;
+                            start = curr + 1;
+                        } else {
+                            flushBuffer();
+                            parseState = "SCRIPT".equalsIgnoreCase(getTagName()) ? PARSE_STATE.SCRIPT : PARSE_STATE.OUTSIDE;
+                        }
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                    }
+                    break;
+                }
+                break;
+            case COMMENT:
+                switch (parseSubState) {
+                case 0:
+                    if (c == '-') {
+                        parseSubState++;
+                    } else if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        prevParseState = PARSE_STATE.TAG;
+                        parseState = PARSE_STATE.STRING;
+                        parseSubState = -1;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    } else if (c == '>') {
+                        parseState = PARSE_STATE.OUTSIDE;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    } else {
+                        parseState = PARSE_STATE.TAG;
+                        parseSubState = -1;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    }
+                    break;
+                case 1:
+                    if (c == '-') {
+                        parseSubState++;
+                    } else if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        prevParseState = PARSE_STATE.TAG;
+                        parseState = PARSE_STATE.STRING;
+                        parseSubState = -1;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    } else if (c == '>') {
+                        parseState = PARSE_STATE.OUTSIDE;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    } else {
+                        parseState = PARSE_STATE.TAG;
+                        parseSubState = -1;
+                        tagType = TT_NONE;
+                        flushBuffer();
+                    }
+                    break;
+                case 2:
+                    if (c == '-') {
+                        parseSubState++;
+                    }
+                    break;
+                case 3:
+                    if (c == '-') {
+                        parseSubState++;
+                    } else {
+                        parseSubState = 2;
+                    }
+                    break;
+                case 4:
+                    if (c == '>') {
+                        parseState = PARSE_STATE.OUTSIDE;
+                        documentHandler.onComment(new String(buf, start, curr - start + 1));
+                        start = curr + 1;
+                    } else {
+                        parseSubState = 2;
+                    }
+                    break;
+                }
+                break;
+
+            case SCRIPT:
+                switch (parseSubState) {
+                case 0:
+                    if (c == '<') {
+                        if (curr > start) {
+                            documentHandler.onCharacters(buf, start, curr - start);
+                        }
+                        start = curr;
+                        tagType = TT_MAYBE;
+                        parseSubState++;
+                    }
+                    break;
+                case 1:
+                    if (c == '/') {
+                        parseSubState++;
+                    } else {
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                        flushBuffer();
+                    }
+                    break;
+                case 2:
+                    if (c == 'S' || c == 's') {
+                        parseSubState++;
+                    } else {
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                        flushBuffer();
+                    }
+                    break;
+                case 3:
+                    if (c == 'C' || c == 'c') {
+                        parseSubState++;
+                    } else {
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                        flushBuffer();
+                    }
+                    break;
+                case 4:
+                    if (c == 'R' || c == 'r') {
+                        parseSubState++;
+                    } else {
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                        flushBuffer();
+                    }
+                    break;
+                case 5:
+                    if (c == 'I' || c == 'i') {
+                        parseSubState++;
+                    } else {
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                        flushBuffer();
+                    }
+                    break;
+                case 6:
+                    if (c == 'P' || c == 'p') {
+                        parseSubState++;
+                    } else {
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                        flushBuffer();
+                    }
+                    break;
+                case 7:
+                    if (c == 'T' || c == 't') {
+                        parseSubState++;
+                    } else {
+                        tagType = TT_NONE;
+                        parseSubState = 0;
+                        flushBuffer();
+                    }
+                    break;
+                case 8:
+                    if (c == '>') {
+                        processTag(buf, start, curr - start + 1);
+                        start = curr + 1;
+                        tagType = TT_NONE;
+                        parseState = PARSE_STATE.OUTSIDE;
+                    }
+                    break;
+                }
+                break;
+
+            case STRING:
+                if (c == quoteChar) {
+                    parseState = prevParseState;
+                }
+                break;
+
+            case EXPRESSION:
+                if (exprType == EXPR_MAYBE && c != '{') {
+                    // not a valid expression
+                    if (c == '<') {
+                        //reset to process tag correctly
+                        curr--;
+                    }
+                    parseState = PARSE_STATE.OUTSIDE;
+                } else if (c == '}') {
+                    parseState = PARSE_STATE.OUTSIDE;
+                }
+                exprType = EXPR_NONE;
+                break;
+            }
+        }
+        if (start < end) {
+            if (tagType == TT_NONE) {
+                documentHandler.onCharacters(buf, start, end - start);
+            } else {
+                buffer.write(buf, start, end - start);
+            }
+        }
+    }
+
+    /**
+     * Clears the internal tagname buffer and cache
+     */
+    private void resetTagName() {
+        tagName = null;
+        tagNameBuffer.reset();
+    }
+
+    /**
+     * Returns the tagname scanned and resets the internal tagname buffer
+     *
+     * @return tagname
+     */
+    private String getTagName() {
+        if (tagName == null) {
+            tagName = tagNameBuffer.toString();
+        }
+        return tagName;
+    }
+
+    /**
+     * Flush internal buffer. This forces the parser to flush the characters
+     * still held in its internal buffer, if the parsing state allows.
+     */
+    private void flushBuffer() throws IOException {
+        if (buffer.size() > 0) {
+            final char[] chars = buffer.toCharArray();
+            documentHandler.onCharacters(chars, 0, chars.length);
+            buffer.reset();
+        }
+    }
+
+    /**
+     * Decompose a tag and feed it to the document handler.
+     *
+     * @param ch
+     *            character data
+     * @param off
+     *            offset where character data starts
+     * @param len
+     *            length of character data
+     */
+    private boolean processTag(char[] ch, int off, int len) throws IOException {
+        buffer.write(ch, off, len);
+
+        final char[] snippet = buffer.toCharArray();
+
+        tokenizer.tokenize(snippet, 0, snippet.length);
+        if (!tokenizer.endTag()) {
+            documentHandler.onStartElement(tokenizer.tagName(), tokenizer
+                    .attributes(), tokenizer
+                    .endSlash());
+        } else {
+            documentHandler.onEndElement(tokenizer.tagName());
+        }
+
+        buffer.reset();
+        return "SCRIPT".equalsIgnoreCase(tokenizer.tagName()) && !tokenizer.endSlash();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParserService.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParserService.java
new file mode 100644
index 0000000..a9ad1dd
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/HtmlParserService.java
@@ -0,0 +1,62 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom;
+
+import java.io.IOException;
+import java.io.StringReader;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.html.dom.template.Template;
+import org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateParser;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@Component
+@Properties({
+        @Property(name = "service.description", value = "Sightly Simple HTML parser"),
+        @Property(name = "service.ranking", intValue = 1000)
+})
+@Service(HtmlParserService.class)
+public class HtmlParserService {
+
+    private static final Logger log = LoggerFactory.getLogger(HtmlParserService.class);
+
+    /**
+     * Parse the given document and use the handler to process
+     * the markup events
+     *
+     * @param document - the parsed document
+     * @param handler  - a markup handler
+     */
+    public void parse(String document, MarkupHandler handler) {
+        try {
+            final StringReader sr = new StringReader(document);
+            final TemplateParser parser = new TemplateParser();
+            final Template template = parser.parse(sr);
+            // walk through the tree and send events
+            TreeTraverser tree = new TreeTraverser(handler);
+            tree.traverse(template);
+        } catch (IOException e) {
+            log.error("Failed to parse Sightly template", e);
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/MarkupHandler.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/MarkupHandler.java
new file mode 100644
index 0000000..eef4afe
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/MarkupHandler.java
@@ -0,0 +1,406 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.html.dom;
+
+import java.util.Collection;
+import java.util.Map;
+import java.util.Stack;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.sling.scripting.sightly.impl.compiler.Syntax;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.ElementContext;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.ExpressionParser;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.ExpressionWrapper;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.Fragment;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.Interpolation;
+import org.apache.sling.scripting.sightly.impl.filter.Filter;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.plugin.MarkupContext;
+import org.apache.sling.scripting.sightly.impl.plugin.Plugin;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginCallInfo;
+import org.apache.sling.scripting.sightly.impl.plugin.PluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.util.SymbolGenerator;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+import org.apache.sling.scripting.sightly.impl.html.MarkupUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Implementation for the markup handler
+ */
+public class MarkupHandler {
+
+    private static final Logger log = LoggerFactory.getLogger(MarkupHandler.class);
+
+    private final PushStream stream;
+    private final SymbolGenerator symbolGenerator = new SymbolGenerator();
+    private final ExpressionParser expressionParser = new ExpressionParser();
+    private final Map<String, Plugin> pluginRegistry;
+    private final CompilerContext compilerContext;
+    private final ExpressionWrapper expressionWrapper;
+
+    private final Stack<ElementContext> elementStack = new Stack<ElementContext>();
+
+    public MarkupHandler(PushStream stream, Map<String, Plugin> pluginRegistry, Collection<Filter> filters) {
+        this.stream = stream;
+        this.pluginRegistry = pluginRegistry;
+        this.expressionWrapper = new ExpressionWrapper(filters);
+        this.compilerContext = new CompilerContext(symbolGenerator, expressionWrapper);
+    }
+
+    public void onOpenTagStart(String markup, String tagName) {
+        ElementContext context = new ElementContext(tagName, markup);
+        elementStack.push(context);
+    }
+
+    public void onAttribute(String name, String value) {
+        ElementContext context = elementStack.peek();
+        if (Syntax.isPluginAttribute(name)) {
+            handlePlugin(name, StringUtils.defaultString(value, ""), context);
+        } else {
+            context.addAttribute(name, value);
+        }
+    }
+
+    public void onOpenTagEnd(String markup) {
+        ElementContext context = elementStack.peek();
+        PluginInvoke invoke = context.pluginInvoke();
+        invoke.beforeElement(stream, context.getTagName());
+        invoke.beforeTagOpen(stream);
+        out(context.getOpenTagStartMarkup());
+        invoke.beforeAttributes(stream);
+        traverseAttributes(context, invoke);
+        invoke.afterAttributes(stream);
+        out(markup);
+        invoke.afterTagOpen(stream);
+        invoke.beforeChildren(stream);
+    }
+
+    private void traverseAttributes(ElementContext context, PluginInvoke invoke) {
+        for (Map.Entry<String, Object> attribute : context.getAttributes()) {
+            String attrName = attribute.getKey();
+            Object contentObj = attribute.getValue();
+            if (contentObj == null || contentObj instanceof String) {
+                String content = (String) contentObj;
+                emitAttribute(attrName, content, invoke);
+            } else if (contentObj instanceof Map.Entry) {
+                Map.Entry entry = (Map.Entry) contentObj;
+                PluginCallInfo info = (PluginCallInfo) entry.getKey();
+                Expression expression = (Expression) entry.getValue();
+                invoke.onPluginCall(stream, info, expression);
+            }
+        }
+    }
+
+    private void emitAttribute(String name, String content, PluginInvoke invoke) {
+        invoke.beforeAttribute(stream, name);
+        if (content == null) {
+            emitSimpleTextAttribute(name, null, invoke);
+        } else {
+            Interpolation interpolation = expressionParser.parseInterpolation(content);
+            String text = tryAsSimpleText(interpolation);
+            if (text != null) {
+                emitSimpleTextAttribute(name, text, invoke);
+            } else {
+                emitExpressionAttribute(name, interpolation, invoke);
+            }
+        }
+        invoke.afterAttribute(stream, name);
+    }
+
+    private void emitSimpleTextAttribute(String name, String textValue, PluginInvoke invoke) {
+        emitAttributeStart(name);
+        invoke.beforeAttributeValue(stream, name, new StringConstant(textValue));
+        if (textValue != null) {
+            emitAttributeValueStart();
+            textValue = escapeQuotes(textValue);
+            out(textValue);
+            emitAttributeEnd();
+        }
+        invoke.afterAttributeValue(stream, name);
+    }
+
+    private String escapeQuotes(String textValue) {
+        return textValue.replace("\"", "&quot;");
+    }
+
+    private void emitExpressionAttribute(String name, Interpolation interpolation, PluginInvoke invoke) {
+        interpolation = attributeChecked(name, interpolation);
+        if (interpolation.size() == 1) {
+            emitSingleFragment(name, interpolation, invoke);
+        } else {
+            emitMultipleFragment(name, interpolation, invoke);
+        }
+    }
+
+    private void emitMultipleFragment(String name, Interpolation interpolation, PluginInvoke invoke) {
+        // Simplified algorithm for attribute output, which works when the interpolation is not of size 1. In this
+        // case we are certain that the attribute value cannot be the boolean value true, so we can skip this test
+        // altogether
+        Expression expression = expressionWrapper.transform(interpolation, getAttributeMarkupContext(name));
+        String attrContent = symbolGenerator.next("attrContent");
+        String shouldDisplayAttr = symbolGenerator.next("shouldDisplayAttr");
+        stream.emit(new VariableBinding.Start(attrContent, expression.getRoot()));
+        stream.emit(
+                new VariableBinding.Start(
+                        shouldDisplayAttr,
+                        new BinaryOperation(
+                                BinaryOperator.OR,
+                                new Identifier(attrContent),
+                                new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrContent))
+                        )
+                )
+        );
+        stream.emit(new Conditional.Start(shouldDisplayAttr, true));
+        emitAttributeStart(name);
+        invoke.beforeAttributeValue(stream, name, expression.getRoot());
+        emitAttributeValueStart();
+        stream.emit(new OutVariable(attrContent));
+        emitAttributeEnd();
+        invoke.afterAttributeValue(stream, name);
+        stream.emit(Conditional.END);
+        stream.emit(VariableBinding.END);
+        stream.emit(VariableBinding.END);
+    }
+
+    private void emitSingleFragment(String name, Interpolation interpolation, PluginInvoke invoke) {
+        Expression valueExpression = expressionWrapper.transform(interpolation, null); //raw expression
+        String attrValue = symbolGenerator.next("attrValue"); //holds the raw attribute value
+        String attrContent = symbolGenerator.next("attrContent"); //holds the escaped attribute value
+        String isTrueVar = symbolGenerator.next("isTrueAttr"); // holds the comparison (attrValue == true)
+        String shouldDisplayAttr = symbolGenerator.next("shouldDisplayAttr");
+        MarkupContext markupContext = getAttributeMarkupContext(name);
+        Expression contentExpression = valueExpression.withNode(new Identifier(attrValue));
+        ExpressionNode node = valueExpression.getRoot();
+        stream.emit(new VariableBinding.Start(attrValue, node)); //attrContent = <expr>
+        stream.emit(new VariableBinding.Start(attrContent, expressionWrapper.adjustToContext(contentExpression, markupContext).getRoot()));
+        stream.emit(
+                new VariableBinding.Start(
+                        shouldDisplayAttr,
+                        new BinaryOperation(
+                                BinaryOperator.OR,
+                                new Identifier(attrContent),
+                                new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrValue))
+                        )
+                )
+        );
+        stream.emit(new Conditional.Start(shouldDisplayAttr, true)); // if (attrContent)
+        emitAttributeStart(name);   //write("attrName");
+        invoke.beforeAttributeValue(stream, name, node);
+        stream.emit(new VariableBinding.Start(isTrueVar, //isTrueAttr = (attrValue == true)
+                new BinaryOperation(BinaryOperator.EQ, new Identifier(attrValue), BooleanConstant.TRUE)));
+        stream.emit(new Conditional.Start(isTrueVar, false)); //if (!isTrueAttr)
+        emitAttributeValueStart(); // write("='");
+        stream.emit(new OutVariable(attrContent)); //write(attrContent)
+        emitAttributeEnd(); //write("'");
+        stream.emit(Conditional.END); //end if isTrueAttr
+        stream.emit(VariableBinding.END); //end scope for isTrueAttr
+        invoke.afterAttributeValue(stream, name);
+        stream.emit(Conditional.END); //end if attrContent
+        stream.emit(VariableBinding.END);
+        stream.emit(VariableBinding.END); //end scope for attrContent
+        stream.emit(VariableBinding.END); //end scope for attrValue
+    }
+
+
+    private void emitAttributeStart(String name) {
+        out(" " + name);
+    }
+
+    private void emitAttributeValueStart() {
+        out("=\"");
+    }
+
+    private void emitAttributeEnd() {
+        out("\"");
+    }
+
+
+    public void onCloseTag(String markup) {
+        ElementContext context = elementStack.pop();
+        PluginInvoke invoke = context.pluginInvoke();
+        invoke.afterChildren(stream);
+        boolean selfClosingTag = StringUtils.isEmpty(markup);
+        invoke.beforeTagClose(stream, selfClosingTag);
+        out(markup);
+        invoke.afterTagClose(stream, selfClosingTag);
+        invoke.afterElement(stream);
+    }
+
+
+    public void onText(String text) {
+        String tag = currentElementTag();
+        boolean explicitContextRequired = isExplicitContextRequired(tag);
+        MarkupContext markupContext = (explicitContextRequired) ? null : MarkupContext.TEXT;
+        outText(text, markupContext);
+    }
+
+
+    public void onComment(String markup) {
+        if (!Syntax.isSightlyComment(markup)) {
+            outText(markup, MarkupContext.COMMENT);
+        }
+    }
+
+
+    public void onDataNode(String markup) {
+        out(markup);
+    }
+
+
+    public void onDocType(String markup) {
+        out(markup);
+    }
+
+
+    public void onDocumentFinished() {
+        this.stream.signalDone();
+    }
+
+    private void outText(String content, MarkupContext context) {
+        Interpolation interpolation = expressionParser.parseInterpolation(content);
+        if (context == null) {
+            interpolation = requireContext(interpolation);
+        }
+        String text = tryAsSimpleText(interpolation);
+        if (text != null) {
+            out(text);
+        } else {
+            outExprNode(expressionWrapper.transform(interpolation, context).getRoot());
+        }
+    }
+
+    private Interpolation requireContext(Interpolation interpolation) {
+        Interpolation result = new Interpolation();
+        for (Fragment fragment : interpolation.getFragments()) {
+            Fragment addedFragment;
+            if (fragment.isString()) {
+                addedFragment = fragment;
+            } else {
+                if (fragment.getExpression().containsOption(Syntax.CONTEXT_OPTION)) {
+                    addedFragment = fragment;
+                } else {
+                    String currentTag = currentElementTag();
+                    log.warn("Element {} requires that all expressions have an explicit context specified. Expression will be " +
+                            "replaced by the empty string", currentTag);
+                    addedFragment = new Fragment.Expr(new Expression(StringConstant.EMPTY));
+                }
+            }
+            result.addFragment(addedFragment);
+        }
+        return result;
+    }
+
+    private Interpolation attributeChecked(String attributeName, Interpolation interpolation) {
+        if (!MarkupUtils.isSensitiveAttribute(attributeName)) {
+            return interpolation;
+        }
+        Interpolation newInterpolation = new Interpolation();
+        for (Fragment fragment : interpolation.getFragments()) {
+            Fragment addedFragment = fragment;
+            if (fragment.isExpression()) {
+                Expression expression = fragment.getExpression();
+                if (!expression.containsOption(Syntax.CONTEXT_OPTION)) {
+                    log.warn("All expressions within the value of attribute {} need to have an explicit context option. The expression will be erased.",
+                            attributeName);
+                    addedFragment = new Fragment.Text("");
+                }
+            }
+            newInterpolation.addFragment(addedFragment);
+        }
+        return newInterpolation;
+    }
+
+
+    private void outExprNode(ExpressionNode node) {
+        String variable = symbolGenerator.next();
+        stream.emit(new VariableBinding.Start(variable, node));
+        stream.emit(new OutVariable(variable));
+        stream.emit(VariableBinding.END);
+    }
+
+
+    private String tryAsSimpleText(Interpolation interpolation) {
+        if (interpolation.size() == 1) {
+            Fragment fragment = interpolation.getFragment(0);
+            if (fragment.isString()) {
+                return fragment.getText();
+            }
+        } else if (interpolation.size() == 0) {
+            return "";
+        }
+        return null;
+    }
+
+    private void out(String text) {
+        stream.emit(new OutText(text));
+    }
+
+    private void handlePlugin(String name, String value, ElementContext context) {
+        PluginCallInfo callInfo = Syntax.parsePluginAttribute(name);
+        if (callInfo != null) {
+            Plugin plugin = obtainPlugin(callInfo.getName());
+            Expression expr = expressionWrapper.transform(
+                    expressionParser.parseInterpolation(value), null);
+            PluginInvoke invoke = plugin.invoke(expr, callInfo, compilerContext);
+            context.addPlugin(invoke, plugin.priority());
+            context.addPluginCall(name, callInfo, expr);
+        }
+    }
+
+    private Plugin obtainPlugin(String name) {
+        Plugin plugin = pluginRegistry.get(name);
+        if (plugin == null) {
+            throw new UnsupportedOperationException(String.format("Plugin %s does not exist", name));
+        }
+        return plugin;
+    }
+
+    private MarkupContext getAttributeMarkupContext(String attributeName) {
+        if ("src".equalsIgnoreCase(attributeName) || "href".equalsIgnoreCase(attributeName)) {
+            return MarkupContext.URI;
+        }
+        return MarkupContext.ATTRIBUTE;
+    }
+
+    private String currentElementTag() {
+        if (elementStack.isEmpty()) {
+            return null;
+        }
+        ElementContext current = elementStack.peek();
+        return current.getTagName();
+    }
+
+    private boolean isExplicitContextRequired(String parentElementName) {
+        return parentElementName != null &&
+                ("script".equals(parentElementName) || "style".equals(parentElementName));
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TagTokenizer.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TagTokenizer.java
new file mode 100644
index 0000000..3466cf2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TagTokenizer.java
@@ -0,0 +1,514 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom;
+
+import java.io.CharArrayWriter;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Tokenizes a snippet of characters into a structured tag/attribute name list.
+ */
+class TagTokenizer {
+    /** Tag name buffer */
+    private final CharArrayWriter tagName = new CharArrayWriter(30);
+
+    /** Attribute name buffer */
+    private final CharArrayWriter attName = new CharArrayWriter(30);
+
+    /** Attribute value buffer */
+    private final CharArrayWriter attValue = new CharArrayWriter(30);
+
+    /** Internal property list */
+    private final AttributeListImpl attributes = new AttributeListImpl();
+
+    /** Parse state constant */
+    private final static int START = 0;
+
+    /** Parse state constant */
+    private final static int TAG = START + 1;
+
+    /** Parse state constant */
+    private final static int NAME = TAG + 1;
+
+    /** Parse state constant */
+    private final static int INSIDE = NAME + 1;
+
+    /** Parse state constant */
+    private final static int ATTNAME = INSIDE + 1;
+
+    /** Parse state constant */
+    private final static int EQUAL = ATTNAME + 1;
+
+    /** Parse state constant */
+    private final static int ATTVALUE = EQUAL + 1;
+
+    /** Parse state constant */
+    private final static int STRING = ATTVALUE + 1;
+
+    /** Parse state constant */
+    private final static int ENDSLASH = STRING + 1;
+
+    /** Parse state constant */
+    private final static int END = ENDSLASH + 1;
+
+    /** Parse state constant */
+    private final static int BETWEEN_ATTNAME = END + 1;
+
+    /** Quote character */
+    private char quoteChar = '"';
+
+    /** Flag indicating whether the tag scanned is an end tag */
+    private boolean endTag;
+
+    /** Flag indicating whether an ending slash was parsed */
+    private boolean endSlash;
+
+    /** temporary flag indicating if attribute has a value */
+    private boolean hasAttributeValue;
+
+    /**
+     * Scan characters passed to this parser
+     */
+    public void tokenize(char[] buf, int off, int len) {
+        reset();
+
+        int parseState = START;
+
+        for (int i = 0; i < len; i++) {
+            char c = buf[off + i];
+
+            switch (parseState) {
+                case START:
+                    if (c == '<') {
+                        parseState = TAG;
+                    }
+                    break;
+                case TAG:
+                    if (c == '/') {
+                        endTag = true;
+                        parseState = NAME;
+                    } else if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (Character.isWhitespace(c)) {
+                        parseState = INSIDE;
+                    } else {
+                        tagName.write(c);
+                        parseState = NAME;
+                    }
+                    break;
+                case NAME:
+                    if (Character.isWhitespace(c)) {
+                        parseState = INSIDE;
+                    } else if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (c == '>') {
+                        parseState = END;
+                    } else if (c == '/') {
+                        parseState = ENDSLASH;
+                    } else {
+                        tagName.write(c);
+                    }
+                    break;
+                case INSIDE:
+                    if (c == '>') {
+                        attributeEnded();
+                        parseState = END;
+                    } else if (c == '/') {
+                        attributeEnded();
+                        parseState = ENDSLASH;
+                    } else if (c == '"' || c == '\'') {
+                        attributeValueStarted();
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (c == '=') {
+                        parseState = EQUAL;
+                    } else if (!Character.isWhitespace(c)) {
+                        attName.write(c);
+                        parseState = ATTNAME;
+                    }
+                    break;
+                case ATTNAME:
+                    if (c == '>') {
+                        attributeEnded();
+                        parseState = END;
+                    } else if (c == '/') {
+                        attributeEnded();
+                        parseState = ENDSLASH;
+                    } else if (c == '=') {
+                        parseState = EQUAL;
+                    } else if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (Character.isWhitespace(c)) {
+                        parseState = BETWEEN_ATTNAME;
+                    } else {
+                        attName.write(c);
+                    }
+                    break;
+                case BETWEEN_ATTNAME:
+                    if (c == '>') {
+                        attributeEnded();
+                        parseState = END;
+                    } else if (c == '/') {
+                        attributeEnded();
+                        parseState = ENDSLASH;
+                    } else if (c == '"' || c == '\'') {
+                        attributeValueStarted();
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (c == '=') {
+                        parseState = EQUAL;
+                    } else if (!Character.isWhitespace(c)) {
+                        attributeEnded();
+                        attName.write(c);
+                        parseState = ATTNAME;
+                    }
+                    break;
+                case EQUAL:
+                    if (c == '>') {
+                        attributeEnded();
+                        parseState = END;
+                    } else if (c == '"' || c == '\'') {
+                        attributeValueStarted();
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (!Character.isWhitespace(c)) {
+                        attributeValueStarted();
+                        attValue.write(c);
+                        parseState = ATTVALUE;
+                    }
+                    break;
+                case ATTVALUE:
+                    if (Character.isWhitespace(c)) {
+                        attributeEnded();
+                        parseState = INSIDE;
+                    } else if (c == '"' || c == '\'') {
+                        attributeEnded();
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (c == '>') {
+                        attributeEnded();
+                        parseState = END;
+                    } else {
+                        attValue.write(c);
+                    }
+                    break;
+                case STRING:
+                    if (c == quoteChar) {
+                        attributeEnded();
+                        parseState = INSIDE;
+                    } else {
+                        attValue.write(c);
+                    }
+                    break;
+                case ENDSLASH:
+                    if (c == '>') {
+                        endSlash = true;
+                        parseState = END;
+                    } else if (c == '"' || c == '\'') {
+                        quoteChar = c;
+                        parseState = STRING;
+                    } else if (c != '/' && !Character.isWhitespace(c)) {
+                        attName.write(c);
+                        parseState = ATTNAME;
+                    } else {
+                        parseState = INSIDE;
+                    }
+                    break;
+                case END:
+                    break;
+
+            }
+        }
+    }
+
+    /**
+     * Return a flag indicating whether the tag scanned was an end tag
+     * @return <code>true</code> if it was an end tag, otherwise
+     *         <code>false</code>
+     */
+    public boolean endTag() {
+        return endTag;
+    }
+
+    /**
+     * Return a flag indicating whether an ending slash was scanned
+     * @return <code>true</code> if an ending slash was scanned, otherwise
+     *         <code>false</code>
+     */
+    public boolean endSlash() {
+        return endSlash;
+    }
+
+    /**
+     * Return the tagname scanned
+     * @return tag name
+     */
+    public String tagName() {
+        return tagName.toString();
+    }
+
+    /**
+     * Return the list of attributes scanned
+     * @return list of attributes
+     */
+    public AttributeList attributes() {
+        return attributes;
+    }
+
+    /**
+     * Reset the internal state of the tokenizer
+     */
+    private void reset() {
+        tagName.reset();
+        attributes.reset();
+        endTag = false;
+        endSlash = false;
+    }
+
+    /**
+     * Invoked when an attribute ends
+     */
+    private void attributeEnded() {
+        if (attName.size() > 0) {
+            if (hasAttributeValue) {
+                attributes.addAttribute(attName.toString(), attValue.toString(),
+                        quoteChar);
+            } else {
+                attributes.addAttribute(attName.toString(), quoteChar);
+
+            }
+            attName.reset();
+            attValue.reset();
+            hasAttributeValue = false;
+        }
+    }
+
+    /**
+     * Invoked when an attribute value starts
+     */
+    private void attributeValueStarted() {
+        hasAttributeValue = true;
+    }
+
+    /**
+     * Retransfers the tokenized tag data into html again
+     * @return the reassembled html string
+     */
+    public String toHtmlString() {
+        StringBuffer sb = new StringBuffer();
+        if (endTag) {
+            sb.append("</" + tagName());
+        } else {
+            sb.append("<" + tagName());
+            Iterator<String> attNames = attributes().attributeNames();
+            while (attNames.hasNext()) {
+                String attName = attNames.next();
+                String attValue = attributes().getQuotedValue(attName);
+
+                sb.append(" ");
+                sb.append(attName);
+                if (attValue != null) {
+                    sb.append('=');
+                    sb.append(attValue);
+                }
+            }
+            if (endSlash) {
+                sb.append(" /");
+            }
+        }
+        sb.append(">");
+        return sb.toString();
+    }
+}
+
+/**
+ * Internal implementation of an <code>AttributeList</code>
+ */
+class AttributeListImpl implements AttributeList {
+
+    /**
+     * Internal Value class
+     */
+    static class Value {
+
+        /**
+         * Create a new <code>Value</code> instance
+         */
+        public Value(char quoteChar, String value) {
+            this.quoteChar = quoteChar;
+            this.value = value;
+        }
+
+        /** Quote character */
+        public final char quoteChar;
+
+        /** Value itself */
+        public final String value;
+
+        /** String representation */
+        private String stringRep;
+
+        /**
+         * @see Object#toString()
+         */
+        @Override
+        public String toString() {
+            if (stringRep == null) {
+                stringRep = quoteChar + value + quoteChar;
+            }
+            return stringRep;
+        }
+    }
+
+    /** Attribute/Value pair map with case insensitives names */
+    private final Map<String, Value> attributes = new LinkedHashMap<String, Value>();
+
+    /** Attribute names, case sensitive */
+    private final Set<String> attributeNames = new LinkedHashSet<String>();
+
+    /** Flag indicating whether this object was modified */
+    private boolean modified;
+
+    /**
+     * Add an attribute/value pair to this attribute list
+     */
+    public void addAttribute(String name, String value, char quoteChar) {
+        attributes.put(name.toUpperCase(), new Value(quoteChar, value));
+        attributeNames.add(name);
+    }
+
+    /**
+     * Add an attribute/value pair to this attribute list
+     */
+    public void addAttribute(String name, char quoteChar) {
+        attributes.put(name.toUpperCase(), null);
+        attributeNames.add(name);
+    }
+
+    /**
+     * Empty this attribute list
+     */
+    public void reset() {
+        attributes.clear();
+        attributeNames.clear();
+        modified = false;
+    }
+
+    /**
+     * @see AttributeList#attributeCount
+     */
+    public int attributeCount() {
+        return attributes.size();
+    }
+
+    /**
+     * @see AttributeList#attributeNames
+     */
+    public Iterator<String> attributeNames() {
+        return attributeNames.iterator();
+    }
+
+    /**
+     * @see AttributeList#containsAttribute(String)
+     */
+    public boolean containsAttribute(String name) {
+        return attributes.containsKey(name.toUpperCase());
+    }
+
+    /**
+     * @see AttributeList#getValue(String)
+     */
+    public String getValue(String name) {
+        Value value = getValueEx(name);
+        if (value != null) {
+            return value.value;
+        }
+        return null;
+    }
+
+    /**
+     * @see AttributeList#getQuoteChar(java.lang.String)
+     */
+    public char getQuoteChar(String name) {
+        Value value = getValueEx(name);
+        if (value != null) {
+            return value.quoteChar;
+        }
+        return 0;
+    }
+
+    /**
+     * @see AttributeList#getQuotedValue(String)
+     */
+    public String getQuotedValue(String name) {
+        Value value = getValueEx(name);
+        if (value != null) {
+            return value.toString();
+        }
+        return null;
+    }
+
+    /**
+     * @see AttributeList#setValue(String, String)
+     */
+    public void setValue(String name, String value) {
+        if (value == null) {
+            removeValue(name);
+        } else {
+            Value old = getValueEx(name);
+            if (old == null) {
+                addAttribute(name, value, '"');
+                modified = true;
+            } else if (!old.value.equals(value)) {
+                addAttribute(name, value, old.quoteChar);
+                modified = true;
+            }
+        }
+    }
+
+    /**
+     * @see AttributeList#removeValue(String)
+     */
+    public void removeValue(String name) {
+        attributeNames.remove(name);
+        attributes.remove(name.toUpperCase());
+        modified = true;
+    }
+
+    /**
+     * @see AttributeList#isModified
+     */
+    public boolean isModified() {
+        return modified;
+    }
+
+    /**
+     * Return internal value structure
+     */
+    protected Value getValueEx(String name) {
+        return attributes.get(name.toUpperCase());
+    }
+}
\ No newline at end of file
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TreeTraverser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TreeTraverser.java
new file mode 100644
index 0000000..e556833
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TreeTraverser.java
@@ -0,0 +1,98 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom;
+
+import org.apache.sling.scripting.sightly.impl.html.dom.template.Template;
+import org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateAttribute;
+import org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateCommentNode;
+import org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateElementNode;
+import org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateNode;
+import org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateTextNode;
+
+public class TreeTraverser {
+
+    private final MarkupHandler handler;
+
+    public TreeTraverser(MarkupHandler handler) {
+        this.handler = handler;
+    }
+
+    public void traverse(Template template) {
+        traverseNode(template);
+        this.handler.onDocumentFinished();
+    }
+
+    private void traverseNode(TemplateNode node) {
+        if (node instanceof TemplateElementNode) {
+            traverseElement((TemplateElementNode) node);
+        } else if (node instanceof TemplateTextNode) {
+            traverseText((TemplateTextNode) node);
+        } else if (node instanceof TemplateCommentNode) {
+            traverseComment((TemplateCommentNode) node);
+        } else {
+            throw new IllegalArgumentException("Unknown node type");
+        }
+    }
+
+    private void traverseElement(TemplateElementNode elem) {
+        if ("ROOT".equalsIgnoreCase(elem.getName())) {
+            traverseChildren(elem);
+            return;
+        }
+        String tagName = elem.getName();
+
+        if (elem.isHasStartElement()) {
+            handler.onOpenTagStart("<" + tagName, tagName);
+            for (TemplateAttribute attribute : elem.getAttributes()) {
+                handler.onAttribute(attribute.getName(), attribute.getValue());
+            }
+            if (elem.isHasEndSlash()) {
+                handler.onOpenTagEnd("/>");
+            } else {
+                handler.onOpenTagEnd(">");
+            }
+        } else {
+            handler.onOpenTagStart("", tagName);
+            handler.onOpenTagEnd("");
+        }
+
+        traverseChildren(elem);
+
+        if (elem.isHasEndElement()) {
+            handler.onCloseTag("</" + elem.getName() + ">");
+        } else {
+            handler.onCloseTag("");
+        }
+    }
+
+    private void traverseText(TemplateTextNode textNode) {
+        handler.onText(textNode.getText());
+    }
+
+    private void traverseComment(TemplateCommentNode comment) {
+        handler.onComment(comment.getText());
+    }
+
+    private void traverseChildren(TemplateElementNode elem) {
+        for (TemplateNode node : elem.getChildren()) {
+            traverseNode(node);
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/Template.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/Template.java
new file mode 100644
index 0000000..d52370a
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/Template.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom.template;
+
+
+public class Template extends TemplateElementNode {
+
+    public Template() {
+        super("ROOT", false, null);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateAttribute.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateAttribute.java
new file mode 100644
index 0000000..4162174
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateAttribute.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom.template;
+
+public class TemplateAttribute {
+
+    private final String name;
+
+    private final String value;
+
+    public TemplateAttribute(final String name, final String value) {
+        this.name = name;
+        this.value = value;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String getValue() {
+        return this.value;
+    }
+
+    public boolean hasValue() {
+        return value != null;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateCommentNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateCommentNode.java
new file mode 100644
index 0000000..4c9af50
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateCommentNode.java
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom.template;
+
+public class TemplateCommentNode extends TemplateNode {
+
+    private final String text;
+
+    public TemplateCommentNode(final String t) {
+        this.text = t;
+    }
+
+    public String getText() {
+        return this.text;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateElementNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateElementNode.java
new file mode 100644
index 0000000..266a748
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateElementNode.java
@@ -0,0 +1,81 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom.template;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TemplateElementNode extends TemplateNode {
+
+    private final String name;
+
+    private final boolean hasEndSlash;
+
+    private boolean hasEndElement = false;
+
+    private boolean hasStartElement = false;
+
+    private final List<TemplateAttribute> attributes;
+
+    private final List<TemplateNode> children = new ArrayList<TemplateNode>();
+
+    public TemplateElementNode(final String name,
+                               final boolean hasEndSlash,
+                               final List<TemplateAttribute> attributes) {
+        this.name = name;
+        this.hasEndSlash = hasEndSlash;
+        this.attributes = attributes;
+    }
+
+    public void setHasStartElement() {
+        this.hasStartElement = true;
+    }
+
+    public void setHasEndElement() {
+        this.hasEndElement = true;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public boolean isHasEndSlash() {
+        return hasEndSlash;
+    }
+
+    public boolean isHasStartElement() {
+        return hasStartElement;
+    }
+
+    public boolean isHasEndElement() {
+        return hasEndElement;
+    }
+
+    public List<TemplateAttribute> getAttributes() {
+        return attributes;
+    }
+
+    public void addChild(final TemplateNode node) {
+        this.children.add(node);
+    }
+
+    public List<TemplateNode> getChildren() {
+        return this.children;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateNode.java
new file mode 100644
index 0000000..6ae06bb
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateNode.java
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom.template;
+
+public abstract class TemplateNode {
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateParser.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateParser.java
new file mode 100644
index 0000000..79d55f2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateParser.java
@@ -0,0 +1,139 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom.template;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Deque;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.sling.scripting.sightly.impl.html.dom.AttributeList;
+import org.apache.sling.scripting.sightly.impl.html.dom.DocumentHandler;
+import org.apache.sling.scripting.sightly.impl.html.dom.HtmlParser;
+
+/**
+ * The template parser parses an HTML document and returns a reusable tree
+ * representation.
+ */
+public class TemplateParser {
+
+    /**
+     * Parse an html document
+     * @param reader to be parsed
+     * @throws IOException in case of any parsing error
+     *
+     * @return a Template
+     */
+    public Template parse(final Reader reader) throws IOException {
+        final TemplateParserContext context = new TemplateParserContext();
+
+        HtmlParser.parse(reader, context);
+
+        return context.getTemplate();
+    }
+
+    public static final class TemplateParserContext implements DocumentHandler {
+
+        /** Used for text/character events */
+        private StringBuilder textBuilder = new StringBuilder();
+
+        /** Element stack - root is the Template */
+        private final Deque<TemplateElementNode> elementStack = new ArrayDeque<TemplateElementNode>();
+
+        /** The template. */
+        private Template template;
+
+        public Template getTemplate() {
+            return this.template;
+        }
+
+        public void onStart() throws IOException {
+            this.template = new Template();
+            this.elementStack.push(this.template);
+        }
+
+        public void onEnd() throws IOException {
+            this.checkText();
+            this.elementStack.clear();
+        }
+
+        private void checkText() {
+            if (textBuilder.length() > 0) {
+                elementStack.peek().addChild(new TemplateTextNode(textBuilder.toString()));
+                this.textBuilder = new StringBuilder();
+            }
+        }
+
+        public void onStartElement(String name, AttributeList attList, boolean endSlash) {
+            this.checkText();
+            final List<TemplateAttribute> attrs = new ArrayList<TemplateAttribute>();
+            final Iterator<String> iter = attList.attributeNames();
+            while ( iter.hasNext() ) {
+                final String aName = iter.next();
+                final TemplateAttribute attr = new TemplateAttribute(aName, attList.getValue(aName));
+                attrs.add(attr);
+            }
+            final TemplateElementNode element = new TemplateElementNode(name, endSlash, attrs);
+            element.setHasStartElement();
+            elementStack.peek().addChild(element);
+            if ( !endSlash ) {
+                elementStack.push(element);
+            }
+        }
+
+        public void onEndElement(String name) {
+            this.checkText();
+            if (contains(name)) {
+                TemplateElementNode element = this.elementStack.pop();
+                while ( !name.equals(element.getName()) ) {
+                    element = this.elementStack.pop();
+                }
+                element.setHasEndElement();
+            } else {
+                final TemplateElementNode element
+                        = new TemplateElementNode(name, false, new ArrayList<TemplateAttribute>());
+                elementStack.peek().addChild(element);
+                element.setHasEndElement();
+            }
+        }
+
+        public void onCharacters(final char[] ch, final int off, final int len) {
+            textBuilder.append(ch, off, len);
+        }
+
+        public void onComment(final String text) throws IOException {
+            this.checkText();
+            elementStack.peek().addChild(new TemplateCommentNode(text));
+        }
+
+        private boolean contains(String name) {
+            Iterator it = this.elementStack.iterator(); // ascending iterator
+            while (it.hasNext()) {
+                TemplateElementNode elem = (TemplateElementNode) it.next();
+                if (name.equals(elem.getName())) {
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateTextNode.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateTextNode.java
new file mode 100644
index 0000000..5df2906
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/template/TemplateTextNode.java
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.html.dom.template;
+
+public class TemplateTextNode extends TemplateNode {
+
+    private final String text;
+
+    public TemplateTextNode(final String t) {
+        this.text = t;
+    }
+
+    public String getText() {
+        return this.text;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/AttributePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/AttributePlugin.java
new file mode 100644
index 0000000..918de6f
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/AttributePlugin.java
@@ -0,0 +1,356 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.Syntax;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.PropertyAccess;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Patterns;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+import org.apache.sling.scripting.sightly.impl.html.MarkupUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Implementation for the attribute plugin
+ */
+@Component
+@Service
+@Properties({
+        @Property(name = "service.description", value = "Sightly Resource Block Plugin"),
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "attribute"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 150)
+})
+public class AttributePlugin extends PluginComponent {
+
+    private static final Logger log = LoggerFactory.getLogger(AttributePlugin.class);
+
+    @Override
+    public PluginInvoke invoke(Expression expression, PluginCallInfo callInfo, CompilerContext compilerContext) {
+        String attributeName = decodeAttributeName(callInfo);
+        if (attributeName != null && MarkupUtils.isSensitiveAttribute(attributeName)) {
+            log.warn("Refusing to generate attribute {} for security reasons", attributeName);
+            return new DefaultPluginInvoke(); //no-op invocation
+        }
+        return (attributeName != null)
+                ? new SingleAttributeInvoke(attributeName, expression, compilerContext)
+                : new MultiAttributeInvoke(expression.getRoot(), compilerContext);
+    }
+
+    private String decodeAttributeName(PluginCallInfo info) {
+        String[] arguments = info.getArguments();
+        if (arguments.length == 0) {
+            return null;
+        }
+        return StringUtils.join(arguments, '-');
+    }
+
+    private final class SingleAttributeInvoke extends DefaultPluginInvoke {
+        private final String attributeName;
+        private final String isTrueValue;
+        private final String escapedAttrValue;
+        private final String shouldDisplayAttribute;
+
+        private boolean writeAtEnd = true;
+        private boolean beforeCall = true;
+        private final String attrValue;
+        private final ExpressionNode node;
+        private final ExpressionNode contentNode;
+
+        private SingleAttributeInvoke(String attributeName, Expression expression, CompilerContext compilerContext) {
+            this.attributeName = attributeName;
+            this.attrValue = compilerContext.generateVariable("attrValue_" + attributeName);
+            this.escapedAttrValue = compilerContext.generateVariable("attrValueEscaped_" + attributeName);
+            this.isTrueValue = compilerContext.generateVariable("isTrueValue_" + attributeName);
+            this.shouldDisplayAttribute = compilerContext.generateVariable("shouldDisplayAttr_" + attributeName);
+            this.node = expression.getRoot();
+            if (!expression.containsOption(Syntax.CONTEXT_OPTION)) {
+                this.contentNode = escapeNodeWithHint(compilerContext, new Identifier(attrValue), MarkupContext.ATTRIBUTE,
+                        new StringConstant(attributeName));
+            } else {
+                this.contentNode = new Identifier(attrValue);
+            }
+        }
+
+        @Override
+        public void beforeAttribute(PushStream stream, String attributeName) {
+            if (attributeName.equals(this.attributeName)) {
+                if (beforeCall) {
+                    emitStart(stream);
+                }
+                writeAtEnd = false;
+            }
+        }
+
+        @Override
+        public void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue) {
+            if (attributeName.equals(this.attributeName) && beforeCall) {
+                emitWrite(stream);
+                Patterns.beginStreamIgnore(stream);
+            }
+        }
+
+        @Override
+        public void afterAttributeValue(PushStream stream, String attributeName) {
+            if (attributeName.equals(this.attributeName) && beforeCall) {
+                Patterns.endStreamIgnore(stream);
+            }
+        }
+
+        @Override
+        public void afterAttribute(PushStream stream, String attributeName) {
+            if (attributeName.equals(this.attributeName) && beforeCall) {
+                emitEnd(stream);
+            }
+        }
+
+        @Override
+        public void afterAttributes(PushStream stream) {
+            if (writeAtEnd) {
+                emitStart(stream);
+                stream.emit(new OutText(" " + this.attributeName));
+                emitWrite(stream);
+                emitEnd(stream);
+            }
+        }
+
+        @Override
+        public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
+            if ("attribute".equals(callInfo.getName())) {
+                String attributeName = decodeAttributeName(callInfo);
+                if (this.attributeName.equals(attributeName)) {
+                    beforeCall = false;
+                }
+            }
+        }
+
+        private void emitStart(PushStream stream) {
+            stream.emit(new VariableBinding.Start(attrValue, node));
+            stream.emit(new VariableBinding.Start(escapedAttrValue, contentNode));
+            stream.emit(
+                    new VariableBinding.Start(
+                            shouldDisplayAttribute,
+                            new BinaryOperation(
+                                    BinaryOperator.OR,
+                                    new Identifier(escapedAttrValue),
+                                    new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrValue))
+                            )
+                    )
+            );
+            stream.emit(new Conditional.Start(shouldDisplayAttribute, true));
+        }
+
+        private void emitWrite(PushStream stream) {
+            stream.emit(new VariableBinding.Start(isTrueValue,
+                    new BinaryOperation(BinaryOperator.EQ,
+                            new Identifier(attrValue),
+                            BooleanConstant.TRUE)));
+            stream.emit(new Conditional.Start(isTrueValue, false));
+            stream.emit(new OutText("=\""));
+            stream.emit(new OutVariable(escapedAttrValue));
+            stream.emit(new OutText("\""));
+            stream.emit(Conditional.END);
+            stream.emit(VariableBinding.END);
+        }
+
+        private void emitEnd(PushStream stream) {
+            stream.emit(Conditional.END);
+            stream.emit(VariableBinding.END);
+            stream.emit(VariableBinding.END);
+            stream.emit(VariableBinding.END);
+        }
+    }
+
+    private final class MultiAttributeInvoke extends DefaultPluginInvoke {
+
+        private final ExpressionNode attrMap;
+        private final String attrMapVar;
+        private final CompilerContext compilerContext;
+        private boolean beforeCall = true;
+        private final Set<String> ignored = new HashSet<String>();
+
+        private MultiAttributeInvoke(ExpressionNode attrMap, CompilerContext context) {
+            this.attrMap = attrMap;
+            this.compilerContext = context;
+            this.attrMapVar = context.generateVariable("attrMap");
+        }
+
+        @Override
+        public void beforeAttributes(PushStream stream) {
+            stream.emit(new VariableBinding.Start(attrMapVar, attrMap));
+        }
+
+        @Override
+        public void beforeAttribute(PushStream stream, String attributeName) {
+            ignored.add(attributeName);
+            if (beforeCall) {
+                String attrNameVar = compilerContext.generateVariable("attrName_" + attributeName);
+                String attrValue = compilerContext.generateVariable("mapContains_" + attributeName);
+                stream.emit(new VariableBinding.Start(attrNameVar, new StringConstant(attributeName)));
+                stream.emit(new VariableBinding.Start(attrValue, attributeValueNode(new StringConstant(attributeName))));
+                writeAttribute(stream, attrNameVar, attrValue);
+                stream.emit(new Conditional.Start(attrValue, false));
+            }
+        }
+
+        @Override
+        public void afterAttribute(PushStream stream, String attributeName) {
+            if (beforeCall) {
+                stream.emit(Conditional.END);
+                stream.emit(VariableBinding.END);
+                stream.emit(VariableBinding.END);
+            }
+        }
+
+        @Override
+        public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
+            if ("attribute".equals(callInfo.getName())) {
+                String attrName = decodeAttributeName(callInfo);
+                if (attrName == null) {
+                    beforeCall = false;
+                } else {
+                    if (!beforeCall) {
+                        ignored.add(attrName);
+                    }
+                }
+            }
+        }
+
+        @Override
+        public void afterAttributes(PushStream stream) {
+            HashMap<String, ExpressionNode> ignoredLiteralMap = new HashMap<String, ExpressionNode>();
+            for (String attr : ignored) {
+                ignoredLiteralMap.put(attr, new BooleanConstant(true));
+            }
+            MapLiteral ignoredLiteral = new MapLiteral(ignoredLiteralMap);
+            String ignoredVar = compilerContext.generateVariable("ignoredAttributes");
+            stream.emit(new VariableBinding.Start(ignoredVar, ignoredLiteral));
+            String attrNameVar = compilerContext.generateVariable("attrName");
+            String attrNameEscaped = compilerContext.generateVariable("attrNameEscaped");
+            String attrIndex = compilerContext.generateVariable("attrIndex");
+            stream.emit(new Loop.Start(attrMapVar, attrNameVar, attrIndex));
+            stream.emit(new VariableBinding.Start(attrNameEscaped,
+                    escapeNode(new Identifier(attrNameVar), MarkupContext.ATTRIBUTE_NAME, null)));
+            stream.emit(new Conditional.Start(attrNameEscaped, true));
+            String isIgnoredAttr = compilerContext.generateVariable("isIgnoredAttr");
+            stream.emit(
+                    new VariableBinding.Start(isIgnoredAttr, new PropertyAccess(new Identifier(ignoredVar), new Identifier(attrNameVar))));
+            stream.emit(new Conditional.Start(isIgnoredAttr, false));
+            String attrContent = compilerContext.generateVariable("attrContent");
+            stream.emit(new VariableBinding.Start(attrContent, attributeValueNode(new Identifier(attrNameVar))));
+            writeAttribute(stream, attrNameEscaped, attrContent);
+            stream.emit(VariableBinding.END); //end of attrContent
+            stream.emit(Conditional.END);
+            stream.emit(VariableBinding.END);
+            stream.emit(Conditional.END);
+            stream.emit(VariableBinding.END);
+            stream.emit(Loop.END);
+            stream.emit(VariableBinding.END);
+            stream.emit(VariableBinding.END);
+        }
+
+        private void writeAttribute(PushStream stream, String attrNameVar, String attrContentVar) {
+            String escapedContent = compilerContext.generateVariable("attrContentEscaped");
+            String shouldDisplayAttribute = compilerContext.generateVariable("shouldDisplayAttr");
+            stream.emit(new VariableBinding.Start(escapedContent,
+                    escapedExpression(new Identifier(attrContentVar), new Identifier(attrNameVar))));
+            stream.emit(
+                    new VariableBinding.Start(
+                            shouldDisplayAttribute,
+                            new BinaryOperation(
+                                    BinaryOperator.OR,
+                                    new Identifier(escapedContent),
+                                    new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrContentVar))
+                            )
+                    )
+            );
+            stream.emit(new Conditional.Start(shouldDisplayAttribute, true));
+            stream.emit(new OutText(" "));   //write("attrName");
+            writeAttributeName(stream, attrNameVar);
+            writeAttributeValue(stream, escapedContent, attrContentVar);
+            stream.emit(Conditional.END);
+            stream.emit(VariableBinding.END);
+            stream.emit(VariableBinding.END);
+        }
+
+        private void writeAttributeName(PushStream stream, String attrNameVar) {
+            stream.emit(new OutVariable(attrNameVar));
+        }
+
+        private void writeAttributeValue(PushStream stream, String escapedContent, String attrContentVar) {
+
+            String isTrueVar = compilerContext.generateVariable("isTrueAttr"); // holds the comparison (attrValue == true)
+            stream.emit(new VariableBinding.Start(isTrueVar, //isTrueAttr = (attrContent == true)
+                    new BinaryOperation(BinaryOperator.EQ, new Identifier(attrContentVar), BooleanConstant.TRUE)));
+            stream.emit(new Conditional.Start(isTrueVar, false)); //if (!isTrueAttr)
+            stream.emit(new OutText("=\""));
+
+            stream.emit(new OutVariable(escapedContent)); //write(escapedContent)
+
+            stream.emit(new OutText("\""));
+            stream.emit(Conditional.END); //end if isTrueAttr
+            stream.emit(VariableBinding.END); //end scope for isTrueAttr
+        }
+
+        private ExpressionNode attributeValueNode(ExpressionNode attributeNameNode) {
+            return new PropertyAccess(new Identifier(attrMapVar), attributeNameNode);
+        }
+
+        private ExpressionNode escapedExpression(ExpressionNode original, ExpressionNode hint) {
+            return escapeNode(original, MarkupContext.ATTRIBUTE, hint);
+        }
+
+        private ExpressionNode escapeNode(ExpressionNode node, MarkupContext markupContext, ExpressionNode hint) {
+            return escapeNodeWithHint(compilerContext, node, markupContext, hint);
+        }
+    }
+
+    private static ExpressionNode escapeNodeWithHint(CompilerContext compilerContext, ExpressionNode node, MarkupContext markupContext,
+                                                     ExpressionNode hint) {
+        if (hint != null) {
+            //todo: this is not the indicated way to escape via XSS. Correct after modifying the compiler context API
+            return new RuntimeCall("xss", node, new StringConstant(markupContext.getName()), hint);
+        }
+        return compilerContext.adjustToContext(new Expression(node), markupContext).getRoot();
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/CallPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/CallPlugin.java
new file mode 100644
index 0000000..b3e5bb2
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/CallPlugin.java
@@ -0,0 +1,75 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Patterns;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Implementation for the {@code data-sly-call} plugin.
+ */
+@Component
+@Service(Plugin.class)
+@Properties({
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "call"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 3)
+})
+public class CallPlugin extends PluginComponent {
+
+    @Override
+    public PluginInvoke invoke(final Expression expression,
+                               final PluginCallInfo callInfo,
+                               final CompilerContext compilerContext) {
+        if (callInfo.getArguments().length > 0) {
+            throw new PluginException(this, "Call plugin should have no arguments");
+        }
+        return new DefaultPluginInvoke() {
+
+            @Override
+            public void beforeChildren(PushStream stream) {
+                String templateVar = compilerContext.generateVariable("templateVar");
+                String argsVar = compilerContext.generateVariable("templateOptions");
+                MapLiteral args = new MapLiteral(expression.getOptions());
+                stream.emit(new VariableBinding.Start(templateVar, expression.getRoot()));
+                stream.emit(new VariableBinding.Start(argsVar, args));
+                stream.emit(new Procedure.Call(templateVar, argsVar));
+                stream.emit(VariableBinding.END);
+                stream.emit(VariableBinding.END);
+                //ignoring everything else
+                Patterns.beginStreamIgnore(stream);
+            }
+
+            @Override
+            public void afterChildren(PushStream stream) {
+                Patterns.endStreamIgnore(stream);
+            }
+
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ElementPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ElementPlugin.java
new file mode 100644
index 0000000..d037a0d
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ElementPlugin.java
@@ -0,0 +1,99 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutText;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Implementation for the {@code data-sly-element} plugin.
+ */
+@Component
+@Service
+@Properties({
+        @Property(name = "service.description", value = "Sightly Resource Block Plugin"),
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "element"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = PluginComponent.DEFAULT_PRIORITY)
+})
+public class ElementPlugin extends PluginComponent {
+
+    @Override
+    public PluginInvoke invoke(final Expression expression, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
+
+        return new DefaultPluginInvoke() {
+
+            private final ExpressionNode node = compilerContext.adjustToContext(expression, MarkupContext.ELEMENT_NAME).getRoot();
+            private String tagVar = compilerContext.generateVariable("tagVar");
+
+            @Override
+            public void beforeElement(PushStream stream, String tagName) {
+                stream.emit(new VariableBinding.Start(tagVar, node));
+            }
+
+            @Override
+            public void beforeTagOpen(PushStream stream) {
+                stream.emit(new Conditional.Start(tagVar, true));
+                stream.emit(new OutText("<"));
+                stream.emit(new OutVariable(tagVar));
+                stream.emit(Conditional.END);
+                stream.emit(new Conditional.Start(tagVar, false));
+            }
+
+            @Override
+            public void beforeAttributes(PushStream stream) {
+                stream.emit(Conditional.END);
+            }
+
+            @Override
+            public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
+                if (!isSelfClosing) {
+                    stream.emit(new Conditional.Start(tagVar, true));
+                    stream.emit(new OutText("</"));
+                    stream.emit(new OutVariable(tagVar));
+                    stream.emit(new OutText(">"));
+                    stream.emit(Conditional.END);
+                }
+                stream.emit(new Conditional.Start(tagVar, false));
+            }
+
+            @Override
+            public void afterTagClose(PushStream stream, boolean isSelfClosing) {
+                stream.emit(Conditional.END);
+            }
+
+            @Override
+            public void afterElement(PushStream stream) {
+                stream.emit(VariableBinding.END);
+            }
+        };
+
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/IncludePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/IncludePlugin.java
new file mode 100644
index 0000000..e60c3b1
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/IncludePlugin.java
@@ -0,0 +1,74 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Patterns;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Implementation for the include plugin
+ */
+@Component
+@Service(Plugin.class)
+@Properties({
+        @Property(name = "service.description", value = "Sightly Include Block Plugin"),
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "include"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = PluginComponent.DEFAULT_PRIORITY)
+})
+public class IncludePlugin extends PluginComponent {
+
+    public static final String FUNCTION = "include";
+
+    @Override
+    public PluginInvoke invoke(final Expression expression, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
+        return new DefaultPluginInvoke() {
+
+            @Override
+            public void beforeChildren(PushStream stream) {
+                String includedContentVar = compilerContext.generateVariable("includedResult");
+                String pathVar = compilerContext.generateVariable("includePath");
+                stream.emit(new VariableBinding.Start(pathVar, expression.getRoot()));
+                stream.emit(new VariableBinding.Start(includedContentVar,
+                        new RuntimeCall(FUNCTION, new Identifier(pathVar), new MapLiteral(expression.getOptions()))));
+                stream.emit(new OutVariable(includedContentVar));
+                stream.emit(VariableBinding.END); //end includedContentVar
+                stream.emit(VariableBinding.END); //end pathVar
+                Patterns.beginStreamIgnore(stream);
+            }
+
+            @Override
+            public void afterChildren(PushStream stream) {
+                Patterns.endStreamIgnore(stream);
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ListPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ListPlugin.java
new file mode 100644
index 0000000..b9d0be5
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ListPlugin.java
@@ -0,0 +1,139 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import java.util.HashMap;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.Syntax;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BinaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.Identifier;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.NumericConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperation;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.UnaryOperator;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Loop;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Default implementation of the {@code data-sly-list} plugin.
+ */
+@Component()
+@Service(Plugin.class)
+@Properties({
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "list"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 130)
+})
+public class ListPlugin extends PluginComponent {
+
+
+    private static final String INDEX = "index";
+    private static final String COUNT = "count";
+    private static final String FIRST = "first";
+    private static final String MIDDLE = "middle";
+    private static final String LAST = "last";
+    private static final String ODD = "odd";
+    private static final String EVEN = "even";
+
+    @Override
+    public PluginInvoke invoke(final Expression expression, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
+        return new DefaultPluginInvoke() {
+
+            private String listVariable = compilerContext.generateVariable("collectionVar");
+            private String collectionSizeVar = compilerContext.generateVariable("size");
+
+            @Override
+            public void beforeElement(PushStream stream, String tagName) {
+                stream.emit(new VariableBinding.Start(listVariable, expression.getRoot()));
+                stream.emit(new VariableBinding.Start(collectionSizeVar,
+                        new UnaryOperation(UnaryOperator.LENGTH, new Identifier(listVariable))));
+                stream.emit(new Conditional.Start(collectionSizeVar, true));
+
+            }
+
+            @Override
+            public void beforeChildren(PushStream stream) {
+                String itemVariable = decodeItemVariable();
+                String loopStatusVar = Syntax.itemLoopStatusVariable(itemVariable);
+                String indexVariable = compilerContext.generateVariable("index");
+                stream.emit(new Loop.Start(listVariable, itemVariable, indexVariable));
+                stream.emit(new VariableBinding.Start(loopStatusVar, buildStatusObj(indexVariable, collectionSizeVar)));
+            }
+
+            @Override
+            public void afterChildren(PushStream stream) {
+                stream.emit(VariableBinding.END);
+                stream.emit(Loop.END);
+            }
+
+            @Override
+            public void afterElement(PushStream stream) {
+                stream.emit(Conditional.END);
+                stream.emit(VariableBinding.END);
+                stream.emit(VariableBinding.END);
+            }
+
+
+            private String decodeItemVariable() {
+                String[] args = callInfo.getArguments();
+                if (args.length > 0) {
+                    return args[0];
+                }
+                return Syntax.DEFAULT_LIST_ITEM_VAR_NAME;
+            }
+
+            private MapLiteral buildStatusObj(String indexVar, String sizeVar) {
+                HashMap<String, ExpressionNode> obj = new HashMap<String, ExpressionNode>();
+                Identifier indexId = new Identifier(indexVar);
+                BinaryOperation firstExpr = new BinaryOperation(BinaryOperator.EQ, indexId, NumericConstant.ZERO);
+                BinaryOperation lastExpr = new BinaryOperation(
+                        BinaryOperator.EQ,
+                        indexId,
+                        new BinaryOperation(BinaryOperator.SUB, new Identifier(sizeVar), NumericConstant.ONE));
+                obj.put(INDEX, indexId);
+                obj.put(COUNT, new BinaryOperation(BinaryOperator.ADD, indexId, NumericConstant.ONE));
+                obj.put(FIRST, firstExpr);
+                obj.put(MIDDLE, new UnaryOperation(
+                        UnaryOperator.NOT,
+                        new BinaryOperation(BinaryOperator.OR, firstExpr, lastExpr)));
+                obj.put(LAST, lastExpr);
+                obj.put(ODD, parityCheck(indexId, NumericConstant.ZERO));
+                obj.put(EVEN, parityCheck(indexId, NumericConstant.ONE));
+                return new MapLiteral(obj);
+            }
+
+            private ExpressionNode parityCheck(ExpressionNode numericExpression, NumericConstant expected) {
+                return new BinaryOperation(
+                        BinaryOperator.EQ,
+                        new BinaryOperation(BinaryOperator.REM, numericExpression, NumericConstant.TWO),
+                        expected);
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/MarkupContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/MarkupContext.java
new file mode 100644
index 0000000..df46489
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/MarkupContext.java
@@ -0,0 +1,71 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Indicates what type of content is being rendered
+ */
+public enum MarkupContext {
+
+    HTML("html"),
+    TEXT("text"),
+    ELEMENT_NAME("elementName"),
+    ATTRIBUTE_NAME("attributeName"),
+    ATTRIBUTE("attribute"),
+    URI("uri"),
+    SCRIPT_TOKEN("scriptToken"),
+    SCRIPT_STRING("scriptString"),
+    SCRIPT_COMMENT("scriptComment"),
+    SCRIPT_REGEXP("scriptRegExp"),
+    STYLE_TOKEN("styleToken"),
+    STYLE_STRING("styleString"),
+    COMMENT("comment"),
+    NUMBER("number"),
+    UNSAFE("unsafe");
+
+    private final String name;
+
+    MarkupContext(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Return the render context with the given name
+     * @param name - the name of the render context
+     * @return - the rendering context value or null if the name matches no value
+     */
+    public static MarkupContext lookup(String name) {
+        return reverseMap.get(name);
+    }
+
+    private static final Map<String, MarkupContext> reverseMap = new HashMap<String, MarkupContext>();
+
+    static {
+        for (MarkupContext markupContext : MarkupContext.values()) {
+            reverseMap.put(markupContext.getName(), markupContext);
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/Plugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/Plugin.java
new file mode 100644
index 0000000..98924bc
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/Plugin.java
@@ -0,0 +1,55 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+
+/**
+ * Common interface for plugins
+ */
+public interface Plugin extends Comparable<Plugin> {
+
+    String SCR_PROP_NAME_BLOCK_NAME = "org.apache.sling.scripting.sightly.impl.plugin.name";
+    String SCR_PROP_NAME_PRIORITY = "org.apache.sling.scripting.sightly.impl.plugin.priority";
+
+    /**
+     * Given the plugin invocation provide an invoke object which will influence the rendering command
+     * stream
+     * @param expression the expression used at plugin invocation
+     * @param callInfo the parameters given to the plugin
+     * @param compilerContext a compiler context providing utility methods to plugins
+     * @return an invocation
+     * @see PluginInvoke
+     */
+    PluginInvoke invoke(Expression expression, PluginCallInfo callInfo, CompilerContext compilerContext);
+
+    /**
+     * The priority of the plugin
+     * @return a numeric value which controls when, relative to other plugins, should
+     * this plugin be applied
+     */
+    int priority();
+
+    /**
+     * The name of the plugin
+     * @return the plugin name
+     */
+    String name();
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginCallInfo.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginCallInfo.java
new file mode 100644
index 0000000..a7da779
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginCallInfo.java
@@ -0,0 +1,49 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+/**
+ * Data related to a plugin call
+ */
+public class PluginCallInfo {
+
+    private final String name;
+    private final String[] arguments;
+
+    public PluginCallInfo(String name, String[] arguments) {
+        this.name = name;
+        this.arguments = arguments;
+    }
+
+    /**
+     * Get the name of the called plugin
+     * @return a string with the name of the called plugin
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Get the plugin arguments
+     * @return a possibly empty array of args
+     */
+    public String[] getArguments() {
+        return arguments;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginComponent.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginComponent.java
new file mode 100644
index 0000000..6a98c70
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginComponent.java
@@ -0,0 +1,61 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import java.util.Dictionary;
+
+import org.apache.sling.commons.osgi.PropertiesUtil;
+import org.osgi.service.component.ComponentContext;
+import org.osgi.service.component.ComponentException;
+
+/**
+ * Component plugin implementation
+ */
+public abstract class PluginComponent implements Plugin {
+
+    public static final int DEFAULT_PRIORITY = 100;
+
+    private int priority;
+    private String name;
+
+    @Override
+    public int priority() {
+        return priority;
+    }
+
+    @Override
+    public String name() {
+        return name;
+    }
+
+    @Override
+    public int compareTo(Plugin o) {
+        return this.priority() - o.priority();
+    }
+
+    @SuppressWarnings("UnusedDeclaration")
+    protected void activate(ComponentContext componentContext) {
+        Dictionary properties = componentContext.getProperties();
+        priority = PropertiesUtil.toInteger(properties.get(SCR_PROP_NAME_PRIORITY), DEFAULT_PRIORITY);
+        name = PropertiesUtil.toString(properties.get(SCR_PROP_NAME_BLOCK_NAME), null);
+        if (name == null) {
+            throw new ComponentException("The plugin hasn't a valid name specified");
+        }
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginException.java
new file mode 100644
index 0000000..0db18a3
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginException.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+/**
+ * Plugin runtime exception caused by a plugin
+ */
+public class PluginException extends RuntimeException {
+
+    private Plugin plugin;
+
+    public PluginException(Plugin plugin, String message) {
+        super(message);
+        this.plugin = plugin;
+    }
+
+    public Plugin getPlugin() {
+        return plugin;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginInvoke.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginInvoke.java
new file mode 100644
index 0000000..217c9f3
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/PluginInvoke.java
@@ -0,0 +1,60 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * General interface for plugins
+ */
+public interface PluginInvoke {
+
+    void beforeElement(PushStream stream, String tagName);
+
+    void beforeTagOpen(PushStream stream);
+
+    void beforeAttributes(PushStream stream);
+
+    void beforeAttribute(PushStream stream, String attributeName);
+
+    void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue);
+
+    void afterAttributeValue(PushStream stream, String attributeName);
+
+    void afterAttribute(PushStream stream, String attributeName);
+
+    void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression);
+
+    void afterAttributes(PushStream stream);
+
+    void afterTagOpen(PushStream stream);
+
+    void beforeChildren(PushStream stream);
+
+    void afterChildren(PushStream stream);
+
+    void beforeTagClose(PushStream stream, boolean isSelfClosing);
+
+    void afterTagClose(PushStream stream, boolean isSelfClosing);
+
+    void afterElement(PushStream stream);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ResourcePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ResourcePlugin.java
new file mode 100644
index 0000000..99bd619
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/ResourcePlugin.java
@@ -0,0 +1,78 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Patterns;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * The resource plugin
+ */
+@Component
+@Service(Plugin.class)
+@Properties({
+        @Property(name = "service.description", value = "Sightly Resource Block Plugin"),
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "resource"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = PluginComponent.DEFAULT_PRIORITY)
+})
+public class ResourcePlugin extends PluginComponent {
+
+    public static final String FUNCTION = "includeResource";
+
+    @Override
+    public PluginInvoke invoke(final Expression expression, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
+
+        return new DefaultPluginInvoke() {
+
+            private Map<String, ExpressionNode> expressionOptions = new HashMap<String, ExpressionNode>(expression.getOptions());
+
+            @Override
+            public void beforeChildren(PushStream stream) {
+                String resourceVar = compilerContext.generateVariable("resourceContent");
+                stream.emit(new VariableBinding.Start(resourceVar,
+                        new RuntimeCall(FUNCTION,
+                                expression.getRoot(), new MapLiteral(expressionOptions))));
+                stream.emit(new OutVariable(resourceVar));
+                stream.emit(VariableBinding.END);
+                Patterns.beginStreamIgnore(stream);
+            }
+
+            @Override
+            public void afterChildren(PushStream stream) {
+                Patterns.endStreamIgnore(stream);
+            }
+
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TemplatePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TemplatePlugin.java
new file mode 100644
index 0000000..4a4733c
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TemplatePlugin.java
@@ -0,0 +1,98 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Patterns;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Procedure;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * The template plugin
+ */
+@Component
+@Service
+@Properties({
+        @Property(name = "service.description", value = "Sightly Template Block Plugin"),
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "template"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = Integer.MIN_VALUE)
+})
+public class TemplatePlugin extends PluginComponent {
+    @Override
+    public PluginInvoke invoke(final Expression expressionNode, final PluginCallInfo callInfo, CompilerContext compilerContext) {
+        return new DefaultPluginInvoke() {
+
+            @Override
+            public void beforeTagOpen(PushStream stream) {
+                //ignoring template tags
+                Patterns.beginStreamIgnore(stream);
+            }
+
+            @Override
+            public void beforeElement(PushStream stream, String tagName) {
+                String name = decodeName();
+                Set<String> parameters = extractParameters();
+                stream.emit(new Procedure.Start(name, parameters));
+            }
+
+            @Override
+            public void afterElement(PushStream stream) {
+                stream.emit(Procedure.END);
+            }
+
+            @Override
+            public void afterTagOpen(PushStream stream) {
+                Patterns.endStreamIgnore(stream); //resuming normal operation
+            }
+
+            @Override
+            public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
+                Patterns.beginStreamIgnore(stream); //ignoring closing tags
+            }
+
+            @Override
+            public void afterTagClose(PushStream stream, boolean isSelfClosing) {
+                Patterns.endStreamIgnore(stream);
+            }
+
+            private Set<String> extractParameters() {
+                Map<String, ExpressionNode> options = expressionNode.getOptions();
+                return options.keySet();
+            }
+
+            private String decodeName() {
+                String[] arguments = callInfo.getArguments();
+                if (arguments.length == 0) {
+                    throw new PluginException(TemplatePlugin.this, "template name was not provided");
+                }
+                return arguments[0];
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TestPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TestPlugin.java
new file mode 100644
index 0000000..fd59414
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TestPlugin.java
@@ -0,0 +1,86 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * Implementation for the test plugin
+ */
+@Component
+@Service(Plugin.class)
+@Properties({
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "test"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 1)
+})
+public class TestPlugin extends PluginComponent {
+
+
+    @Override
+    public PluginInvoke invoke(final Expression expressionNode, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
+
+        return new DefaultPluginInvoke() {
+
+            private boolean globalBinding;
+
+            @Override
+            public void beforeElement(PushStream stream, String tagName) {
+                String variableName = decodeVariableName();
+                globalBinding = variableName != null;
+                if (variableName == null) {
+                    variableName = compilerContext.generateVariable("testVariable");
+                }
+                if (globalBinding) {
+                    stream.emit(new VariableBinding.Global(variableName, expressionNode.getRoot()));
+                } else {
+                    stream.emit(new VariableBinding.Start(variableName, expressionNode.getRoot()));
+                }
+                stream.emit(new Conditional.Start(variableName, true));
+            }
+
+            @Override
+            public void afterElement(PushStream stream) {
+                stream.emit(Conditional.END);
+                if (!globalBinding) {
+                    stream.emit(VariableBinding.END);
+                }
+            }
+
+            private String decodeVariableName() {
+                String[] args = callInfo.getArguments();
+                if (args.length > 0) {
+                    return args[0];
+                }
+                return null;
+            }
+
+        };
+    }
+
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TextPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TextPlugin.java
new file mode 100644
index 0000000..e98aa1b
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/TextPlugin.java
@@ -0,0 +1,64 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.OutVariable;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Patterns;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * The {@code data-sly-text} plugin.
+ */
+@Component
+@Service(Plugin.class)
+@Properties({
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "text"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 9)
+})
+public class TextPlugin extends PluginComponent {
+
+    @Override
+    public PluginInvoke invoke(final Expression expression, PluginCallInfo callInfo, final CompilerContext compilerContext) {
+        return new DefaultPluginInvoke() {
+
+            @Override
+            public void beforeChildren(PushStream stream) {
+                String variable = compilerContext.generateVariable("textContent");
+                stream.emit(new VariableBinding.Start(variable,
+                        compilerContext.adjustToContext(expression, MarkupContext.TEXT).getRoot()));
+                stream.emit(new OutVariable(variable));
+                stream.emit(VariableBinding.END);
+                Patterns.beginStreamIgnore(stream);
+            }
+
+            @Override
+            public void afterChildren(PushStream stream) {
+                Patterns.endStreamIgnore(stream);
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UnwrapPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UnwrapPlugin.java
new file mode 100644
index 0000000..a34ce66
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UnwrapPlugin.java
@@ -0,0 +1,93 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.ExpressionNode;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.BooleanConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.StringConstant;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.Command;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.Conditional;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+/**
+ * The unwrapped plugin
+ */
+@Component
+@Service(Plugin.class)
+@Properties({
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "unwrap"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 125)
+})
+public class UnwrapPlugin extends PluginComponent {
+
+    @Override
+    public PluginInvoke invoke(final Expression expression, PluginCallInfo callInfo, final CompilerContext compilerContext) {
+        return new DefaultPluginInvoke() {
+
+            private final String variable = compilerContext.generateVariable("unwrapCondition");
+            private final Command unwrapTest = new Conditional.Start(variable, false);
+
+            @Override
+            public void beforeElement(PushStream stream, String tagName) {
+                stream.emit(new VariableBinding.Start(variable, testNode()));
+            }
+
+            @Override
+            public void beforeTagOpen(PushStream stream) {
+                stream.emit(unwrapTest);
+            }
+
+            @Override
+            public void afterTagOpen(PushStream stream) {
+                stream.emit(Conditional.END);
+            }
+
+            @Override
+            public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
+                stream.emit(unwrapTest);
+            }
+
+            @Override
+            public void afterTagClose(PushStream stream, boolean isSelfClosing) {
+                stream.emit(Conditional.END);
+            }
+
+            @Override
+            public void afterElement(PushStream stream) {
+                stream.emit(VariableBinding.END);
+            }
+
+            private ExpressionNode testNode() {
+                return (isEmptyExpression(expression.getRoot())) ? BooleanConstant.TRUE : expression.getRoot();
+            }
+
+            private boolean isEmptyExpression(ExpressionNode node) {
+                return node instanceof StringConstant && ((StringConstant) node).getText().isEmpty();
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UsePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UsePlugin.java
new file mode 100644
index 0000000..e2ecd52
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/impl/plugin/UsePlugin.java
@@ -0,0 +1,68 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.impl.plugin;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.Expression;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.MapLiteral;
+import org.apache.sling.scripting.sightly.impl.compiler.expression.node.RuntimeCall;
+import org.apache.sling.scripting.sightly.impl.compiler.ris.command.VariableBinding;
+import org.apache.sling.scripting.sightly.impl.compiler.common.DefaultPluginInvoke;
+import org.apache.sling.scripting.sightly.impl.compiler.frontend.CompilerContext;
+import org.apache.sling.scripting.sightly.impl.compiler.util.stream.PushStream;
+
+@Component
+@Service
+@Properties({
+        @Property(name = "service.description", value = "Sightly Use Block Plugin"),
+        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "use"),
+        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 1)
+})
+public class UsePlugin extends PluginComponent {
+
+    public static final String FUNCTION_NAME = "use";
+
+    private static final String DEFAULT_VARIABLE_NAME = "useBean";
+
+    @Override
+    public PluginInvoke invoke(final Expression expression,
+                               final PluginCallInfo callInfo,
+                               final CompilerContext compilerContext) {
+        return new DefaultPluginInvoke() {
+
+            @Override
+            public void beforeElement(PushStream stream, String tagName) {
+                String variableName = decodeVariableName();
+                stream.emit(new VariableBinding.Global(variableName,
+                        new RuntimeCall(FUNCTION_NAME, expression.getRoot(), new MapLiteral(expression.getOptions()))));
+            }
+
+            private String decodeVariableName() {
+                String[] arguments = callInfo.getArguments();
+                if (arguments.length > 0) {
+                    return arguments[0];
+                }
+                return DEFAULT_VARIABLE_NAME;
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/package-info.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/package-info.java
new file mode 100644
index 0000000..804f4de
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/package-info.java
@@ -0,0 +1,22 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+@Version("1.0.0")
+package org.apache.sling.scripting.sightly;
+
+import aQute.bnd.annotation.Version;
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/AttributePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/AttributePlugin.java
deleted file mode 100644
index 40db023..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/AttributePlugin.java
+++ /dev/null
@@ -1,360 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.PropertyAccess;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.html.MarkupUtils;
-
-/**
- * Implementation for the attribute plugin
- */
-@Component
-@Service
-@Properties({
-        @Property(name = "service.description", value = "Sightly Resource Block Plugin"),
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "attribute"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 150)
-})
-public class AttributePlugin extends PluginComponent {
-
-    private static final Logger log = LoggerFactory.getLogger(AttributePlugin.class);
-
-    @Override
-    public PluginInvoke invoke(Expression expression, PluginCallInfo callInfo, CompilerContext compilerContext) {
-        String attributeName = decodeAttributeName(callInfo);
-        if (attributeName != null && MarkupUtils.isSensitiveAttribute(attributeName)) {
-            log.warn("Refusing to generate attribute {} for security reasons", attributeName);
-            return new DefaultPluginInvoke(); //no-op invocation
-        }
-        return (attributeName != null)
-                ? new SingleAttributeInvoke(attributeName, expression, compilerContext)
-                : new MultiAttributeInvoke(expression.getRoot(), compilerContext);
-    }
-
-    private String decodeAttributeName(PluginCallInfo info) {
-        String[] arguments = info.getArguments();
-        if (arguments.length == 0) {
-            return null;
-        }
-        return StringUtils.join(arguments, '-');
-    }
-
-    private final class SingleAttributeInvoke extends DefaultPluginInvoke {
-        private final String attributeName;
-        private final String isTrueValue;
-        private final String escapedAttrValue;
-        private final String shouldDisplayAttribute;
-
-        private boolean writeAtEnd = true;
-        private boolean beforeCall = true;
-        private final String attrValue;
-        private final ExpressionNode node;
-        private final ExpressionNode contentNode;
-
-        private SingleAttributeInvoke(String attributeName, Expression expression, CompilerContext compilerContext) {
-            this.attributeName = attributeName;
-            this.attrValue = compilerContext.generateVariable("attrValue_" + attributeName);
-            this.escapedAttrValue = compilerContext.generateVariable("attrValueEscaped_" + attributeName);
-            this.isTrueValue = compilerContext.generateVariable("isTrueValue_" + attributeName);
-            this.shouldDisplayAttribute = compilerContext.generateVariable("shouldDisplayAttr_" + attributeName);
-            this.node = expression.getRoot();
-            if (!expression.containsOption(Syntax.CONTEXT_OPTION)) {
-                this.contentNode = escapeNodeWithHint(compilerContext, new Identifier(attrValue), MarkupContext.ATTRIBUTE, new StringConstant(attributeName));
-            } else {
-                this.contentNode = new Identifier(attrValue);
-            }
-        }
-
-        @Override
-        public void beforeAttribute(PushStream stream, String attributeName) {
-            if (attributeName.equals(this.attributeName)) {
-                if (beforeCall) {
-                    emitStart(stream);
-                }
-                writeAtEnd = false;
-            }
-        }
-
-        @Override
-        public void beforeAttributeValue(PushStream stream, String attributeName, ExpressionNode attributeValue) {
-            if (attributeName.equals(this.attributeName) && beforeCall) {
-                emitWrite(stream);
-                Patterns.beginStreamIgnore(stream);
-            }
-        }
-
-        @Override
-        public void afterAttributeValue(PushStream stream, String attributeName) {
-            if (attributeName.equals(this.attributeName) && beforeCall) {
-                Patterns.endStreamIgnore(stream);
-            }
-        }
-
-        @Override
-        public void afterAttribute(PushStream stream, String attributeName) {
-            if (attributeName.equals(this.attributeName) && beforeCall) {
-                emitEnd(stream);
-            }
-        }
-
-        @Override
-        public void afterAttributes(PushStream stream) {
-            if (writeAtEnd) {
-                emitStart(stream);
-                stream.emit(new OutText(" " + this.attributeName));
-                emitWrite(stream);
-                emitEnd(stream);
-            }
-        }
-
-        @Override
-        public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
-            if ("attribute".equals(callInfo.getName())) {
-                String attributeName = decodeAttributeName(callInfo);
-                if (this.attributeName.equals(attributeName)) {
-                    beforeCall = false;
-                }
-            }
-        }
-
-        private void emitStart(PushStream stream) {
-            stream.emit(new VariableBinding.Start(attrValue, node));
-            stream.emit(new VariableBinding.Start(escapedAttrValue, contentNode));
-            stream.emit(
-                    new VariableBinding.Start(
-                            shouldDisplayAttribute,
-                            new BinaryOperation(
-                                    BinaryOperator.OR,
-                                    new Identifier(escapedAttrValue),
-                                    new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrValue))
-                            )
-                    )
-            );
-            stream.emit(new Conditional.Start(shouldDisplayAttribute, true));
-        }
-
-        private void emitWrite(PushStream stream) {
-            stream.emit(new VariableBinding.Start(isTrueValue,
-                    new BinaryOperation(BinaryOperator.EQ,
-                            new Identifier(attrValue),
-                            BooleanConstant.TRUE)));
-            stream.emit(new Conditional.Start(isTrueValue, false));
-            stream.emit(new OutText("=\""));
-            stream.emit(new OutVariable(escapedAttrValue));
-            stream.emit(new OutText("\""));
-            stream.emit(Conditional.END);
-            stream.emit(VariableBinding.END);
-        }
-
-        private void emitEnd(PushStream stream) {
-            stream.emit(Conditional.END);
-            stream.emit(VariableBinding.END);
-            stream.emit(VariableBinding.END);
-            stream.emit(VariableBinding.END);
-        }
-    }
-
-    private final class MultiAttributeInvoke extends DefaultPluginInvoke {
-
-        private final ExpressionNode attrMap;
-        private final String attrMapVar;
-        private final CompilerContext compilerContext;
-        private boolean beforeCall = true;
-        private final Set<String> ignored = new HashSet<String>();
-
-        private MultiAttributeInvoke(ExpressionNode attrMap, CompilerContext context) {
-            this.attrMap = attrMap;
-            this.compilerContext = context;
-            this.attrMapVar = context.generateVariable("attrMap");
-        }
-
-        @Override
-        public void beforeAttributes(PushStream stream) {
-            stream.emit(new VariableBinding.Start(attrMapVar, attrMap));
-        }
-
-        @Override
-        public void beforeAttribute(PushStream stream, String attributeName) {
-            ignored.add(attributeName);
-            if (beforeCall) {
-                String attrNameVar = compilerContext.generateVariable("attrName_" + attributeName);
-                String attrValue = compilerContext.generateVariable("mapContains_" + attributeName);
-                stream.emit(new VariableBinding.Start(attrNameVar, new StringConstant(attributeName)));
-                stream.emit(new VariableBinding.Start(attrValue, attributeValueNode(new StringConstant(attributeName))));
-                writeAttribute(stream, attrNameVar, attrValue);
-                stream.emit(new Conditional.Start(attrValue, false));
-            }
-        }
-
-        @Override
-        public void afterAttribute(PushStream stream, String attributeName) {
-            if (beforeCall) {
-                stream.emit(Conditional.END);
-                stream.emit(VariableBinding.END);
-                stream.emit(VariableBinding.END);
-            }
-        }
-
-        @Override
-        public void onPluginCall(PushStream stream, PluginCallInfo callInfo, Expression expression) {
-            if ("attribute".equals(callInfo.getName())) {
-                String attrName = decodeAttributeName(callInfo);
-                if (attrName == null) {
-                    beforeCall = false;
-                } else {
-                    if (!beforeCall) {
-                        ignored.add(attrName);
-                    }
-                }
-            }
-        }
-
-        @Override
-        public void afterAttributes(PushStream stream) {
-            HashMap<String, ExpressionNode> ignoredLiteralMap = new HashMap<String, ExpressionNode>();
-            for (String attr : ignored) {
-                ignoredLiteralMap.put(attr, new BooleanConstant(true));
-            }
-            MapLiteral ignoredLiteral = new MapLiteral(ignoredLiteralMap);
-            String ignoredVar = compilerContext.generateVariable("ignoredAttributes");
-            stream.emit(new VariableBinding.Start(ignoredVar, ignoredLiteral));
-            String attrNameVar = compilerContext.generateVariable("attrName");
-            String attrNameEscaped = compilerContext.generateVariable("attrNameEscaped");
-            String attrIndex = compilerContext.generateVariable("attrIndex");
-            stream.emit(new Loop.Start(attrMapVar, attrNameVar, attrIndex));
-            stream.emit(new VariableBinding.Start(attrNameEscaped, escapeNode(new Identifier(attrNameVar), MarkupContext.ATTRIBUTE_NAME, null)));
-            stream.emit(new Conditional.Start(attrNameEscaped, true));
-            String isIgnoredAttr = compilerContext.generateVariable("isIgnoredAttr");
-            stream.emit(new VariableBinding.Start(isIgnoredAttr, new PropertyAccess(new Identifier(ignoredVar), new Identifier(attrNameVar))));
-            stream.emit(new Conditional.Start(isIgnoredAttr, false));
-            String attrContent = compilerContext.generateVariable("attrContent");
-            stream.emit(new VariableBinding.Start(attrContent, attributeValueNode(new Identifier(attrNameVar))));
-            writeAttribute(stream, attrNameEscaped, attrContent);
-            stream.emit(VariableBinding.END); //end of attrContent
-            stream.emit(Conditional.END);
-            stream.emit(VariableBinding.END);
-            stream.emit(Conditional.END);
-            stream.emit(VariableBinding.END);
-            stream.emit(Loop.END);
-            stream.emit(VariableBinding.END);
-            stream.emit(VariableBinding.END);
-        }
-
-        private void writeAttribute(PushStream stream, String attrNameVar, String attrContentVar) {
-            String escapedContent = compilerContext.generateVariable("attrContentEscaped");
-            String shouldDisplayAttribute = compilerContext.generateVariable("shouldDisplayAttr");
-            stream.emit(new VariableBinding.Start(escapedContent, escapedExpression(new Identifier(attrContentVar), new Identifier(attrNameVar))));
-            stream.emit(
-                    new VariableBinding.Start(
-                            shouldDisplayAttribute,
-                            new BinaryOperation(
-                                    BinaryOperator.OR,
-                                    new Identifier(escapedContent),
-                                    new BinaryOperation(BinaryOperator.EQ, new StringConstant("false"), new Identifier(attrContentVar))
-                            )
-                    )
-            );
-            stream.emit(new Conditional.Start(shouldDisplayAttribute, true));
-            stream.emit(new OutText(" "));   //write("attrName");
-            writeAttributeName(stream, attrNameVar);
-            writeAttributeValue(stream, escapedContent, attrContentVar);
-            stream.emit(Conditional.END);
-            stream.emit(VariableBinding.END);
-            stream.emit(VariableBinding.END);
-        }
-
-        private void writeAttributeName(PushStream stream, String attrNameVar) {
-            stream.emit(new OutVariable(attrNameVar));
-        }
-
-        private void writeAttributeValue(PushStream stream, String escapedContent, String attrContentVar) {
-
-            String isTrueVar = compilerContext.generateVariable("isTrueAttr"); // holds the comparison (attrValue == true)
-            stream.emit(new VariableBinding.Start(isTrueVar, //isTrueAttr = (attrContent == true)
-                    new BinaryOperation(BinaryOperator.EQ, new Identifier(attrContentVar), BooleanConstant.TRUE)));
-            stream.emit(new Conditional.Start(isTrueVar, false)); //if (!isTrueAttr)
-            stream.emit(new OutText("=\""));
-
-            stream.emit(new OutVariable(escapedContent)); //write(escapedContent)
-
-            stream.emit(new OutText("\""));
-            stream.emit(Conditional.END); //end if isTrueAttr
-            stream.emit(VariableBinding.END); //end scope for isTrueAttr
-        }
-
-        private ExpressionNode attributeValueNode(ExpressionNode attributeNameNode) {
-            return new PropertyAccess(new Identifier(attrMapVar), attributeNameNode);
-        }
-
-        private ExpressionNode escapedExpression(ExpressionNode original, ExpressionNode hint) {
-            return escapeNode(original, MarkupContext.ATTRIBUTE, hint);
-        }
-
-        private ExpressionNode escapeNode(ExpressionNode node, MarkupContext markupContext, ExpressionNode hint) {
-            return escapeNodeWithHint(compilerContext, node, markupContext, hint);
-        }
-    }
-
-    private static ExpressionNode escapeNodeWithHint(CompilerContext compilerContext, ExpressionNode node, MarkupContext markupContext, ExpressionNode hint) {
-        if (hint != null) {
-            //todo: this is not the indicated way to escape via XSS. Correct after modifying the compiler context API
-            return new RuntimeCall("xss", node, new StringConstant(markupContext.getName()), hint);
-        }
-        return compilerContext.adjustToContext(new Expression(node), markupContext).getRoot();
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/CallPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/CallPlugin.java
deleted file mode 100644
index c9ef967..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/CallPlugin.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginException;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.*;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * Implementation for the {@code data-sly-call} plugin.
- */
-@Component
-@Service(Plugin.class)
-@Properties({
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "call"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 3)
-})
-public class CallPlugin extends PluginComponent {
-
-    @Override
-    public PluginInvoke invoke(final Expression expression,
-                               final PluginCallInfo callInfo,
-                               final CompilerContext compilerContext) {
-        if (callInfo.getArguments().length > 0) {
-            throw new PluginException(this, "Call plugin should have no arguments");
-        }
-        return new DefaultPluginInvoke() {
-
-            @Override
-            public void beforeChildren(PushStream stream) {
-                String templateVar = compilerContext.generateVariable("templateVar");
-                String argsVar = compilerContext.generateVariable("templateOptions");
-                MapLiteral args = new MapLiteral(expression.getOptions());
-                stream.emit(new VariableBinding.Start(templateVar, expression.getRoot()));
-                stream.emit(new VariableBinding.Start(argsVar, args));
-                stream.emit(new Procedure.Call(templateVar, argsVar));
-                stream.emit(VariableBinding.END);
-                stream.emit(VariableBinding.END);
-                //ignoring everything else
-                Patterns.beginStreamIgnore(stream);
-            }
-
-            @Override
-            public void afterChildren(PushStream stream) {
-                Patterns.endStreamIgnore(stream);
-            }
-
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ElementPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ElementPlugin.java
deleted file mode 100644
index c448cd6..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ElementPlugin.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.plugin;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutText;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * Implementation for the {@code data-sly-element} plugin.
- */
-@Component
-@Service
-@Properties({
-        @Property(name = "service.description", value = "Sightly Resource Block Plugin"),
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "element"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = PluginComponent.DEFAULT_PRIORITY)
-})
-public class ElementPlugin extends PluginComponent {
-
-    @Override
-    public PluginInvoke invoke(final Expression expression, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
-
-        return new DefaultPluginInvoke() {
-
-            private final ExpressionNode node = compilerContext.adjustToContext(expression, MarkupContext.ELEMENT_NAME).getRoot();
-            private String tagVar = compilerContext.generateVariable("tagVar");
-
-            @Override
-            public void beforeElement(PushStream stream, String tagName) {
-                stream.emit(new VariableBinding.Start(tagVar, node));
-            }
-
-            @Override
-            public void beforeTagOpen(PushStream stream) {
-                stream.emit(new Conditional.Start(tagVar, true));
-                stream.emit(new OutText("<"));
-                stream.emit(new OutVariable(tagVar));
-                stream.emit(Conditional.END);
-                stream.emit(new Conditional.Start(tagVar, false));
-            }
-
-            @Override
-            public void beforeAttributes(PushStream stream) {
-                stream.emit(Conditional.END);
-            }
-
-            @Override
-            public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
-                if (!isSelfClosing) {
-                    stream.emit(new Conditional.Start(tagVar, true));
-                    stream.emit(new OutText("</"));
-                    stream.emit(new OutVariable(tagVar));
-                    stream.emit(new OutText(">"));
-                    stream.emit(Conditional.END);
-                }
-                stream.emit(new Conditional.Start(tagVar, false));
-            }
-
-            @Override
-            public void afterTagClose(PushStream stream, boolean isSelfClosing) {
-                stream.emit(Conditional.END);
-            }
-
-            @Override
-            public void afterElement(PushStream stream) {
-                stream.emit(VariableBinding.END);
-            }
-        };
-
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/IncludePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/IncludePlugin.java
deleted file mode 100644
index 310a121..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/IncludePlugin.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.plugin;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * Implementation for the include plugin
- */
-@Component
-@Service(Plugin.class)
-@Properties({
-        @Property(name = "service.description", value = "Sightly Include Block Plugin"),
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "include"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = PluginComponent.DEFAULT_PRIORITY)
-})
-public class IncludePlugin extends PluginComponent {
-
-    public static final String FUNCTION = "include";
-
-    @Override
-    public PluginInvoke invoke(final Expression expression, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
-        return new DefaultPluginInvoke() {
-
-            @Override
-            public void beforeChildren(PushStream stream) {
-                String includedContentVar = compilerContext.generateVariable("includedResult");
-                String pathVar = compilerContext.generateVariable("includePath");
-                stream.emit(new VariableBinding.Start(pathVar, expression.getRoot()));
-                stream.emit(new VariableBinding.Start(includedContentVar,
-                        new RuntimeCall(FUNCTION, new Identifier(pathVar), new MapLiteral(expression.getOptions()))));
-                stream.emit(new OutVariable(includedContentVar));
-                stream.emit(VariableBinding.END); //end includedContentVar
-                stream.emit(VariableBinding.END); //end pathVar
-                Patterns.beginStreamIgnore(stream);
-            }
-
-            @Override
-            public void afterChildren(PushStream stream) {
-                Patterns.endStreamIgnore(stream);
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ListPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ListPlugin.java
deleted file mode 100644
index 238cbd8..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ListPlugin.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import java.util.HashMap;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BinaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.Identifier;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.NumericConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperation;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.UnaryOperator;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.Syntax;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.*;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Loop;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * Default implementation of the {@code data-sly-list} plugin.
- */
-@Component()
-@Service(Plugin.class)
-@Properties({
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "list"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 130)
-})
-public class ListPlugin extends PluginComponent {
-
-
-    private static final String INDEX = "index";
-    private static final String COUNT = "count";
-    private static final String FIRST = "first";
-    private static final String MIDDLE = "middle";
-    private static final String LAST = "last";
-    private static final String ODD = "odd";
-    private static final String EVEN = "even";
-
-    @Override
-    public PluginInvoke invoke(final Expression expression, final PluginCallInfo callInfo, final CompilerContext compilerContext) {
-        return new DefaultPluginInvoke() {
-
-            private String listVariable = compilerContext.generateVariable("collectionVar");
-            private String collectionSizeVar = compilerContext.generateVariable("size");
-
-            @Override
-            public void beforeElement(PushStream stream, String tagName) {
-                stream.emit(new VariableBinding.Start(listVariable, expression.getRoot()));
-                stream.emit(new VariableBinding.Start(collectionSizeVar,
-                        new UnaryOperation(UnaryOperator.LENGTH, new Identifier(listVariable))));
-                stream.emit(new Conditional.Start(collectionSizeVar, true));
-
-            }
-
-            @Override
-            public void beforeChildren(PushStream stream) {
-                String itemVariable = decodeItemVariable();
-                String loopStatusVar = Syntax.itemLoopStatusVariable(itemVariable);
-                String indexVariable = compilerContext.generateVariable("index");
-                stream.emit(new Loop.Start(listVariable, itemVariable, indexVariable));
-                stream.emit(new VariableBinding.Start(loopStatusVar, buildStatusObj(indexVariable, collectionSizeVar)));
-            }
-
-            @Override
-            public void afterChildren(PushStream stream) {
-                stream.emit(VariableBinding.END);
-                stream.emit(Loop.END);
-            }
-
-            @Override
-            public void afterElement(PushStream stream) {
-                stream.emit(Conditional.END);
-                stream.emit(VariableBinding.END);
-                stream.emit(VariableBinding.END);
-            }
-
-
-            private String decodeItemVariable() {
-                String[] args = callInfo.getArguments();
-                if (args.length > 0) {
-                    return args[0];
-                }
-                return Syntax.DEFAULT_LIST_ITEM_VAR_NAME;
-            }
-
-            private MapLiteral buildStatusObj(String indexVar, String sizeVar) {
-                HashMap<String, ExpressionNode> obj = new HashMap<String, ExpressionNode>();
-                Identifier indexId = new Identifier(indexVar);
-                BinaryOperation firstExpr = new BinaryOperation(BinaryOperator.EQ, indexId, NumericConstant.ZERO);
-                BinaryOperation lastExpr = new BinaryOperation(
-                        BinaryOperator.EQ,
-                        indexId,
-                        new BinaryOperation(BinaryOperator.SUB, new Identifier(sizeVar), NumericConstant.ONE));
-                obj.put(INDEX, indexId);
-                obj.put(COUNT, new BinaryOperation(BinaryOperator.ADD, indexId, NumericConstant.ONE));
-                obj.put(FIRST, firstExpr);
-                obj.put(MIDDLE, new UnaryOperation(
-                        UnaryOperator.NOT,
-                        new BinaryOperation(BinaryOperator.OR, firstExpr, lastExpr)));
-                obj.put(LAST, lastExpr);
-                obj.put(ODD, parityCheck(indexId, NumericConstant.ZERO));
-                obj.put(EVEN, parityCheck(indexId, NumericConstant.ONE));
-                return new MapLiteral(obj);
-            }
-
-            private ExpressionNode parityCheck(ExpressionNode numericExpression, NumericConstant expected) {
-                return new BinaryOperation(
-                        BinaryOperator.EQ,
-                        new BinaryOperation(BinaryOperator.REM, numericExpression, NumericConstant.TWO),
-                        expected);
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/PluginComponent.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/PluginComponent.java
deleted file mode 100644
index 1e5eda4..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/PluginComponent.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import java.util.Dictionary;
-
-import org.apache.sling.commons.osgi.PropertiesUtil;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.osgi.service.component.ComponentContext;
-import org.osgi.service.component.ComponentException;
-
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-
-/**
- * Component plugin implementation
- */
-public abstract class PluginComponent implements Plugin {
-
-    public static final int DEFAULT_PRIORITY = 100;
-
-    private int priority;
-    private String name;
-
-    @Override
-    public int priority() {
-        return priority;
-    }
-
-    @Override
-    public String name() {
-        return name;
-    }
-
-    @Override
-    public int compareTo(Plugin o) {
-        return this.priority() - o.priority();
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    protected void activate(ComponentContext componentContext) {
-        Dictionary properties = componentContext.getProperties();
-        priority = PropertiesUtil.toInteger(properties.get(SCR_PROP_NAME_PRIORITY), DEFAULT_PRIORITY);
-        name = PropertiesUtil.toString(properties.get(SCR_PROP_NAME_BLOCK_NAME), null);
-        if (name == null) {
-            throw new ComponentException("The plugin hasn't a valid name specified");
-        }
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ResourcePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ResourcePlugin.java
deleted file mode 100644
index 551ca5d..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/ResourcePlugin.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * The resource plugin
- */
-@Component
-@Service(Plugin.class)
-@Properties({
-        @Property(name = "service.description", value = "Sightly Resource Block Plugin"),
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "resource"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = PluginComponent.DEFAULT_PRIORITY)
-})
-public class ResourcePlugin extends PluginComponent {
-
-    public static final String FUNCTION = "includeResource";
-
-    @Override
-    public PluginInvoke invoke(final Expression expression,
-                               final PluginCallInfo callInfo,
-                               final CompilerContext compilerContext) {
-
-        return new DefaultPluginInvoke() {
-
-            private Map<String, ExpressionNode> expressionOptions = new HashMap<String, ExpressionNode>(expression.getOptions());
-
-            @Override
-            public void beforeChildren(PushStream stream) {
-                String resourceVar = compilerContext.generateVariable("resourceContent");
-                stream.emit(new VariableBinding.Start(resourceVar,
-                        new RuntimeCall(FUNCTION,
-                                expression.getRoot(), new MapLiteral(expressionOptions))));
-                stream.emit(new OutVariable(resourceVar));
-                stream.emit(VariableBinding.END);
-                Patterns.beginStreamIgnore(stream);
-            }
-
-            @Override
-            public void afterChildren(PushStream stream) {
-                Patterns.endStreamIgnore(stream);
-            }
-
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TemplatePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TemplatePlugin.java
deleted file mode 100644
index 67ca052..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TemplatePlugin.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginException;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Procedure;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * The template plugin
- */
-@Component
-@Service
-@Properties({
-        @Property(name = "service.description", value = "Sightly Template Block Plugin"),
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "template"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = Integer.MIN_VALUE)
-})
-public class TemplatePlugin extends PluginComponent {
-    @Override
-    public PluginInvoke invoke(final Expression expressionNode,
-                               final PluginCallInfo callInfo,
-                               CompilerContext compilerContext) {
-        return new DefaultPluginInvoke() {
-
-            @Override
-            public void beforeTagOpen(PushStream stream) {
-                //ignoring template tags
-                Patterns.beginStreamIgnore(stream);
-            }
-
-            @Override
-            public void beforeElement(PushStream stream, String tagName) {
-                String name = decodeName();
-                Set<String> parameters = extractParameters();
-                stream.emit(new Procedure.Start(name, parameters));
-            }
-
-            @Override
-            public void afterElement(PushStream stream) {
-                stream.emit(Procedure.END);
-            }
-
-            @Override
-            public void afterTagOpen(PushStream stream) {
-                Patterns.endStreamIgnore(stream); //resuming normal operation
-            }
-
-            @Override
-            public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
-                Patterns.beginStreamIgnore(stream); //ignoring closing tags
-            }
-
-            @Override
-            public void afterTagClose(PushStream stream, boolean isSelfClosing) {
-                Patterns.endStreamIgnore(stream);
-            }
-
-            private Set<String> extractParameters() {
-                Map<String, ExpressionNode> options = expressionNode.getOptions();
-                return options.keySet();
-            }
-
-            private String decodeName() {
-                String[] arguments = callInfo.getArguments();
-                if (arguments.length == 0) {
-                    throw new PluginException(TemplatePlugin.this, "template name was not provided");
-                }
-                return arguments[0];
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TestPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TestPlugin.java
deleted file mode 100644
index 52d2507..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TestPlugin.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * Implementation for the test plugin
- */
-@Component
-@Service(Plugin.class)
-@Properties({
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "test"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 1)
-})
-public class TestPlugin extends PluginComponent {
-
-
-    @Override
-    public PluginInvoke invoke(final Expression expressionNode,
-                               final PluginCallInfo callInfo,
-                               final CompilerContext compilerContext) {
-
-        return new DefaultPluginInvoke() {
-
-            private boolean globalBinding;
-
-            @Override
-            public void beforeElement(PushStream stream, String tagName) {
-                String variableName = decodeVariableName();
-                globalBinding = variableName != null;
-                if (variableName == null) {
-                    variableName = compilerContext.generateVariable("testVariable");
-                }
-                if (globalBinding) {
-                    stream.emit(new VariableBinding.Global(variableName, expressionNode.getRoot()));
-                } else {
-                    stream.emit(new VariableBinding.Start(variableName, expressionNode.getRoot()));
-                }
-                stream.emit(new Conditional.Start(variableName, true));
-            }
-
-            @Override
-            public void afterElement(PushStream stream) {
-                stream.emit(Conditional.END);
-                if (!globalBinding) {
-                    stream.emit(VariableBinding.END);
-                }
-            }
-
-            private String decodeVariableName() {
-                String[] args = callInfo.getArguments();
-                if (args.length > 0) {
-                    return args[0];
-                }
-                return null;
-            }
-
-        };
-    }
-
-
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TextPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TextPlugin.java
deleted file mode 100644
index da9ea99..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/TextPlugin.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.MarkupContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.OutVariable;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Patterns;
-
-/**
- * The {@code data-sly-text} plugin.
- */
-@Component
-@Service(Plugin.class)
-@Properties({
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "text"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 9)
-})
-public class TextPlugin extends PluginComponent {
-
-    @Override
-    public PluginInvoke invoke(final Expression expression, PluginCallInfo callInfo, final CompilerContext compilerContext) {
-        return new DefaultPluginInvoke() {
-
-            @Override
-            public void beforeChildren(PushStream stream) {
-                String variable = compilerContext.generateVariable("textContent");
-                stream.emit(new VariableBinding.Start(variable,
-                        compilerContext.adjustToContext(expression, MarkupContext.TEXT).getRoot()));
-                stream.emit(new OutVariable(variable));
-                stream.emit(VariableBinding.END);
-                Patterns.beginStreamIgnore(stream);
-            }
-
-            @Override
-            public void afterChildren(PushStream stream) {
-                Patterns.endStreamIgnore(stream);
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UnwrapPlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UnwrapPlugin.java
deleted file mode 100644
index deccc82..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UnwrapPlugin.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.ExpressionNode;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.BooleanConstant;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.Conditional;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.StringConstant;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.ris.Command;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-
-/**
- * The unwrapped plugin
- */
-@Component
-@Service(Plugin.class)
-@Properties({
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "unwrap"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 125)
-})
-public class UnwrapPlugin extends PluginComponent {
-
-    @Override
-    public PluginInvoke invoke(final Expression expression,
-                               PluginCallInfo callInfo,
-                               final CompilerContext compilerContext) {
-        return new DefaultPluginInvoke() {
-
-            private final String variable = compilerContext.generateVariable("unwrapCondition");
-            private final Command unwrapTest = new Conditional.Start(variable, false);
-
-            @Override
-            public void beforeElement(PushStream stream, String tagName) {
-                stream.emit(new VariableBinding.Start(variable, testNode()));
-            }
-
-            @Override
-            public void beforeTagOpen(PushStream stream) {
-                stream.emit(unwrapTest);
-            }
-
-            @Override
-            public void afterTagOpen(PushStream stream) {
-                stream.emit(Conditional.END);
-            }
-
-            @Override
-            public void beforeTagClose(PushStream stream, boolean isSelfClosing) {
-                stream.emit(unwrapTest);
-            }
-
-            @Override
-            public void afterTagClose(PushStream stream, boolean isSelfClosing) {
-                stream.emit(Conditional.END);
-            }
-
-            @Override
-            public void afterElement(PushStream stream) {
-                stream.emit(VariableBinding.END);
-            }
-
-            private ExpressionNode testNode() {
-                return (isEmptyExpression(expression.getRoot())) ? BooleanConstant.TRUE : expression.getRoot();
-            }
-
-            private boolean isEmptyExpression(ExpressionNode node) {
-                return node instanceof StringConstant && ((StringConstant) node).getText().isEmpty();
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UsePlugin.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UsePlugin.java
deleted file mode 100644
index 5493daa..0000000
--- a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/plugin/UsePlugin.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.plugin;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Service;
-
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.MapLiteral;
-import org.apache.sling.scripting.sightly.compiler.api.expression.node.RuntimeCall;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.api.ris.command.VariableBinding;
-import org.apache.sling.scripting.sightly.compiler.common.DefaultPluginInvoke;
-import org.apache.sling.scripting.sightly.compiler.util.stream.PushStream;
-import org.apache.sling.scripting.sightly.compiler.api.expression.Expression;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.CompilerContext;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.Plugin;
-import org.apache.sling.scripting.sightly.compiler.api.plugin.PluginCallInfo;
-
-@Component
-@Service
-@Properties({
-        @Property(name = "service.description", value = "Sightly Use Block Plugin"),
-        @Property(name = Plugin.SCR_PROP_NAME_BLOCK_NAME, value = "use"),
-        @Property(name = Plugin.SCR_PROP_NAME_PRIORITY, intValue = 1)
-})
-public class UsePlugin extends PluginComponent {
-
-    public static final String FUNCTION_NAME = "use";
-
-    private static final String DEFAULT_VARIABLE_NAME = "useBean";
-
-    @Override
-    public PluginInvoke invoke(final Expression expression,
-                               final PluginCallInfo callInfo,
-                               final CompilerContext compilerContext) {
-        return new DefaultPluginInvoke() {
-
-            @Override
-            public void beforeElement(PushStream stream, String tagName) {
-                String variableName = decodeVariableName();
-                stream.emit(new VariableBinding.Global(variableName,
-                        new RuntimeCall(FUNCTION_NAME, expression.getRoot(), new MapLiteral(expression.getOptions()))));
-            }
-
-            private String decodeVariableName() {
-                String[] arguments = callInfo.getArguments();
-                if (arguments.length > 0) {
-                    return arguments[0];
-                }
-                return DEFAULT_VARIABLE_NAME;
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/Use.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/Use.java
new file mode 100644
index 0000000..5b07410
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/Use.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.pojo;
+
+import javax.script.Bindings;
+
+import aQute.bnd.annotation.ConsumerType;
+
+/**
+ * The <code>Use</code> interface can be implemented by Java objects
+ * which are instantiated as part of processing {@code data-sly-use}
+ * attributes.
+ *
+ * @see <a href="http://docs.adobe.com/docs/en/aem/6-0/develop/sightly.html#use">Sightly Block Statements - Use</a>
+ */
+@ConsumerType
+public interface Use {
+
+    /**
+     * Called to initialize the Java object with the current Java Scripting
+     * API bindings.
+     * <p>
+     * This method is called only if the object has been instantiated by
+     * Sightly as part of processing the {@code data-sly-use} attribute.
+     * <p>
+     * The Java Scripting API bindings provide all the global variables
+     * known to a script being executed. Consider these bindings of a map
+     * from variable name to the variable's value.
+     *
+     * @param bindings The Java Scripting API bindings.
+     */
+    public void init(Bindings bindings);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/package-info.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/package-info.java
new file mode 100644
index 0000000..f795d12
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/pojo/package-info.java
@@ -0,0 +1,22 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+@Version("1.0.0")
+package org.apache.sling.scripting.sightly.pojo;
+
+import aQute.bnd.annotation.Version;
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/RenderContext.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/RenderContext.java
new file mode 100644
index 0000000..e539ccb
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/RenderContext.java
@@ -0,0 +1,105 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.render;
+
+import java.util.Collection;
+import java.util.Map;
+
+import javax.script.Bindings;
+
+import org.apache.sling.scripting.sightly.extension.ExtensionInstance;
+import org.apache.sling.scripting.sightly.extension.RuntimeExtension;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderUnit;
+
+import aQute.bnd.annotation.ProviderType;
+
+/**
+ * The {@code RenderContext} defines the context for executing Sightly scripts (see {@link RenderUnit}).
+ */
+@ProviderType
+public interface RenderContext {
+
+    /**
+     * Returns the map of script bindings available to Sightly scripts.
+     *
+     * @return the global bindings for a script
+     */
+    Bindings getBindings();
+
+    /**
+     * Call one of the registered {@link RuntimeExtension}s.
+     *
+     * @param functionName the name under which the extension is registered
+     * @param arguments    the extension's arguments
+     * @return the {@link ExtensionInstance}'s result
+     */
+    Object call(String functionName, Object... arguments);
+
+    /**
+     * Retrieve the specified property from the given object
+     *
+     * @param target   - the target object
+     * @param property - the property name
+     * @return - the value of the property or null if the object has no such property
+     */
+    Object resolveProperty(Object target, Object property);
+
+    /**
+     * Convert the given object to a string.
+     *
+     * @param target - the target object
+     * @return - the string representation of the object
+     */
+    String toString(Object target);
+
+    /**
+     * Convert the given object to a boolean value
+     *
+     * @param object - the target object
+     * @return - the boolean representation of that object
+     */
+    boolean toBoolean(Object object);
+
+    /**
+     * Coerce the object to a numeric value
+     *
+     * @param object - the target object
+     * @return - the numeric representation
+     */
+    Number toNumber(Object object);
+
+    boolean isCollection(Object obj);
+
+    /**
+     * Force the conversion of the object to a collection
+     *
+     * @param object - the target object
+     * @return the collection representation of the object
+     */
+    Collection<Object> toCollection(Object object);
+
+    /**
+     * Force the conversion of the target object to a map
+     *
+     * @param object - the target object
+     * @return - a map representation of the object. Default is an empty map
+     */
+    Map toMap(Object object);
+
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/package-info.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/package-info.java
new file mode 100644
index 0000000..90bc8b7
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/render/package-info.java
@@ -0,0 +1,22 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+@Version("1.0.0")
+package org.apache.sling.scripting.sightly.render;
+
+import aQute.bnd.annotation.Version;
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/ProviderOutcome.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/ProviderOutcome.java
new file mode 100644
index 0000000..787a81e
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/ProviderOutcome.java
@@ -0,0 +1,92 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.use;
+
+/**
+ * Result returned by a use provider
+ */
+public final class ProviderOutcome {
+
+    private boolean success;
+    private Object result;
+
+    private static final ProviderOutcome FAILURE = new ProviderOutcome(false, null);
+
+    /**
+     * Create a successful outcome
+     * @param result the result
+     * @return a successful result
+     */
+    public static ProviderOutcome success(Object result) {
+        return new ProviderOutcome(true, result);
+    }
+
+    /**
+     * Create a failed outcome
+     * @return a failed outcome
+     */
+    public static ProviderOutcome failure() {
+        return FAILURE;
+    }
+
+    /**
+     * If the given obj is not null return a successful outcome, with the given result.
+     * Otherwise, return failure
+     * @param obj the result
+     * @return an outcome based on whether the parameter is null or not
+     */
+    public static ProviderOutcome notNullOrFailure(Object obj) {
+        return (obj == null) ? failure() : success(obj);
+    }
+
+    private ProviderOutcome(boolean success, Object result) {
+        this.success = success;
+        this.result = result;
+    }
+
+    /**
+     * Check if the outcome has been successful
+     * @return the outcome success status
+     */
+    public boolean isSuccess() {
+        return success;
+    }
+
+    /**
+     * Check whether the outcome is a failure
+     * @return the outcome failure status
+     */
+    public boolean isFailure() {
+        return !isSuccess();
+    }
+
+    /**
+     * Get the result in this outcome
+     *
+     * @return the result of the container
+     * @throws java.lang.UnsupportedOperationException if the outcome is a failure
+     */
+    public Object getResult() {
+        if (!success) {
+            throw new UnsupportedOperationException("Outcome has not been successful");
+        }
+        return result;
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/SightlyUseException.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/SightlyUseException.java
new file mode 100644
index 0000000..0e35232
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/SightlyUseException.java
@@ -0,0 +1,42 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.use;
+
+import org.apache.sling.scripting.sightly.SightlyException;
+
+/**
+ * Exception raised by the use resolving mechanism
+ */
+public class SightlyUseException extends SightlyException {
+    public SightlyUseException() {
+    }
+
+    public SightlyUseException(String message) {
+        super(message);
+    }
+
+    public SightlyUseException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public SightlyUseException(Throwable cause) {
+        super(cause);
+    }
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/UseProvider.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/UseProvider.java
new file mode 100644
index 0000000..358e46a
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/UseProvider.java
@@ -0,0 +1,44 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.use;
+
+import javax.script.Bindings;
+
+import org.apache.sling.scripting.sightly.render.RenderContext;
+
+import aQute.bnd.annotation.ConsumerType;
+
+/**
+ * Provides instances for the use API. Providers are tried in the order
+ * of their priority until one is found which can provide a non-null instance
+ */
+@ConsumerType
+public interface UseProvider {
+
+    /**
+     * Provide an instance based on the given identifier
+     * @param identifier the identifier of the dependency
+     * @param renderContext the current rendering context
+     * @param arguments Specific arguments provided by the use plugin
+     * @return a container with the instance that corresponds to the identifier. If the identifier cannot be
+     * handled by this provider, a failed outcome is returned
+     */
+    ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments);
+}
diff --git a/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/package-info.java b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/package-info.java
new file mode 100644
index 0000000..2564bea
--- /dev/null
+++ b/contrib/scripting/sightly/engine/src/main/java/org/apache/sling/scripting/sightly/use/package-info.java
@@ -0,0 +1,22 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+@Version("1.0.0")
+package org.apache.sling.scripting.sightly.use;
+
+import aQute.bnd.annotation.Version;
diff --git a/contrib/scripting/sightly/engine/src/main/resources/templates/compiled_unit_template.txt b/contrib/scripting/sightly/engine/src/main/resources/templates/compiled_unit_template.txt
index f6db3be..2a21417 100644
--- a/contrib/scripting/sightly/engine/src/main/resources/templates/compiled_unit_template.txt
+++ b/contrib/scripting/sightly/engine/src/main/resources/templates/compiled_unit_template.txt
@@ -18,24 +18,20 @@
  ******************************************************************************/
 package ##PackageName##;
 
+import java.io.PrintWriter;
 import java.util.Collection;
 import javax.script.Bindings;
 
-import org.apache.sling.scripting.sightly.api.ObjectModel;
-import org.apache.sling.scripting.sightly.api.StackedWriter;
-import org.apache.sling.scripting.sightly.api.SightlyRuntime;
-import org.apache.sling.scripting.sightly.api.BaseRenderUnit;
-import org.apache.sling.scripting.sightly.api.RenderContext;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderUnit;
+import org.apache.sling.scripting.sightly.impl.engine.runtime.RenderContextImpl;
 
-public final class ##ClassName## extends BaseRenderUnit {
+public final class ##ClassName## extends RenderUnit {
 
     @Override
-    protected final void render(StackedWriter out,
+    protected final void render(PrintWriter out,
                                 Bindings bindings,
                                 Bindings arguments,
-                                ObjectModel objectModel,
-                                SightlyRuntime runtime,
-                                RenderContext renderContext) {
+                                RenderContextImpl renderContext) {
 // Main Template Body -----------------------------------------------------------------------------
 
 ##MainBody##
diff --git a/contrib/scripting/sightly/engine/src/main/resources/templates/subtemplate.txt b/contrib/scripting/sightly/engine/src/main/resources/templates/subtemplate.txt
index 48827b9..caf594d 100644
--- a/contrib/scripting/sightly/engine/src/main/resources/templates/subtemplate.txt
+++ b/contrib/scripting/sightly/engine/src/main/resources/templates/subtemplate.txt
@@ -16,15 +16,13 @@
  * specific language governing permissions and limitations
  * under the License.
  ******************************************************************************/
-addSubTemplate("##Name##", new BaseRenderUnit() {
+addSubTemplate("##Name##", new RenderUnit() {
 
     @Override
-    protected final void render(StackedWriter out,
+    protected final void render(PrintWriter out,
                                 Bindings bindings,
                                 Bindings arguments,
-                                ObjectModel objectModel,
-                                SightlyRuntime runtime,
-                                RenderContext renderContext) {
+                                RenderContextImpl renderContext) {
 // Main Sub-Template Body -------------------------------------------------------------------------
 
 ##MainBody##
diff --git a/contrib/scripting/sightly/js-use-provider/pom.xml b/contrib/scripting/sightly/js-use-provider/pom.xml
index 8fbe66a..3ac4e73 100644
--- a/contrib/scripting/sightly/js-use-provider/pom.xml
+++ b/contrib/scripting/sightly/js-use-provider/pom.xml
@@ -79,11 +79,18 @@
     <!-- D E P E N D E N C I E S                                                 -->
     <!-- ======================================================================= -->
     <dependencies>
+        <!-- OSGI -->
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <scope>provided</scope>
+        </dependency>
         <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.compendium</artifactId>
             <scope>provided</scope>
         </dependency>
+
         <!-- Sling -->
         <dependency>
             <groupId>org.apache.sling</groupId>
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Console.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Console.java
deleted file mode 100644
index 885c602..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Console.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js;
-
-import org.slf4j.Logger;
-
-/**
- * The console object, used for logging
- */
-public class Console {
-
-    private final Logger logger;
-
-    public Console(Logger logger) {
-        this.logger = logger;
-    }
-
-    public void log(String msg) {
-        logger.info(msg);
-    }
-
-    public void warn(String msg) {
-        logger.warn(msg);
-    }
-
-    public void error(String msg) {
-        logger.error(msg);
-    }
-
-    public void debug(String msg) {
-        logger.debug(msg);
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsEnvironment.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsEnvironment.java
deleted file mode 100644
index 58686a7..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsEnvironment.java
+++ /dev/null
@@ -1,174 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js;
-
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-
-import javax.script.Bindings;
-import javax.script.ScriptContext;
-import javax.script.ScriptEngine;
-import javax.script.ScriptException;
-import javax.script.SimpleBindings;
-import javax.script.SimpleScriptContext;
-
-import org.apache.commons.io.IOUtils;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-import org.apache.sling.scripting.sightly.api.ResourceResolution;
-import org.apache.sling.scripting.sightly.api.SightlyUseException;
-import org.mozilla.javascript.Context;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.js.async.AsyncContainer;
-import org.apache.sling.scripting.sightly.js.async.TimingBindingsValuesProvider;
-import org.apache.sling.scripting.sightly.js.async.UnaryCallback;
-import org.apache.sling.scripting.sightly.js.cjs.CommonJsModule;
-import org.apache.sling.scripting.sightly.js.loop.EventLoop;
-import org.apache.sling.scripting.sightly.js.loop.EventLoopInterop;
-import org.apache.sling.scripting.sightly.js.loop.Task;
-import org.apache.sling.scripting.sightly.js.use.DependencyResolver;
-import org.apache.sling.scripting.sightly.js.use.UseFunction;
-
-/**
- * Environment for running JS scripts
- */
-public class JsEnvironment {
-
-    private final ScriptEngine jsEngine;
-    private final Bindings engineBindings;
-    private EventLoop eventLoop;
-
-    public JsEnvironment(ScriptEngine jsEngine) {
-        this.jsEngine = jsEngine;
-        engineBindings = new SimpleBindings();
-        TimingBindingsValuesProvider.INSTANCE.addBindings(engineBindings);
-    }
-
-    public void initialize() {
-        Context context = Context.enter();
-        eventLoop = EventLoopInterop.obtainEventLoop(context);
-    }
-
-    public void cleanup() {
-        Context context = Context.getCurrentContext();
-        if (context == null) {
-            throw new IllegalStateException("No current context");
-        }
-        EventLoopInterop.cleanupEventLoop(context);
-        Context.exit();
-    }
-
-    /**
-     * Run a Js script at a given path
-     * @param caller the resource of the script that invokes the Js code
-     * @param path the path to the JS script
-     * @param globalBindings the global bindings for the script
-     * @param arguments the arguments from the use-plugin
-     * @param callback callback that will receive the result of the script
-     */
-    public void run(Resource caller, String path, Bindings globalBindings, Bindings arguments, UnaryCallback callback) {
-        Resource scriptResource = caller.getChild(path);
-        SlingScriptHelper scriptHelper = (SlingScriptHelper) globalBindings.get(SlingBindings.SLING);
-        Resource componentCaller = ResourceResolution.resolveComponentForRequest(caller.getResourceResolver(), scriptHelper.getRequest());
-        if (scriptResource == null) {
-            scriptResource = ResourceResolution.resolveComponentRelative(caller.getResourceResolver(), componentCaller, path);
-        }
-        if (scriptResource == null) {
-            scriptResource = ResourceResolution.resolveComponentRelative(caller.getResourceResolver(), caller, path);
-        }
-        if (scriptResource == null) {
-            throw new SightlyUseException("Required script resource could not be located: " + path);
-        }
-        runResource(scriptResource, globalBindings, arguments, callback);
-    }
-
-    public void runResource(Resource scriptResource, Bindings globalBindings, Bindings arguments, UnaryCallback callback) {
-        ScriptContext scriptContext = new SimpleScriptContext();
-        CommonJsModule module = new CommonJsModule();
-        Bindings scriptBindings = buildBindings(scriptResource, globalBindings, arguments, module);
-        scriptContext.setBindings(scriptBindings, ScriptContext.ENGINE_SCOPE);
-        runScript(scriptResource, scriptContext, callback, module);
-    }
-
-    public AsyncContainer runResource(Resource scriptResource, Bindings globalBindings, Bindings arguments) {
-        AsyncContainer asyncContainer = new AsyncContainer();
-        runResource(scriptResource, globalBindings, arguments, asyncContainer.createCompletionCallback());
-        return asyncContainer;
-    }
-
-    /**
-     * Run a script at a given path
-     * @param caller the resource of the script that invokes the Js code
-     * @param path the path to the JS script
-     * @param globalBindings bindings for the JS script
-     * @return an asynchronous container for the result
-     * @throws UnsupportedOperationException if this method is run when the event loop is not empty
-     */
-    public AsyncContainer run(Resource caller, String path, Bindings globalBindings, Bindings arguments) {
-        AsyncContainer asyncContainer = new AsyncContainer();
-        run(caller, path, globalBindings, arguments, asyncContainer.createCompletionCallback());
-        return asyncContainer;
-    }
-
-    private Bindings buildBindings(Resource scriptResource, Bindings local, Bindings arguments, CommonJsModule commonJsModule) {
-        Bindings bindings = new SimpleBindings();
-        bindings.putAll(engineBindings);
-        DependencyResolver dependencyResolver = new DependencyResolver(scriptResource, this, local);
-        UseFunction useFunction = new UseFunction(dependencyResolver, arguments);
-        bindings.put(Variables.JS_USE, useFunction);
-        bindings.put(Variables.MODULE, commonJsModule);
-        bindings.put(Variables.EXPORTS, commonJsModule.getExports());
-        bindings.put(Variables.CONSOLE, new Console(LoggerFactory.getLogger(scriptResource.getName())));
-        bindings.putAll(local);
-        return bindings;
-    }
-
-    private void runScript(Resource scriptResource, ScriptContext scriptContext, UnaryCallback callback, CommonJsModule commonJsModule) {
-        eventLoop.schedule(scriptTask(scriptResource, scriptContext, callback, commonJsModule));
-    }
-
-    private Task scriptTask(final Resource scriptResource, final ScriptContext scriptContext,
-                            final UnaryCallback callback, final CommonJsModule commonJsModule) {
-        return new Task(new Runnable() {
-            @Override
-            public void run() {
-                Reader reader = null;
-                try {
-                    reader = new InputStreamReader(scriptResource.adaptTo(InputStream.class));
-                    Object result = jsEngine.eval(reader, scriptContext);
-                    if (commonJsModule.isModified()) {
-                        result = commonJsModule.getExports();
-                    }
-                    if (result instanceof AsyncContainer) {
-                        ((AsyncContainer) result).addListener(callback);
-                    } else {
-                        callback.invoke(result);
-                    }
-                } catch (ScriptException e) {
-                    throw new SightlyUseException(e);
-                } finally {
-                    IOUtils.closeQuietly(reader);
-                }
-            }
-        });
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsUseProvider.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsUseProvider.java
deleted file mode 100644
index 85f5627..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/JsUseProvider.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js;
-
-import javax.script.Bindings;
-import javax.script.ScriptEngine;
-import javax.script.ScriptEngineManager;
-
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.resource.LoginException;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceResolverFactory;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-import org.apache.sling.scripting.sightly.api.ProviderOutcome;
-import org.apache.sling.scripting.sightly.api.RenderContext;
-import org.apache.sling.scripting.sightly.api.UseProvider;
-import org.apache.sling.scripting.sightly.api.UseProviderComponent;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.sling.scripting.sightly.js.async.AsyncContainer;
-import org.apache.sling.scripting.sightly.js.async.AsyncExtractor;
-import org.apache.sling.scripting.sightly.js.rhino.JsValueAdapter;
-
-/**
- * Use provider for JS scripts. Ensures proper integration between Sightly & JS code-behind.
- */
-@Component
-@Service(UseProvider.class)
-@Property(name = UseProviderComponent.PRIORITY, intValue = -1)
-public class JsUseProvider extends UseProviderComponent {
-
-    private static final String JS_ENGINE_NAME = "javascript";
-
-    private static final Logger log = LoggerFactory.getLogger(JsUseProvider.class);
-    private static final JsValueAdapter jsValueAdapter = new JsValueAdapter(new AsyncExtractor());
-
-    @Reference
-    private ScriptEngineManager scriptEngineManager = null;
-
-    @Reference
-    private ResourceResolverFactory rrf = null;
-
-    @Override
-    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
-        Bindings globalBindings = renderContext.getBindings();
-        if (!Utils.isJsScript(identifier)) {
-            return ProviderOutcome.failure();
-        }
-        ScriptEngine jsEngine = obtainEngine();
-        if (jsEngine == null) {
-            log.warn("No JavaScript engine defined");
-            return ProviderOutcome.failure();
-        }
-        SlingScriptHelper scriptHelper = Utils.getHelper(globalBindings);
-        JsEnvironment environment = null;
-        ResourceResolver adminResolver = null;
-        try {
-            environment = new JsEnvironment(jsEngine);
-            environment.initialize();
-            String callerPath = scriptHelper.getScript().getScriptResource().getPath();
-            boolean allowedExecutablePath = false;
-            adminResolver = rrf.getAdministrativeResourceResolver(null);
-            for (String path : adminResolver.getSearchPath()) {
-                if (callerPath.startsWith(path)) {
-                    allowedExecutablePath = true;
-                    break;
-                }
-            }
-            if (allowedExecutablePath) {
-                Resource caller = adminResolver.getResource(callerPath);
-                AsyncContainer asyncContainer = environment.run(caller, identifier, globalBindings, arguments);
-                return ProviderOutcome.success(jsValueAdapter.adapt(asyncContainer));
-            }
-            return ProviderOutcome.failure();
-        } catch (LoginException e) {
-            log.error("Unable to load JS script " + identifier, e);
-        } finally {
-            if (environment != null) {
-                environment.cleanup();
-            }
-            if (adminResolver != null) {
-                adminResolver.close();
-            }
-        }
-        return ProviderOutcome.failure();
-    }
-
-    private ScriptEngine obtainEngine() {
-        return scriptEngineManager.getEngineByName(JS_ENGINE_NAME);
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Utils.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Utils.java
deleted file mode 100644
index 1f8128b..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Utils.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js;
-
-import javax.script.Bindings;
-import javax.script.SimpleBindings;
-import java.util.Collections;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.api.scripting.SlingScriptHelper;
-
-/**
- * Utilities for script evaluation
- */
-public class Utils {
-    private static final String EXTENSION = "js";
-
-    public static final Bindings EMPTY_BINDINGS = new SimpleBindings(Collections.<String, Object>emptyMap());
-
-    public static SlingScriptHelper getHelper(Bindings bindings) {
-        return (SlingScriptHelper) bindings.get(SlingBindings.SLING);
-    }
-
-    public static boolean isJsScript(String identifier) {
-        String extension = StringUtils.substringAfterLast(identifier, ".");
-        return EXTENSION.equalsIgnoreCase(extension);
-    }
-
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Variables.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Variables.java
deleted file mode 100644
index 1e1673d..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/Variables.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js;
-
-/**
- * Variables exposed to js scripts
- */
-public final class Variables {
-
-    public static final String CONSOLE = "console";
-
-    public static final String JS_USE = "use";
-    public static final String SET_TIMEOUT = "setTimeout";
-    public static final String SET_IMMEDIATE = "setImmediate";
-
-    public static final String MODULE = "module";
-    public static final String EXPORTS = "exports";
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncContainer.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncContainer.java
deleted file mode 100644
index e4f39dd..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncContainer.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.async;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Simple container for asynchronously provided values
- */
-public class AsyncContainer {
-
-    private Object value;
-    private boolean completed;
-    private List<UnaryCallback> callbacks = new ArrayList<UnaryCallback>();
-
-    /**
-     * Add a listener that will receive the value in this container when it will
-     * be filled. If the container already has a value, the callback is called
-     * immediately.
-     * @param unaryCallback the callback that will receive the result
-     */
-    public void addListener(UnaryCallback unaryCallback) {
-        callbacks.add(unaryCallback);
-        if (completed) {
-            notifyListener(unaryCallback);
-        }
-    }
-
-    /**
-     * Get the result of this holder
-     * @return the holder result
-     * @throws java.util.NoSuchElementException if the result has not yet been set
-     */
-    public Object getResult() {
-        return value;
-    }
-
-    /**
-     * Check whether the container was completed with a value
-     * @return the completion status
-     */
-    public boolean isCompleted() {
-        return completed;
-    }
-
-    /**
-     * Complete this async container with a value
-     * @param value the result value
-     * @throws java.lang.IllegalStateException if the container has been previously filled
-     */
-    public void complete(Object value) {
-        if (completed) {
-            throw new IllegalStateException("Value was already completed");
-        }
-        completed = true;
-        this.value = value;
-        for (UnaryCallback callback : callbacks) {
-            notifyListener(callback);
-        }
-    }
-
-    /**
-     * Create a callback that will complete this container
-     * @return the completion callback
-     */
-    public UnaryCallback createCompletionCallback() {
-        return new UnaryCallback() {
-            @Override
-            public void invoke(Object arg) {
-                complete(arg);
-            }
-        };
-    }
-
-    private void notifyListener(UnaryCallback unaryCallback) {
-        unaryCallback.invoke(value);
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncExtractor.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncExtractor.java
deleted file mode 100644
index fe43556..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/AsyncExtractor.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.async;
-
-import org.apache.sling.scripting.sightly.api.SightlyUseException;
-import org.mozilla.javascript.BaseFunction;
-import org.mozilla.javascript.Context;
-import org.mozilla.javascript.Function;
-import org.mozilla.javascript.Scriptable;
-import org.mozilla.javascript.ScriptableObject;
-
-import org.apache.sling.scripting.sightly.js.loop.EventLoopInterop;
-
-/**
- *
- */
-public class AsyncExtractor {
-
-    public static final String THEN_METHOD = "then";
-
-    public void extract(Object jsObj, UnaryCallback unaryCallback) {
-        if (!isPromise(jsObj)) {
-            unaryCallback.invoke(jsObj);
-        }
-        if (jsObj instanceof AsyncContainer) {
-            ((AsyncContainer) jsObj).addListener(unaryCallback);
-        }
-        if (jsObj instanceof ScriptableObject) {
-            ScriptableObject scriptableObject = (ScriptableObject) jsObj;
-            decodeJSPromise(scriptableObject, unaryCallback);
-        }
-    }
-
-    private void decodeJSPromise(final Scriptable promise, final UnaryCallback callback) {
-        try {
-            Context context = Context.enter();
-            final AsyncContainer errorContainer = new AsyncContainer();
-            final Function errorHandler = createErrorHandler(errorContainer);
-            final Function successHandler = convertCallback(callback);
-            EventLoopInterop.schedule(context, new Runnable() {
-                @Override
-                public void run() {
-                    ScriptableObject.callMethod(promise, THEN_METHOD,
-                            new Object[] {successHandler, errorHandler});
-                }
-            });
-            if (errorContainer.isCompleted()) {
-                throw new SightlyUseException("Promise has completed with failure: " +
-                        Context.toString(errorContainer.getResult()));
-            }
-        } finally {
-            Context.exit();
-        }
-    }
-
-    private Function createErrorHandler(AsyncContainer asyncContainer) {
-        return convertCallback(asyncContainer.createCompletionCallback());
-    }
-
-    public boolean isPromise(Object jsObj) {
-        if (jsObj instanceof AsyncContainer) {
-            return true;
-        }
-        if (jsObj instanceof ScriptableObject) {
-            Scriptable scriptable = (Scriptable) jsObj;
-            return ScriptableObject.hasProperty(scriptable, THEN_METHOD);
-        }
-        return false;
-    }
-
-    private static Function convertCallback(final UnaryCallback unaryCallback) {
-        return new BaseFunction() {
-            @Override
-            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
-                Object arg = (args.length == 0) ? Context.getUndefinedValue() : args[0];
-                unaryCallback.invoke(arg);
-                return Context.getUndefinedValue();
-            }
-        };
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingBindingsValuesProvider.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingBindingsValuesProvider.java
deleted file mode 100644
index c823405..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingBindingsValuesProvider.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.async;
-
-import javax.script.Bindings;
-
-import org.apache.sling.scripting.api.BindingsValuesProvider;
-
-import org.apache.sling.scripting.sightly.js.Variables;
-
-/**
- * Value provider for timing functions
- */
-public final class TimingBindingsValuesProvider implements BindingsValuesProvider {
-
-    public static final TimingBindingsValuesProvider INSTANCE = new TimingBindingsValuesProvider();
-
-    private TimingBindingsValuesProvider() {
-    }
-
-    @Override
-    public void addBindings(Bindings bindings) {
-        bindings.put(Variables.SET_TIMEOUT, TimingFunction.INSTANCE);
-        bindings.put(Variables.SET_IMMEDIATE, TimingFunction.INSTANCE);
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingFunction.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingFunction.java
deleted file mode 100644
index 2755782..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/TimingFunction.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.async;
-
-import org.mozilla.javascript.BaseFunction;
-import org.mozilla.javascript.Context;
-import org.mozilla.javascript.Function;
-import org.mozilla.javascript.Scriptable;
-
-import org.apache.sling.scripting.sightly.js.loop.EventLoopInterop;
-import org.apache.sling.scripting.sightly.js.rhino.JsUtils;
-
-/**
- * Timing function for JS scripts that use async constructs
- */
-public final class TimingFunction extends BaseFunction {
-
-    public static final TimingFunction INSTANCE = new TimingFunction();
-
-    private TimingFunction() {
-    }
-
-    @Override
-    public Object call(final Context cx, final Scriptable scope, Scriptable thisObj, Object[] args) {
-        if (args.length == 0) {
-            return Context.getUndefinedValue();
-        }
-        if (!(args[0] instanceof Function)) {
-            throw new IllegalArgumentException("Timing function must receive a function as the first argument");
-        }
-        final Function function = (Function) args[0];
-        return EventLoopInterop.schedule(cx, new Runnable() {
-            @Override
-            public void run() {
-                JsUtils.callFn(function, cx, scope, null, new Object[0]);
-            }
-        });
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/UnaryCallback.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/UnaryCallback.java
deleted file mode 100644
index 48e1aee..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/async/UnaryCallback.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.async;
-
-/**
- * Unary callback function
- */
-public interface UnaryCallback {
-
-    /**
-     * Call the callback with one argument
-     * @param arg the callback argument
-     */
-    void invoke(Object arg);
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/CommonJsModule.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/CommonJsModule.java
deleted file mode 100644
index 3d1683e..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/CommonJsModule.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.cjs;
-
-import org.mozilla.javascript.Scriptable;
-import org.mozilla.javascript.ScriptableObject;
-
-/**
- * CommonJS module implementation
- */
-public class CommonJsModule extends ScriptableObject {
-
-    private static final String EXPORTS = "exports";
-
-    private Object exports = new ExportsObject();
-    private boolean modifiedModule;
-
-
-    @Override
-    public Object get(String name, Scriptable start) {
-        if (name.equals(EXPORTS)) {
-            return exports;
-        }
-        return super.get(name, start);
-    }
-
-    @Override
-    public void put(String name, Scriptable start, Object value) {
-        if (name.equals(EXPORTS)) {
-            setExports(value);
-        } else {
-            super.put(name, start, value);
-        }
-    }
-
-    public Object getExports() {
-        return exports;
-    }
-
-    public void setExports(Object exports) {
-        modifiedModule = true;
-        this.exports = exports;
-    }
-
-    public boolean isModified() {
-        return modifiedModule || ((ExportsObject) exports).isModified();
-    }
-
-    @Override
-    public String getClassName() {
-        return "Module";
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/ExportsObject.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/ExportsObject.java
deleted file mode 100644
index 58257f5..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/cjs/ExportsObject.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.cjs;
-
-
-import org.mozilla.javascript.Scriptable;
-import org.mozilla.javascript.ScriptableObject;
-
-/**
- * The default exports object
- */
-public class ExportsObject extends ScriptableObject {
-
-    private boolean modified;
-
-    @Override
-    public void put(String name, Scriptable start, Object value) {
-        modified = true;
-        super.put(name, start, value);
-    }
-
-    public boolean isModified() {
-        return modified;
-    }
-
-    @Override
-    public String getClassName() {
-        return "exports";
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Console.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Console.java
new file mode 100644
index 0000000..355e253
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Console.java
@@ -0,0 +1,49 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl;
+
+import org.slf4j.Logger;
+
+/**
+ * The console object, used for logging
+ */
+public class Console {
+
+    private final Logger logger;
+
+    public Console(Logger logger) {
+        this.logger = logger;
+    }
+
+    public void log(String msg) {
+        logger.info(msg);
+    }
+
+    public void warn(String msg) {
+        logger.warn(msg);
+    }
+
+    public void error(String msg) {
+        logger.error(msg);
+    }
+
+    public void debug(String msg) {
+        logger.debug(msg);
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsEnvironment.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsEnvironment.java
new file mode 100644
index 0000000..f1979fb
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsEnvironment.java
@@ -0,0 +1,173 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl;
+
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import javax.script.Bindings;
+import javax.script.ScriptContext;
+import javax.script.ScriptEngine;
+import javax.script.ScriptException;
+import javax.script.SimpleBindings;
+import javax.script.SimpleScriptContext;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.scripting.sightly.ResourceResolution;
+import org.mozilla.javascript.Context;
+import org.slf4j.LoggerFactory;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncContainer;
+import org.apache.sling.scripting.sightly.js.impl.async.TimingBindingsValuesProvider;
+import org.apache.sling.scripting.sightly.js.impl.async.UnaryCallback;
+import org.apache.sling.scripting.sightly.js.impl.cjs.CommonJsModule;
+import org.apache.sling.scripting.sightly.js.impl.loop.EventLoop;
+import org.apache.sling.scripting.sightly.js.impl.loop.EventLoopInterop;
+import org.apache.sling.scripting.sightly.js.impl.loop.Task;
+import org.apache.sling.scripting.sightly.js.impl.use.DependencyResolver;
+import org.apache.sling.scripting.sightly.js.impl.use.UseFunction;
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+
+/**
+ * Environment for running JS scripts
+ */
+public class JsEnvironment {
+
+    private final ScriptEngine jsEngine;
+    private final Bindings engineBindings;
+    private EventLoop eventLoop;
+
+    public JsEnvironment(ScriptEngine jsEngine) {
+        this.jsEngine = jsEngine;
+        engineBindings = new SimpleBindings();
+        TimingBindingsValuesProvider.INSTANCE.addBindings(engineBindings);
+    }
+
+    public void initialize() {
+        Context context = Context.enter();
+        eventLoop = EventLoopInterop.obtainEventLoop(context);
+    }
+
+    public void cleanup() {
+        Context context = Context.getCurrentContext();
+        if (context == null) {
+            throw new IllegalStateException("No current context");
+        }
+        EventLoopInterop.cleanupEventLoop(context);
+        Context.exit();
+    }
+
+    /**
+     * Run a Js script at a given path
+     * @param caller the resource of the script that invokes the Js code
+     * @param path the path to the JS script
+     * @param globalBindings the global bindings for the script
+     * @param arguments the arguments from the use-plugin
+     * @param callback callback that will receive the result of the script
+     */
+    public void run(Resource caller, String path, Bindings globalBindings, Bindings arguments, UnaryCallback callback) {
+        Resource scriptResource = caller.getChild(path);
+        SlingScriptHelper scriptHelper = (SlingScriptHelper) globalBindings.get(SlingBindings.SLING);
+        Resource componentCaller = ResourceResolution.resolveComponentForRequest(caller.getResourceResolver(), scriptHelper.getRequest());
+        if (scriptResource == null) {
+            scriptResource = ResourceResolution.resolveComponentRelative(caller.getResourceResolver(), componentCaller, path);
+        }
+        if (scriptResource == null) {
+            scriptResource = ResourceResolution.resolveComponentRelative(caller.getResourceResolver(), caller, path);
+        }
+        if (scriptResource == null) {
+            throw new SightlyUseException("Required script resource could not be located: " + path);
+        }
+        runResource(scriptResource, globalBindings, arguments, callback);
+    }
+
+    public void runResource(Resource scriptResource, Bindings globalBindings, Bindings arguments, UnaryCallback callback) {
+        ScriptContext scriptContext = new SimpleScriptContext();
+        CommonJsModule module = new CommonJsModule();
+        Bindings scriptBindings = buildBindings(scriptResource, globalBindings, arguments, module);
+        scriptContext.setBindings(scriptBindings, ScriptContext.ENGINE_SCOPE);
+        runScript(scriptResource, scriptContext, callback, module);
+    }
+
+    public AsyncContainer runResource(Resource scriptResource, Bindings globalBindings, Bindings arguments) {
+        AsyncContainer asyncContainer = new AsyncContainer();
+        runResource(scriptResource, globalBindings, arguments, asyncContainer.createCompletionCallback());
+        return asyncContainer;
+    }
+
+    /**
+     * Run a script at a given path
+     * @param caller the resource of the script that invokes the Js code
+     * @param path the path to the JS script
+     * @param globalBindings bindings for the JS script
+     * @return an asynchronous container for the result
+     * @throws UnsupportedOperationException if this method is run when the event loop is not empty
+     */
+    public AsyncContainer run(Resource caller, String path, Bindings globalBindings, Bindings arguments) {
+        AsyncContainer asyncContainer = new AsyncContainer();
+        run(caller, path, globalBindings, arguments, asyncContainer.createCompletionCallback());
+        return asyncContainer;
+    }
+
+    private Bindings buildBindings(Resource scriptResource, Bindings local, Bindings arguments, CommonJsModule commonJsModule) {
+        Bindings bindings = new SimpleBindings();
+        bindings.putAll(engineBindings);
+        DependencyResolver dependencyResolver = new DependencyResolver(scriptResource, this, local);
+        UseFunction useFunction = new UseFunction(dependencyResolver, arguments);
+        bindings.put(Variables.JS_USE, useFunction);
+        bindings.put(Variables.MODULE, commonJsModule);
+        bindings.put(Variables.EXPORTS, commonJsModule.getExports());
+        bindings.put(Variables.CONSOLE, new Console(LoggerFactory.getLogger(scriptResource.getName())));
+        bindings.putAll(local);
+        return bindings;
+    }
+
+    private void runScript(Resource scriptResource, ScriptContext scriptContext, UnaryCallback callback, CommonJsModule commonJsModule) {
+        eventLoop.schedule(scriptTask(scriptResource, scriptContext, callback, commonJsModule));
+    }
+
+    private Task scriptTask(final Resource scriptResource, final ScriptContext scriptContext,
+                            final UnaryCallback callback, final CommonJsModule commonJsModule) {
+        return new Task(new Runnable() {
+            @Override
+            public void run() {
+                Reader reader = null;
+                try {
+                    reader = new InputStreamReader(scriptResource.adaptTo(InputStream.class));
+                    Object result = jsEngine.eval(reader, scriptContext);
+                    if (commonJsModule.isModified()) {
+                        result = commonJsModule.getExports();
+                    }
+                    if (result instanceof AsyncContainer) {
+                        ((AsyncContainer) result).addListener(callback);
+                    } else {
+                        callback.invoke(result);
+                    }
+                } catch (ScriptException e) {
+                    throw new SightlyUseException(e);
+                } finally {
+                    IOUtils.closeQuietly(reader);
+                }
+            }
+        });
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsUseProvider.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsUseProvider.java
new file mode 100644
index 0000000..fa8b0ec
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/JsUseProvider.java
@@ -0,0 +1,125 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl;
+
+import javax.script.Bindings;
+import javax.script.ScriptEngine;
+import javax.script.ScriptEngineManager;
+
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncContainer;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncExtractor;
+import org.apache.sling.scripting.sightly.js.impl.rhino.JsValueAdapter;
+import org.apache.sling.scripting.sightly.render.RenderContext;
+import org.apache.sling.scripting.sightly.use.ProviderOutcome;
+import org.apache.sling.scripting.sightly.use.UseProvider;
+import org.osgi.framework.Constants;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Use provider for JS scripts. Ensures proper integration between Sightly & JS code-behind.
+ */
+@Component(
+        metatype = true,
+        label = "Apache Sling Scripting Sightly JavaScript Use Provider",
+        description = "The JavaScript Use Provider is responsible for instantiating JavaScript Use-API objects."
+)
+@Service(UseProvider.class)
+@Properties({
+        @Property(
+                name = Constants.SERVICE_RANKING,
+                label = "Service Ranking",
+                description = "The Service Ranking value acts as the priority with which this Use Provider is queried to return an " +
+                        "Use-object. A higher value represents a higher priority.",
+                intValue = 90,
+                propertyPrivate = false
+        )
+})
+public class JsUseProvider implements UseProvider {
+
+    private static final String JS_ENGINE_NAME = "javascript";
+
+    private static final Logger log = LoggerFactory.getLogger(JsUseProvider.class);
+    private static final JsValueAdapter jsValueAdapter = new JsValueAdapter(new AsyncExtractor());
+
+    @Reference
+    private ScriptEngineManager scriptEngineManager = null;
+
+    @Reference
+    private ResourceResolverFactory rrf = null;
+
+    @Override
+    public ProviderOutcome provide(String identifier, RenderContext renderContext, Bindings arguments) {
+        Bindings globalBindings = renderContext.getBindings();
+        if (!Utils.isJsScript(identifier)) {
+            return ProviderOutcome.failure();
+        }
+        ScriptEngine jsEngine = obtainEngine();
+        if (jsEngine == null) {
+            log.warn("No JavaScript engine defined");
+            return ProviderOutcome.failure();
+        }
+        SlingScriptHelper scriptHelper = Utils.getHelper(globalBindings);
+        JsEnvironment environment = null;
+        ResourceResolver adminResolver = null;
+        try {
+            environment = new JsEnvironment(jsEngine);
+            environment.initialize();
+            String callerPath = scriptHelper.getScript().getScriptResource().getPath();
+            boolean allowedExecutablePath = false;
+            adminResolver = rrf.getAdministrativeResourceResolver(null);
+            for (String path : adminResolver.getSearchPath()) {
+                if (callerPath.startsWith(path)) {
+                    allowedExecutablePath = true;
+                    break;
+                }
+            }
+            if (allowedExecutablePath) {
+                Resource caller = adminResolver.getResource(callerPath);
+                AsyncContainer asyncContainer = environment.run(caller, identifier, globalBindings, arguments);
+                return ProviderOutcome.success(jsValueAdapter.adapt(asyncContainer));
+            }
+            return ProviderOutcome.failure();
+        } catch (LoginException e) {
+            log.error("Unable to load JS script " + identifier, e);
+        } finally {
+            if (environment != null) {
+                environment.cleanup();
+            }
+            if (adminResolver != null) {
+                adminResolver.close();
+            }
+        }
+        return ProviderOutcome.failure();
+    }
+
+    private ScriptEngine obtainEngine() {
+        return scriptEngineManager.getEngineByName(JS_ENGINE_NAME);
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Utils.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Utils.java
new file mode 100644
index 0000000..7d22159
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Utils.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl;
+
+import javax.script.Bindings;
+import javax.script.SimpleBindings;
+import java.util.Collections;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.api.scripting.SlingScriptHelper;
+
+/**
+ * Utilities for script evaluation
+ */
+public class Utils {
+    private static final String EXTENSION = "js";
+
+    public static final Bindings EMPTY_BINDINGS = new SimpleBindings(Collections.<String, Object>emptyMap());
+
+    public static SlingScriptHelper getHelper(Bindings bindings) {
+        return (SlingScriptHelper) bindings.get(SlingBindings.SLING);
+    }
+
+    public static boolean isJsScript(String identifier) {
+        String extension = StringUtils.substringAfterLast(identifier, ".");
+        return EXTENSION.equalsIgnoreCase(extension);
+    }
+
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Variables.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Variables.java
new file mode 100644
index 0000000..176e85f
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/Variables.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl;
+
+/**
+ * Variables exposed to js scripts
+ */
+public final class Variables {
+
+    public static final String CONSOLE = "console";
+
+    public static final String JS_USE = "use";
+    public static final String SET_TIMEOUT = "setTimeout";
+    public static final String SET_IMMEDIATE = "setImmediate";
+
+    public static final String MODULE = "module";
+    public static final String EXPORTS = "exports";
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncContainer.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncContainer.java
new file mode 100644
index 0000000..b9bbd5c
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncContainer.java
@@ -0,0 +1,95 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.async;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Simple container for asynchronously provided values
+ */
+public class AsyncContainer {
+
+    private Object value;
+    private boolean completed;
+    private List<UnaryCallback> callbacks = new ArrayList<UnaryCallback>();
+
+    /**
+     * Add a listener that will receive the value in this container when it will
+     * be filled. If the container already has a value, the callback is called
+     * immediately.
+     * @param unaryCallback the callback that will receive the result
+     */
+    public void addListener(UnaryCallback unaryCallback) {
+        callbacks.add(unaryCallback);
+        if (completed) {
+            notifyListener(unaryCallback);
+        }
+    }
+
+    /**
+     * Get the result of this holder
+     * @return the holder result
+     * @throws java.util.NoSuchElementException if the result has not yet been set
+     */
+    public Object getResult() {
+        return value;
+    }
+
+    /**
+     * Check whether the container was completed with a value
+     * @return the completion status
+     */
+    public boolean isCompleted() {
+        return completed;
+    }
+
+    /**
+     * Complete this async container with a value
+     * @param value the result value
+     * @throws java.lang.IllegalStateException if the container has been previously filled
+     */
+    public void complete(Object value) {
+        if (completed) {
+            throw new IllegalStateException("Value was already completed");
+        }
+        completed = true;
+        this.value = value;
+        for (UnaryCallback callback : callbacks) {
+            notifyListener(callback);
+        }
+    }
+
+    /**
+     * Create a callback that will complete this container
+     * @return the completion callback
+     */
+    public UnaryCallback createCompletionCallback() {
+        return new UnaryCallback() {
+            @Override
+            public void invoke(Object arg) {
+                complete(arg);
+            }
+        };
+    }
+
+    private void notifyListener(UnaryCallback unaryCallback) {
+        unaryCallback.invoke(value);
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncExtractor.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncExtractor.java
new file mode 100644
index 0000000..bf2d933
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/AsyncExtractor.java
@@ -0,0 +1,96 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.async;
+
+import org.mozilla.javascript.BaseFunction;
+import org.mozilla.javascript.Context;
+import org.mozilla.javascript.Function;
+import org.mozilla.javascript.Scriptable;
+import org.mozilla.javascript.ScriptableObject;
+import org.apache.sling.scripting.sightly.js.impl.loop.EventLoopInterop;
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+
+/**
+ *
+ */
+public class AsyncExtractor {
+
+    public static final String THEN_METHOD = "then";
+
+    public void extract(Object jsObj, UnaryCallback unaryCallback) {
+        if (!isPromise(jsObj)) {
+            unaryCallback.invoke(jsObj);
+        }
+        if (jsObj instanceof AsyncContainer) {
+            ((AsyncContainer) jsObj).addListener(unaryCallback);
+        }
+        if (jsObj instanceof ScriptableObject) {
+            ScriptableObject scriptableObject = (ScriptableObject) jsObj;
+            decodeJSPromise(scriptableObject, unaryCallback);
+        }
+    }
+
+    private void decodeJSPromise(final Scriptable promise, final UnaryCallback callback) {
+        try {
+            Context context = Context.enter();
+            final AsyncContainer errorContainer = new AsyncContainer();
+            final Function errorHandler = createErrorHandler(errorContainer);
+            final Function successHandler = convertCallback(callback);
+            EventLoopInterop.schedule(context, new Runnable() {
+                @Override
+                public void run() {
+                    ScriptableObject.callMethod(promise, THEN_METHOD,
+                            new Object[] {successHandler, errorHandler});
+                }
+            });
+            if (errorContainer.isCompleted()) {
+                throw new SightlyUseException("Promise has completed with failure: " +
+                        Context.toString(errorContainer.getResult()));
+            }
+        } finally {
+            Context.exit();
+        }
+    }
+
+    private Function createErrorHandler(AsyncContainer asyncContainer) {
+        return convertCallback(asyncContainer.createCompletionCallback());
+    }
+
+    public boolean isPromise(Object jsObj) {
+        if (jsObj instanceof AsyncContainer) {
+            return true;
+        }
+        if (jsObj instanceof ScriptableObject) {
+            Scriptable scriptable = (Scriptable) jsObj;
+            return ScriptableObject.hasProperty(scriptable, THEN_METHOD);
+        }
+        return false;
+    }
+
+    private static Function convertCallback(final UnaryCallback unaryCallback) {
+        return new BaseFunction() {
+            @Override
+            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
+                Object arg = (args.length == 0) ? Context.getUndefinedValue() : args[0];
+                unaryCallback.invoke(arg);
+                return Context.getUndefinedValue();
+            }
+        };
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingBindingsValuesProvider.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingBindingsValuesProvider.java
new file mode 100644
index 0000000..623de69
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingBindingsValuesProvider.java
@@ -0,0 +1,41 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.async;
+
+import javax.script.Bindings;
+
+import org.apache.sling.scripting.api.BindingsValuesProvider;
+import org.apache.sling.scripting.sightly.js.impl.Variables;
+
+/**
+ * Value provider for timing functions
+ */
+public final class TimingBindingsValuesProvider implements BindingsValuesProvider {
+
+    public static final TimingBindingsValuesProvider INSTANCE = new TimingBindingsValuesProvider();
+
+    private TimingBindingsValuesProvider() {
+    }
+
+    @Override
+    public void addBindings(Bindings bindings) {
+        bindings.put(Variables.SET_TIMEOUT, TimingFunction.INSTANCE);
+        bindings.put(Variables.SET_IMMEDIATE, TimingFunction.INSTANCE);
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingFunction.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingFunction.java
new file mode 100644
index 0000000..5cf43b7
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/TimingFunction.java
@@ -0,0 +1,54 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.async;
+
+import org.mozilla.javascript.BaseFunction;
+import org.mozilla.javascript.Context;
+import org.mozilla.javascript.Function;
+import org.mozilla.javascript.Scriptable;
+import org.apache.sling.scripting.sightly.js.impl.loop.EventLoopInterop;
+import org.apache.sling.scripting.sightly.js.impl.rhino.JsUtils;
+
+/**
+ * Timing function for JS scripts that use async constructs
+ */
+public final class TimingFunction extends BaseFunction {
+
+    public static final TimingFunction INSTANCE = new TimingFunction();
+
+    private TimingFunction() {
+    }
+
+    @Override
+    public Object call(final Context cx, final Scriptable scope, Scriptable thisObj, Object[] args) {
+        if (args.length == 0) {
+            return Context.getUndefinedValue();
+        }
+        if (!(args[0] instanceof Function)) {
+            throw new IllegalArgumentException("Timing function must receive a function as the first argument");
+        }
+        final Function function = (Function) args[0];
+        return EventLoopInterop.schedule(cx, new Runnable() {
+            @Override
+            public void run() {
+                JsUtils.callFn(function, cx, scope, null, new Object[0]);
+            }
+        });
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/UnaryCallback.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/UnaryCallback.java
new file mode 100644
index 0000000..0ec0e61
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/async/UnaryCallback.java
@@ -0,0 +1,31 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.async;
+
+/**
+ * Unary callback function
+ */
+public interface UnaryCallback {
+
+    /**
+     * Call the callback with one argument
+     * @param arg the callback argument
+     */
+    void invoke(Object arg);
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/CommonJsModule.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/CommonJsModule.java
new file mode 100644
index 0000000..9b1c675
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/CommonJsModule.java
@@ -0,0 +1,69 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.cjs;
+
+import org.mozilla.javascript.Scriptable;
+import org.mozilla.javascript.ScriptableObject;
+
+/**
+ * CommonJS module implementation
+ */
+public class CommonJsModule extends ScriptableObject {
+
+    private static final String EXPORTS = "exports";
+
+    private Object exports = new ExportsObject();
+    private boolean modifiedModule;
+
+
+    @Override
+    public Object get(String name, Scriptable start) {
+        if (name.equals(EXPORTS)) {
+            return exports;
+        }
+        return super.get(name, start);
+    }
+
+    @Override
+    public void put(String name, Scriptable start, Object value) {
+        if (name.equals(EXPORTS)) {
+            setExports(value);
+        } else {
+            super.put(name, start, value);
+        }
+    }
+
+    public Object getExports() {
+        return exports;
+    }
+
+    public void setExports(Object exports) {
+        modifiedModule = true;
+        this.exports = exports;
+    }
+
+    public boolean isModified() {
+        return modifiedModule || ((ExportsObject) exports).isModified();
+    }
+
+    @Override
+    public String getClassName() {
+        return "Module";
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/ExportsObject.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/ExportsObject.java
new file mode 100644
index 0000000..3822861
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/cjs/ExportsObject.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.cjs;
+
+
+import org.mozilla.javascript.Scriptable;
+import org.mozilla.javascript.ScriptableObject;
+
+/**
+ * The default exports object
+ */
+public class ExportsObject extends ScriptableObject {
+
+    private boolean modified;
+
+    @Override
+    public void put(String name, Scriptable start, Object value) {
+        modified = true;
+        super.put(name, start, value);
+    }
+
+    public boolean isModified() {
+        return modified;
+    }
+
+    @Override
+    public String getClassName() {
+        return "exports";
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/jsapi/SlyBindingsValuesProvider.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/jsapi/SlyBindingsValuesProvider.java
new file mode 100644
index 0000000..72b99a2
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/jsapi/SlyBindingsValuesProvider.java
@@ -0,0 +1,315 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.jsapi;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.Dictionary;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.script.Bindings;
+import javax.script.ScriptEngine;
+import javax.script.ScriptEngineManager;
+import javax.script.SimpleBindings;
+import javax.servlet.http.HttpServletRequest;
+
+import org.apache.felix.scr.annotations.Activate;
+import org.apache.felix.scr.annotations.Component;
+import org.apache.felix.scr.annotations.Deactivate;
+import org.apache.felix.scr.annotations.Properties;
+import org.apache.felix.scr.annotations.Property;
+import org.apache.felix.scr.annotations.PropertyUnbounded;
+import org.apache.felix.scr.annotations.Reference;
+import org.apache.felix.scr.annotations.Service;
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ResourceResolverFactory;
+import org.apache.sling.api.scripting.SlingBindings;
+import org.apache.sling.commons.osgi.PropertiesUtil;
+import org.apache.sling.scripting.api.BindingsValuesProvider;
+import org.apache.sling.scripting.sightly.js.impl.JsEnvironment;
+import org.apache.sling.scripting.sightly.js.impl.Variables;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncContainer;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncExtractor;
+import org.apache.sling.scripting.sightly.js.impl.async.TimingBindingsValuesProvider;
+import org.apache.sling.scripting.sightly.js.impl.async.TimingFunction;
+import org.apache.sling.scripting.sightly.js.impl.cjs.CommonJsModule;
+import org.apache.sling.scripting.sightly.js.impl.rhino.HybridObject;
+import org.apache.sling.scripting.sightly.js.impl.rhino.JsValueAdapter;
+import org.mozilla.javascript.Context;
+import org.mozilla.javascript.Function;
+import org.mozilla.javascript.Script;
+import org.mozilla.javascript.Scriptable;
+import org.mozilla.javascript.ScriptableObject;
+import org.osgi.service.component.ComponentContext;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Provides the {@code sly} and {@code aem} namespaces for usage in Sightly & JS scripts
+ * called from Sightly
+ */
+@Component(metatype = true, label = "Apache Sling Scripting Sightly JavaScript Bindings Provider",
+        description = "The Apache Sling Scripting Sightly JavaScript Bindings Provider loads the JS Use-API and makes it available in the" +
+                " bindings map.")
+@Service(BindingsValuesProvider.class)
+@Properties({
+        @Property(name = "javax.script.name", value = "sightly", propertyPrivate = true),
+        @Property(name = "service.ranking", intValue = 100),
+        @Property(
+                name = SlyBindingsValuesProvider.SCR_PROP_JS_BINDING_IMPLEMENTATIONS,
+                value = {
+                    "sightly:" + SlyBindingsValuesProvider.SLING_NS_PATH
+                },
+                unbounded = PropertyUnbounded.ARRAY,
+                label = "Script Factories",
+                description = "Script factories to load in the bindings map. The entries should be in the form " +
+                        "'namespace:/path/from/repository'."
+        )
+})
+@SuppressWarnings("unused")
+public class SlyBindingsValuesProvider implements BindingsValuesProvider {
+
+    public static final String SCR_PROP_JS_BINDING_IMPLEMENTATIONS = "org.apache.sling.scripting.sightly.js.bindings";
+
+    public static final String SLING_NS_PATH = "/libs/sling/sightly/js/internal/sly.js";
+    public static final String Q_PATH = "/libs/sling/sightly/js/3rd-party/q.js";
+
+    private static final String REQ_NS = SlyBindingsValuesProvider.class.getCanonicalName();
+
+    private static final Logger log = LoggerFactory.getLogger(SlyBindingsValuesProvider.class);
+
+    @Reference
+    private ScriptEngineManager scriptEngineManager;
+
+    @Reference
+    private ResourceResolverFactory rrf = null;
+
+    private final AsyncExtractor asyncExtractor = new AsyncExtractor();
+    private final JsValueAdapter jsValueAdapter = new JsValueAdapter(asyncExtractor);
+
+    private Map<String, String> scriptPaths = new HashMap<String, String>();
+    private Map<String, Function> factories = new HashMap<String, Function>();
+
+    private Script qScript;
+    private final ScriptableObject qScope = createQScope();
+
+    @Override
+    public void addBindings(Bindings bindings) {
+        if (needsInit()) {
+            init(bindings);
+        }
+        Context context = null;
+        try {
+            context = Context.enter();
+            Object qInstance = obtainQInstance(context, bindings);
+            if (qInstance == null) {
+                return;
+            }
+            for (Map.Entry<String, Function> entry : factories.entrySet()) {
+                addBinding(context, entry.getValue(), bindings, entry.getKey(), qInstance);
+            }
+        } finally {
+            if (context != null) {
+                Context.exit();
+            }
+        }
+    }
+
+    @Activate
+    protected void activate(ComponentContext componentContext) {
+        Dictionary properties = componentContext.getProperties();
+        String[] factories = PropertiesUtil.toStringArray(properties.get(SCR_PROP_JS_BINDING_IMPLEMENTATIONS), new String[]{SLING_NS_PATH});
+        scriptPaths = new HashMap<String, String>(factories.length);
+        for (String f : factories) {
+            String[] parts = f.split(":");
+            if (parts.length == 2) {
+                scriptPaths.put(parts[0], parts[1]);
+            }
+        }
+    }
+
+    @Deactivate
+    protected void deactivate(ComponentContext componentContext) {
+        if (scriptPaths != null) {
+            scriptPaths.clear();
+        }
+        if (factories != null) {
+            factories.clear();
+        }
+    }
+
+
+    private void addBinding(Context context, Function factory, Bindings bindings, String globalName, Object qInstance) {
+        if (factory == null) {
+            return;
+        }
+        Object result = factory.call(context, factory, factory, new Object[] {bindings, qInstance});
+        HybridObject global = new HybridObject((Scriptable) result, jsValueAdapter);
+        bindings.put(globalName, global);
+    }
+
+    private boolean needsInit() {
+        return factories == null || factories.isEmpty() || qScript == null;
+    }
+
+    private synchronized void init(Bindings bindings) {
+        if (needsInit()) {
+            ensureFactoriesLoaded(bindings);
+        }
+    }
+
+    private void ensureFactoriesLoaded(Bindings bindings) {
+        JsEnvironment jsEnvironment = null;
+        try {
+            ScriptEngine scriptEngine = obtainEngine();
+            if (scriptEngine == null) {
+                return;
+            }
+            jsEnvironment = new JsEnvironment(scriptEngine);
+            jsEnvironment.initialize();
+            factories = new HashMap<String, Function>(scriptPaths.size());
+            for (Map.Entry<String, String> entry : scriptPaths.entrySet()) {
+                factories.put(entry.getKey(), loadFactory(jsEnvironment, entry.getValue(), bindings));
+            }
+            qScript = loadQScript();
+        } finally {
+            if (jsEnvironment != null) {
+                jsEnvironment.cleanup();
+            }
+        }
+    }
+
+    private Function loadFactory(JsEnvironment jsEnvironment, String path, Bindings bindings) {
+        ResourceResolver resolver = null;
+        try {
+            resolver = rrf.getAdministrativeResourceResolver(null);
+            Resource resource = resolver.getResource(path);
+            if (resource == null) {
+                log.warn("Sly namespace loader could not find the following script: " + path);
+                return null;
+            }
+            AsyncContainer container = jsEnvironment.runResource(resource, createBindings(bindings), new SimpleBindings());
+            Object obj = container.getResult();
+            if (!(obj instanceof Function)) {
+                log.warn("Script was expected to return a function");
+                return null;
+            }
+            return (Function) obj;
+        } catch (LoginException e) {
+            log.error("Cannot evaluate script " + path, e);
+            return null;
+        } finally {
+            if (resolver != null) {
+                resolver.close();
+            }
+        }
+    }
+
+    private Bindings createBindings(Bindings global) {
+        Bindings bindings = new SimpleBindings();
+        bindings.putAll(global);
+        TimingBindingsValuesProvider.INSTANCE.addBindings(bindings);
+        return bindings;
+    }
+
+    private ScriptEngine obtainEngine() {
+        return scriptEngineManager.getEngineByName("javascript");
+    }
+
+    private Object obtainQInstance(Context context, Bindings bindings) {
+        if (qScript == null) {
+            return null;
+        }
+        HttpServletRequest request = (HttpServletRequest) bindings.get(SlingBindings.REQUEST);
+        Object qInstance = null;
+        if (request != null) {
+            qInstance = request.getAttribute(REQ_NS);
+        }
+        if (qInstance == null) {
+            qInstance = createQInstance(context, qScript);
+            if (request != null) {
+                request.setAttribute(REQ_NS, qInstance);
+            }
+        }
+        return qInstance;
+    }
+
+    private ScriptableObject createQScope() {
+        Context context = Context.enter();
+        try {
+            ScriptableObject scope = context.initStandardObjects();
+            ScriptableObject.putProperty(scope, Variables.SET_IMMEDIATE, TimingFunction.INSTANCE);
+            ScriptableObject.putProperty(scope, Variables.SET_TIMEOUT, TimingFunction.INSTANCE);
+            return scope;
+        } finally {
+            Context.exit();
+        }
+    }
+
+    private Object createQInstance(Context context, Script qScript) {
+        CommonJsModule module = new CommonJsModule();
+        Scriptable tempScope = context.newObject(qScope);
+        ScriptableObject.putProperty(tempScope, Variables.MODULE, module);
+        ScriptableObject.putProperty(tempScope, Variables.EXPORTS, module.getExports());
+        qScript.exec(context, tempScope);
+        return module.getExports();
+    }
+
+    private Script loadQScript() {
+        ResourceResolver resourceResolver = null;
+        Context context = Context.enter();
+        context.initStandardObjects();
+        context.setOptimizationLevel(9);
+        InputStream reader = null;
+        try {
+            resourceResolver = rrf.getAdministrativeResourceResolver(null);
+            Resource resource = resourceResolver.getResource(Q_PATH);
+            if (resource == null) {
+                log.warn("Could not load Q library at path: " + Q_PATH);
+                return null;
+            }
+            reader = resource.adaptTo(InputStream.class);
+            if (reader == null) {
+                log.warn("Could not read content of Q library");
+                return null;
+            }
+            return context.compileReader(new InputStreamReader(reader), Q_PATH, 0, null);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        } finally {
+            Context.exit();
+            if (reader != null) {
+                try {
+                    reader.close();
+                } catch (IOException e) {
+                    log.error("Error while closing reader", e);
+                }
+            }
+            if (resourceResolver != null) {
+                resourceResolver.close();
+            }
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoop.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoop.java
new file mode 100644
index 0000000..29480f2
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoop.java
@@ -0,0 +1,78 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.loop;
+
+import java.util.LinkedList;
+import java.util.Queue;
+
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+/**
+ * Simulates an event loop for the Rhino JS engine.
+ */
+public class EventLoop {
+
+    private static final Logger log = LoggerFactory.getLogger(EventLoop.class);
+
+    private Queue<Task> taskQueue = new LinkedList<Task>();
+    private boolean isRunning;
+
+    /**
+     * Add a task to the queue. If the queue is empty, start running tasks. If it
+     * isn't empty, continue running the available tasks
+     * @param task the task to be added
+     */
+    public void schedule(Task task) {
+        taskQueue.offer(task);
+        run();
+    }
+
+    private void run() {
+        if (isRunning) {
+            return;
+        }
+        isRunning = true;
+        try {
+            // Holds the first exception encountered. If there is such a first exception, it will be
+            // rethrown
+            Exception thrownException = null;
+            while (!taskQueue.isEmpty()) {
+                Task task = taskQueue.poll();
+                try {
+                    task.run();
+                } catch (Exception e) {
+                    if (thrownException == null) {
+                        thrownException = e; //first exception
+                    } else {
+                        log.error("Additional error occurred while running JS script: ", e);
+                    }
+                }
+            }
+            if (thrownException != null) {
+                throw new SightlyUseException(thrownException);
+            }
+        } finally {
+            isRunning = false;
+        }
+    }
+
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoopInterop.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoopInterop.java
new file mode 100644
index 0000000..af9b8d5
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/EventLoopInterop.java
@@ -0,0 +1,53 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.loop;
+
+import org.mozilla.javascript.Context;
+
+/**
+ * Event-loop utilities for interoperability with JS code
+ */
+public class EventLoopInterop {
+
+    public static final String EVENT_LOOP_KEY = "EventLoop";
+
+    public static EventLoop obtainEventLoop(Context context) {
+        EventLoop eventLoop = getEventLoop(context);
+        if (eventLoop == null) {
+            eventLoop = new EventLoop();
+            context.putThreadLocal(EVENT_LOOP_KEY, eventLoop);
+        }
+        return eventLoop;
+    }
+
+    public static void cleanupEventLoop(Context context) {
+        context.removeThreadLocal(EVENT_LOOP_KEY);
+    }
+
+    public static Task schedule(Context context, Runnable runnable) {
+        Task task = new Task(runnable);
+        obtainEventLoop(context).schedule(task);
+        return task;
+    }
+
+    private static EventLoop getEventLoop(Context context) {
+        return (EventLoop) context.getThreadLocal(EVENT_LOOP_KEY);
+    }
+
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/Task.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/Task.java
new file mode 100644
index 0000000..1a96a12
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/loop/Task.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.loop;
+
+/**
+ * Task in an event loop
+ */
+public class Task {
+
+    private final Runnable runnable;
+    private boolean active;
+
+    public Task(Runnable runnable) {
+        this.runnable = runnable;
+        this.active = true;
+    }
+
+    public void run() {
+        if (active) {
+            runnable.run();
+        }
+    }
+
+    public void deactivate() {
+        this.active = false;
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/HybridObject.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/HybridObject.java
new file mode 100644
index 0000000..8318543
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/HybridObject.java
@@ -0,0 +1,163 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.rhino;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.sling.scripting.sightly.Record;
+import org.mozilla.javascript.Context;
+import org.mozilla.javascript.Function;
+import org.mozilla.javascript.Scriptable;
+import org.mozilla.javascript.ScriptableObject;
+
+
+/**
+ * Instances of this class can be used in both Sightly & JS scripts
+ */
+public class HybridObject implements Scriptable, Record<Object> {
+
+    private final Scriptable scriptable;
+    private final JsValueAdapter jsValueAdapter;
+
+    public HybridObject(Scriptable scriptable, JsValueAdapter jsValueAdapter) {
+        this.scriptable = scriptable;
+        this.jsValueAdapter = jsValueAdapter;
+    }
+
+    // Record implementation
+
+    @Override
+    public Object get(String name) {
+        if (name == null) {
+            return null;
+        }
+        Context.enter();
+        try {
+            return getAdapted(name);
+        } finally {
+            Context.exit();
+        }
+    }
+
+    @Override
+    public Set<String> properties() {
+        Object[] properties = scriptable.getIds();
+        Set<String> keys = new HashSet<String>();
+        for (Object property: properties) {
+            if (property instanceof String) {
+                keys.add((String) property);
+            }
+        }
+        return keys;
+    }
+
+    private Object getAdapted(String key) {
+        Object obj = ScriptableObject.getProperty(scriptable, key);
+        if (obj == null) {
+            return null;
+        }
+        if (obj instanceof Function) {
+            return jsValueAdapter.adapt(JsUtils.callFn((Function) obj, null, scriptable, scriptable, new Object[0]));
+        }
+        return jsValueAdapter.adapt(obj);
+    }
+
+    // Scriptable implementation
+
+    @Override
+    public String getClassName() {
+        return scriptable.getClassName();
+    }
+
+    @Override
+    public Object get(String name, Scriptable start) {
+        return scriptable.get(name, start);
+    }
+
+    @Override
+    public Object get(int index, Scriptable start) {
+        return scriptable.get(index, start);
+    }
+
+    @Override
+    public boolean has(String name, Scriptable start) {
+        return scriptable.has(name, start);
+    }
+
+    @Override
+    public boolean has(int index, Scriptable start) {
+        return scriptable.has(index, start);
+    }
+
+    @Override
+    public void put(String name, Scriptable start, Object value) {
+        scriptable.put(name, start, value);
+    }
+
+    @Override
+    public void put(int index, Scriptable start, Object value) {
+        scriptable.put(index, start, value);
+    }
+
+    @Override
+    public void delete(String name) {
+        scriptable.delete(name);
+    }
+
+    @Override
+    public void delete(int index) {
+        scriptable.delete(index);
+    }
+
+    @Override
+    public Scriptable getPrototype() {
+        return scriptable.getPrototype();
+    }
+
+    @Override
+    public void setPrototype(Scriptable prototype) {
+        scriptable.setPrototype(prototype);
+    }
+
+    @Override
+    public Scriptable getParentScope() {
+        return scriptable.getParentScope();
+    }
+
+    @Override
+    public void setParentScope(Scriptable parent) {
+        scriptable.setParentScope(parent);
+    }
+
+    @Override
+    public Object[] getIds() {
+        return scriptable.getIds();
+    }
+
+    @Override
+    public Object getDefaultValue(Class hint) {
+        return scriptable.getDefaultValue(hint);
+    }
+
+    @Override
+    public boolean hasInstance(Scriptable instance) {
+        return scriptable.hasInstance(instance);
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsUtils.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsUtils.java
new file mode 100644
index 0000000..cfc6cad
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsUtils.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.rhino;
+
+import org.mozilla.javascript.Context;
+import org.mozilla.javascript.Function;
+import org.mozilla.javascript.Scriptable;
+
+/**
+ * Utilities when inter-operating with JS scripts
+ */
+public class JsUtils {
+
+    public static Object callFn(Function function, Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
+        boolean exitContext = false;
+        if (Context.getCurrentContext() == null) {
+            Context.enter();
+            exitContext = true;
+        }
+        Context context = (cx == null) ? Context.getCurrentContext() : cx;
+        Object result = function.call(context, scope, thisObj, args);
+        if (exitContext) {
+            Context.exit();
+        }
+        return result;
+    }
+
+
+
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsValueAdapter.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsValueAdapter.java
new file mode 100644
index 0000000..81226c6
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/rhino/JsValueAdapter.java
@@ -0,0 +1,164 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+package org.apache.sling.scripting.sightly.js.impl.rhino;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.mozilla.javascript.Context;
+import org.mozilla.javascript.Function;
+import org.mozilla.javascript.NativeArray;
+import org.mozilla.javascript.ScriptableObject;
+import org.mozilla.javascript.Wrapper;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncContainer;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncExtractor;
+
+/**
+ * Converts JS objects to Java objects
+ */
+public class JsValueAdapter {
+
+    private static final Map<String, Class<?>> knownConversions = new HashMap<String, Class<?>>();
+
+    static {
+        knownConversions.put("String", String.class);
+        knownConversions.put("Date", Date.class);
+    }
+
+    private final AsyncExtractor asyncExtractor;
+
+    public JsValueAdapter(AsyncExtractor asyncExtractor) {
+        this.asyncExtractor = asyncExtractor;
+    }
+
+    /**
+     * Convert a given JS value to a Java object
+     * @param jsValue the original JS value
+     * @return the Java correspondent
+     */
+    @SuppressWarnings("unchecked")
+    public Object adapt(Object jsValue) {
+        if (jsValue == null || jsValue == Context.getUndefinedValue() || jsValue == ScriptableObject.NOT_FOUND) {
+            return null;
+        }
+        if (jsValue instanceof Wrapper) {
+            return adapt(((Wrapper) jsValue).unwrap());
+        }
+        if (asyncExtractor.isPromise(jsValue)) {
+            return adapt(forceAsync(jsValue));
+        }
+        if (jsValue instanceof ScriptableObject) {
+            return extractScriptable((ScriptableObject) jsValue);
+        }
+        if (jsValue instanceof CharSequence) {
+            //convert any string-like type to plain java strings
+            return jsValue.toString();
+        }
+        if (jsValue instanceof Map) {
+            return convertMap((Map) jsValue);
+        }
+        if (jsValue instanceof Iterable) {
+            return convertIterable((Iterable) jsValue);
+        }
+        if (jsValue instanceof Number) {
+            return convertNumber((Number) jsValue);
+        }
+        if (jsValue instanceof Object[]) {
+            return convertIterable(Arrays.asList((Object[]) jsValue));
+        }
+        return jsValue;
+    }
+
+    private Object convertNumber(Number numValue) {
+        if (numValue instanceof Double) {
+            if (isLong((Double) numValue)) {
+                return numValue.longValue();
+            }
+        }
+        if (numValue instanceof Float) {
+            if (isLong((Float) numValue)) {
+                return numValue.longValue();
+            }
+        }
+        return numValue;
+    }
+
+    private boolean isLong(double x) {
+        return x == Math.floor(x);
+    }
+
+    private Object forceAsync(Object jsValue) {
+        AsyncContainer asyncContainer = new AsyncContainer();
+        asyncExtractor.extract(jsValue, asyncContainer.createCompletionCallback());
+        return asyncContainer.getResult();
+    }
+
+    private Object extractScriptable(ScriptableObject scriptableObject) {
+        Object obj = tryKnownConversion(scriptableObject);
+        if (obj != null) { return obj; }
+        if (scriptableObject instanceof NativeArray) {
+            return convertNativeArray((NativeArray) scriptableObject);
+        }
+        if (scriptableObject instanceof Function) {
+            return callFunction((Function) scriptableObject);
+        }
+        return new HybridObject(scriptableObject, this);
+    }
+
+    private Object callFunction(Function function) {
+        Object result = JsUtils.callFn(function, null, function, function, new Object[0]);
+        return adapt(result);
+    }
+
+    private Object[] convertNativeArray(NativeArray nativeArray) {
+        int length = (int) nativeArray.getLength();
+        Object[] objects = new Object[length];
+        for (int i = 0; i < length; i++) {
+            Object jsItem = nativeArray.get(i, nativeArray);
+            objects[i] = adapt(jsItem);
+        }
+        return objects;
+    }
+
+    private Map<Object, Object> convertMap(Map<Object, Object> original) {
+        Map<Object, Object> map = new HashMap<Object, Object>();
+        for (Map.Entry<Object, Object> entry : original.entrySet()) {
+            map.put(entry.getKey(), adapt(entry.getValue()));
+        }
+        return map;
+    }
+
+    private List<Object> convertIterable(Iterable<Object> iterable) {
+        List<Object> objects = new ArrayList<Object>();
+        for (Object obj : iterable) {
+            objects.add(adapt(obj));
+        }
+        return objects;
+    }
+
+    private static Object tryKnownConversion(ScriptableObject object) {
+        String className = object.getClassName();
+        Class<?> cls = knownConversions.get(className);
+        return (cls == null) ? null : Context.jsToJava(object, cls);
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/DependencyResolver.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/DependencyResolver.java
new file mode 100644
index 0000000..bc43005
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/DependencyResolver.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.js.impl.use;
+
+import javax.script.Bindings;
+
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.scripting.sightly.js.impl.JsEnvironment;
+import org.apache.sling.scripting.sightly.js.impl.Utils;
+import org.apache.sling.scripting.sightly.js.impl.async.UnaryCallback;
+import org.apache.sling.scripting.sightly.use.SightlyUseException;
+
+/**
+ * Resolves dependencies specified by the Use function
+ */
+public class DependencyResolver {
+
+    private final Resource caller;
+    private final JsEnvironment jsEnvironment;
+    private final Bindings globalBindings;
+
+    public DependencyResolver(Resource resource, JsEnvironment jsEnvironment, Bindings globalBindings) {
+        this.caller = resource;
+        this.jsEnvironment = jsEnvironment;
+        this.globalBindings = globalBindings;
+    }
+
+    /**
+     * Resolve a dependency
+     * @param dependency the dependency identifier
+     * @param callback the callback that will receive the resolved dependency
+     */
+    public void resolve(String dependency, UnaryCallback callback) {
+        if (!Utils.isJsScript(dependency)) {
+            throw new SightlyUseException("Only JS scripts are allowed as dependencies. Invalid dependency: " + dependency);
+        }
+        jsEnvironment.run(caller, dependency, globalBindings, Utils.EMPTY_BINDINGS, callback);
+    }
+
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/UseFunction.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/UseFunction.java
new file mode 100644
index 0000000..fbfe132
--- /dev/null
+++ b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/impl/use/UseFunction.java
@@ -0,0 +1,140 @@
+/*******************************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ ******************************************************************************/
+
+package org.apache.sling.scripting.sightly.js.impl.use;
+
+import javax.script.Bindings;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
+import org.mozilla.javascript.BaseFunction;
+import org.mozilla.javascript.Context;
+import org.mozilla.javascript.Function;
+import org.mozilla.javascript.NativeArray;
+import org.mozilla.javascript.NativeObject;
+import org.mozilla.javascript.Scriptable;
+import org.mozilla.javascript.ScriptableObject;
+import org.apache.sling.scripting.sightly.js.impl.async.AsyncContainer;
+import org.apache.sling.scripting.sightly.js.impl.async.UnaryCallback;
+import org.apache.sling.scripting.sightly.js.impl.loop.EventLoopInterop;
+import org.apache.sling.scripting.sightly.js.impl.rhino.JsUtils;
+
+/**
+ * The JavaScript {@code use} function
+ */
+public class UseFunction extends BaseFunction {
+
+    private final DependencyResolver dependencyResolver;
+    private final Scriptable thisObj;
+
+    public UseFunction(DependencyResolver dependencyResolver, Bindings arguments) {
+        this.dependencyResolver = dependencyResolver;
+        this.thisObj = createThisBinding(arguments);
+    }
+
+    @Override
+    public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
+        Function function;
+        List<String> depNames;
+        if (args.length == 0) {
+            throw new IllegalArgumentException("Not enough arguments for use");
+        } else if (args.length == 1) {
+            function = decodeCallback(args[0]);
+            depNames = Collections.emptyList();
+        } else {
+            function = decodeCallback(args[1]);
+            depNames = decodeDepNames(args[0]);
+        }
+        return use(depNames, function, cx, scope);
+    }
+
+    private Object use(List<String> depNames, final Function callback, final Context cx, final Scriptable scope) {
+        final AsyncContainer asyncContainer = new AsyncContainer();
+        if (depNames.isEmpty()) {
+            callImmediate(callback, asyncContainer, cx, scope);
+        } else {
+            final int[] counter = {depNames.size()};
+            final Object[] dependencies = new Object[depNames.size()];
+            for (int i = 0; i < depNames.size(); i++) {
+                final int dependencyPos = i;
+                dependencyResolver.resolve(depNames.get(i), new UnaryCallback() {
+                    @Override
+                    public void invoke(Object arg) {
+                        counter[0]--;
+                        dependencies[dependencyPos] = arg;
+                        if (counter[0] == 0) {
+                            Object result = JsUtils.callFn(callback, cx, scope, thisObj, dependencies);
+                            asyncContainer.complete(result);
+                        }
+                    }
+                });
+            }
+        }
+        return asyncContainer;
+    }
+
+    private void callImmediate(final Function callback, final AsyncContainer asyncContainer, final Context cx, final Scriptable scope) {
+        EventLoopInterop.schedule(cx, new Runnable() {
+            @Override
+            public void run() {
+                Object value = JsUtils.callFn(callback, cx, scope, thisObj, new Object[0]);
+                asyncContainer.complete(value);
+            }
+        });
+    }
+
+    private Function decodeCallback(Object obj) {
+        if (!(obj instanceof Function)) {
+            throw new IllegalArgumentException("No callback argument supplied");
+        }
+        return (Function) obj;
+    }
+
+    private List<String> decodeDepNames(Object obj) {
+        if (obj instanceof NativeArray) {
+            return decodeDepArray((NativeArray) obj);
+        }
+        return Collections.singletonList(jsToString(obj));
+    }
+
+    private List<String> decodeDepArray(NativeArray nativeArray) {
+        int depLength = (int) nativeArray.getLength();
+        List<String> depNames = new ArrayList<String>(depLength);
+        for (int i = 0; i < depLength; i++) {
+            String depName = jsToString(nativeArray.get(i, nativeArray));
+            depNames.add(depName);
+        }
+        return depNames;
+    }
+
+    private String jsToString(Object obj) {
+        return (String) Context.jsToJava(obj, String.class);
+    }
+
+    private Scriptable createThisBinding(Bindings arguments) {
+        NativeObject nativeObject = new NativeObject();
+        for (Map.Entry<String, Object> entry : arguments.entrySet()) {
+            ScriptableObject.putProperty(nativeObject, entry.getKey(), entry.getValue());
+        }
+        return nativeObject;
+    }
+}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/jsapi/SlyBindingsValuesProvider.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/jsapi/SlyBindingsValuesProvider.java
deleted file mode 100644
index 4333c4a..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/jsapi/SlyBindingsValuesProvider.java
+++ /dev/null
@@ -1,314 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.jsapi;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.Dictionary;
-import java.util.HashMap;
-import java.util.Map;
-import javax.script.Bindings;
-import javax.script.ScriptEngine;
-import javax.script.ScriptEngineManager;
-import javax.script.SimpleBindings;
-import javax.servlet.http.HttpServletRequest;
-
-import org.apache.felix.scr.annotations.Activate;
-import org.apache.felix.scr.annotations.Component;
-import org.apache.felix.scr.annotations.Deactivate;
-import org.apache.felix.scr.annotations.Properties;
-import org.apache.felix.scr.annotations.Property;
-import org.apache.felix.scr.annotations.PropertyUnbounded;
-import org.apache.felix.scr.annotations.Reference;
-import org.apache.felix.scr.annotations.Service;
-import org.apache.sling.api.resource.LoginException;
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.api.resource.ResourceResolver;
-import org.apache.sling.api.resource.ResourceResolverFactory;
-import org.apache.sling.api.scripting.SlingBindings;
-import org.apache.sling.commons.osgi.PropertiesUtil;
-import org.apache.sling.scripting.api.BindingsValuesProvider;
-import org.apache.sling.scripting.sightly.js.JsEnvironment;
-import org.apache.sling.scripting.sightly.js.Variables;
-import org.apache.sling.scripting.sightly.js.async.AsyncContainer;
-import org.apache.sling.scripting.sightly.js.async.AsyncExtractor;
-import org.apache.sling.scripting.sightly.js.async.TimingBindingsValuesProvider;
-import org.apache.sling.scripting.sightly.js.async.TimingFunction;
-import org.apache.sling.scripting.sightly.js.cjs.CommonJsModule;
-import org.apache.sling.scripting.sightly.js.rhino.HybridObject;
-import org.apache.sling.scripting.sightly.js.rhino.JsValueAdapter;
-import org.mozilla.javascript.Context;
-import org.mozilla.javascript.Function;
-import org.mozilla.javascript.Script;
-import org.mozilla.javascript.Scriptable;
-import org.mozilla.javascript.ScriptableObject;
-import org.osgi.service.component.ComponentContext;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Provides the {@code sly} and {@code aem} namespaces for usage in Sightly & JS scripts
- * called from Sightly
- */
-@Component(metatype = true, label = "Apache Sling Scripting Sightly JavaScript Bindings Provider",
-        description = "The Apache Sling Scripting Sightly JavaScript Bindings Provider loads the JS Use-API and makes it available in the" +
-                " bindings map.")
-@Service(BindingsValuesProvider.class)
-@Properties({
-        @Property(name = "javax.script.name", value = "sightly", propertyPrivate = true),
-        @Property(name = "service.ranking", intValue = 100),
-        @Property(
-                name = SlyBindingsValuesProvider.SCR_PROP_JS_BINDING_IMPLEMENTATIONS,
-                value = {
-                    "sightly:" + SlyBindingsValuesProvider.SLING_NS_PATH
-                },
-                unbounded = PropertyUnbounded.ARRAY,
-                label = "Script Factories",
-                description = "Script factories to load in the bindings map. The entries should be in the form " +
-                        "'namespace:/path/from/repository'."
-        )
-})
-@SuppressWarnings("unused")
-public class SlyBindingsValuesProvider implements BindingsValuesProvider {
-
-    public static final String SCR_PROP_JS_BINDING_IMPLEMENTATIONS = "org.apache.sling.scripting.sightly.js.bindings";
-
-    public static final String SLING_NS_PATH = "/libs/sling/sightly/js/internal/sly.js";
-    public static final String Q_PATH = "/libs/sling/sightly/js/3rd-party/q.js";
-
-    private static final String REQ_NS = SlyBindingsValuesProvider.class.getCanonicalName();
-
-    private static final Logger log = LoggerFactory.getLogger(SlyBindingsValuesProvider.class);
-
-    @Reference
-    private ScriptEngineManager scriptEngineManager;
-
-    @Reference
-    private ResourceResolverFactory rrf = null;
-
-    private final AsyncExtractor asyncExtractor = new AsyncExtractor();
-    private final JsValueAdapter jsValueAdapter = new JsValueAdapter(asyncExtractor);
-
-    private Map<String, String> scriptPaths = new HashMap<String, String>();
-    private Map<String, Function> factories = new HashMap<String, Function>();
-
-    private Script qScript;
-    private final ScriptableObject qScope = createQScope();
-
-    @Override
-    public void addBindings(Bindings bindings) {
-        if (needsInit()) {
-            init(bindings);
-        }
-        Context context = null;
-        try {
-            context = Context.enter();
-            Object qInstance = obtainQInstance(context, bindings);
-            if (qInstance == null) {
-                return;
-            }
-            for (Map.Entry<String, Function> entry : factories.entrySet()) {
-                addBinding(context, entry.getValue(), bindings, entry.getKey(), qInstance);
-            }
-        } finally {
-            if (context != null) {
-                Context.exit();
-            }
-        }
-    }
-
-    @Activate
-    protected void activate(ComponentContext componentContext) {
-        Dictionary properties = componentContext.getProperties();
-        String[] factories = PropertiesUtil.toStringArray(properties.get(SCR_PROP_JS_BINDING_IMPLEMENTATIONS), new String[]{SLING_NS_PATH});
-        scriptPaths = new HashMap<String, String>(factories.length);
-        for (String f : factories) {
-            String[] parts = f.split(":");
-            if (parts.length == 2) {
-                scriptPaths.put(parts[0], parts[1]);
-            }
-        }
-    }
-
-    @Deactivate
-    protected void deactivate(ComponentContext componentContext) {
-        if (scriptPaths != null) {
-            scriptPaths.clear();
-        }
-        if (factories != null) {
-            factories.clear();
-        }
-    }
-
-
-    private void addBinding(Context context, Function factory, Bindings bindings, String globalName, Object qInstance) {
-        if (factory == null) {
-            return;
-        }
-        Object result = factory.call(context, factory, factory, new Object[] {bindings, qInstance});
-        HybridObject global = new HybridObject((Scriptable) result, jsValueAdapter);
-        bindings.put(globalName, global);
-    }
-
-    private boolean needsInit() {
-        return factories == null || factories.isEmpty() || qScript == null;
-    }
-
-    private synchronized void init(Bindings bindings) {
-        if (needsInit()) {
-            ensureFactoriesLoaded(bindings);
-        }
-    }
-
-    private void ensureFactoriesLoaded(Bindings bindings) {
-        JsEnvironment jsEnvironment = null;
-        try {
-            ScriptEngine scriptEngine = obtainEngine();
-            if (scriptEngine == null) {
-                return;
-            }
-            jsEnvironment = new JsEnvironment(scriptEngine);
-            jsEnvironment.initialize();
-            factories = new HashMap<String, Function>(scriptPaths.size());
-            for (Map.Entry<String, String> entry : scriptPaths.entrySet()) {
-                factories.put(entry.getKey(), loadFactory(jsEnvironment, entry.getValue(), bindings));
-            }
-            qScript = loadQScript();
-        } finally {
-            if (jsEnvironment != null) {
-                jsEnvironment.cleanup();
-            }
-        }
-    }
-
-    private Function loadFactory(JsEnvironment jsEnvironment, String path, Bindings bindings) {
-        ResourceResolver resolver = null;
-        try {
-            resolver = rrf.getAdministrativeResourceResolver(null);
-            Resource resource = resolver.getResource(path);
-            if (resource == null) {
-                log.warn("Sly namespace loader could not find the following script: " + path);
-                return null;
-            }
-            AsyncContainer container = jsEnvironment.runResource(resource, createBindings(bindings), new SimpleBindings());
-            Object obj = container.getResult();
-            if (!(obj instanceof Function)) {
-                log.warn("Script was expected to return a function");
-                return null;
-            }
-            return (Function) obj;
-        } catch (LoginException e) {
-            log.error("Cannot evaluate script " + path, e);
-            return null;
-        } finally {
-            if (resolver != null) {
-                resolver.close();
-            }
-        }
-    }
-
-    private Bindings createBindings(Bindings global) {
-        Bindings bindings = new SimpleBindings();
-        bindings.putAll(global);
-        TimingBindingsValuesProvider.INSTANCE.addBindings(bindings);
-        return bindings;
-    }
-
-    private ScriptEngine obtainEngine() {
-        return scriptEngineManager.getEngineByName("javascript");
-    }
-
-    private Object obtainQInstance(Context context, Bindings bindings) {
-        if (qScript == null) {
-            return null;
-        }
-        HttpServletRequest request = (HttpServletRequest) bindings.get(SlingBindings.REQUEST);
-        Object qInstance = null;
-        if (request != null) {
-            qInstance = request.getAttribute(REQ_NS);
-        }
-        if (qInstance == null) {
-            qInstance = createQInstance(context, qScript);
-            if (request != null) {
-                request.setAttribute(REQ_NS, qInstance);
-            }
-        }
-        return qInstance;
-    }
-
-    private ScriptableObject createQScope() {
-        Context context = Context.enter();
-        try {
-            ScriptableObject scope = context.initStandardObjects();
-            ScriptableObject.putProperty(scope, Variables.SET_IMMEDIATE, TimingFunction.INSTANCE);
-            ScriptableObject.putProperty(scope, Variables.SET_TIMEOUT, TimingFunction.INSTANCE);
-            return scope;
-        } finally {
-            Context.exit();
-        }
-    }
-
-    private Object createQInstance(Context context, Script qScript) {
-        CommonJsModule module = new CommonJsModule();
-        Scriptable tempScope = context.newObject(qScope);
-        ScriptableObject.putProperty(tempScope, Variables.MODULE, module);
-        ScriptableObject.putProperty(tempScope, Variables.EXPORTS, module.getExports());
-        qScript.exec(context, tempScope);
-        return module.getExports();
-    }
-
-    private Script loadQScript() {
-        ResourceResolver resourceResolver = null;
-        Context context = Context.enter();
-        context.initStandardObjects();
-        context.setOptimizationLevel(9);
-        InputStream reader = null;
-        try {
-            resourceResolver = rrf.getAdministrativeResourceResolver(null);
-            Resource resource = resourceResolver.getResource(Q_PATH);
-            if (resource == null) {
-                log.warn("Could not load Q library at path: " + Q_PATH);
-                return null;
-            }
-            reader = resource.adaptTo(InputStream.class);
-            if (reader == null) {
-                log.warn("Could not read content of Q library");
-                return null;
-            }
-            return context.compileReader(new InputStreamReader(reader), Q_PATH, 0, null);
-        } catch (Exception e) {
-            e.printStackTrace();
-            return null;
-        } finally {
-            Context.exit();
-            if (reader != null) {
-                try {
-                    reader.close();
-                } catch (IOException e) {
-                    log.error("Error while closing reader", e);
-                }
-            }
-            if (resourceResolver != null) {
-                resourceResolver.close();
-            }
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoop.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoop.java
deleted file mode 100644
index ef4c6d5..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoop.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.loop;
-
-import java.util.LinkedList;
-import java.util.Queue;
-
-import org.apache.sling.scripting.sightly.api.SightlyUseException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-
-/**
- * Simulates an event loop for the Rhino JS engine.
- */
-public class EventLoop {
-
-    private static final Logger log = LoggerFactory.getLogger(EventLoop.class);
-
-    private Queue<Task> taskQueue = new LinkedList<Task>();
-    private boolean isRunning;
-
-    /**
-     * Add a task to the queue. If the queue is empty, start running tasks. If it
-     * isn't empty, continue running the available tasks
-     * @param task the task to be added
-     */
-    public void schedule(Task task) {
-        taskQueue.offer(task);
-        run();
-    }
-
-    private void run() {
-        if (isRunning) {
-            return;
-        }
-        isRunning = true;
-        try {
-            // Holds the first exception encountered. If there is such a first exception, it will be
-            // rethrown
-            Exception thrownException = null;
-            while (!taskQueue.isEmpty()) {
-                Task task = taskQueue.poll();
-                try {
-                    task.run();
-                } catch (Exception e) {
-                    if (thrownException == null) {
-                        thrownException = e; //first exception
-                    } else {
-                        log.error("Additional error occurred while running JS script: ", e);
-                    }
-                }
-            }
-            if (thrownException != null) {
-                throw new SightlyUseException(thrownException);
-            }
-        } finally {
-            isRunning = false;
-        }
-    }
-
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoopInterop.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoopInterop.java
deleted file mode 100644
index d847f53..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/EventLoopInterop.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.loop;
-
-import org.mozilla.javascript.Context;
-
-/**
- * Event-loop utilities for interoperability with JS code
- */
-public class EventLoopInterop {
-
-    public static final String EVENT_LOOP_KEY = "EventLoop";
-
-    public static EventLoop obtainEventLoop(Context context) {
-        EventLoop eventLoop = getEventLoop(context);
-        if (eventLoop == null) {
-            eventLoop = new EventLoop();
-            context.putThreadLocal(EVENT_LOOP_KEY, eventLoop);
-        }
-        return eventLoop;
-    }
-
-    public static void cleanupEventLoop(Context context) {
-        context.removeThreadLocal(EVENT_LOOP_KEY);
-    }
-
-    public static Task schedule(Context context, Runnable runnable) {
-        Task task = new Task(runnable);
-        obtainEventLoop(context).schedule(task);
-        return task;
-    }
-
-    private static EventLoop getEventLoop(Context context) {
-        return (EventLoop) context.getThreadLocal(EVENT_LOOP_KEY);
-    }
-
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/Task.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/Task.java
deleted file mode 100644
index e218e78..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/loop/Task.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.loop;
-
-/**
- * Task in an event loop
- */
-public class Task {
-
-    private final Runnable runnable;
-    private boolean active;
-
-    public Task(Runnable runnable) {
-        this.runnable = runnable;
-        this.active = true;
-    }
-
-    public void run() {
-        if (active) {
-            runnable.run();
-        }
-    }
-
-    public void deactivate() {
-        this.active = false;
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/HybridObject.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/HybridObject.java
deleted file mode 100644
index 77875fc..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/HybridObject.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.rhino;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import org.apache.sling.scripting.sightly.api.Record;
-import org.mozilla.javascript.Context;
-import org.mozilla.javascript.Function;
-import org.mozilla.javascript.Scriptable;
-import org.mozilla.javascript.ScriptableObject;
-
-
-/**
- * Instances of this class can be used in both Sightly & JS scripts
- */
-public class HybridObject implements Scriptable, Record<Object> {
-
-    private final Scriptable scriptable;
-    private final JsValueAdapter jsValueAdapter;
-
-    public HybridObject(Scriptable scriptable, JsValueAdapter jsValueAdapter) {
-        this.scriptable = scriptable;
-        this.jsValueAdapter = jsValueAdapter;
-    }
-
-    // Record implementation
-
-    @Override
-    public Object get(String name) {
-        if (name == null) {
-            return null;
-        }
-        Context.enter();
-        try {
-            return getAdapted(name);
-        } finally {
-            Context.exit();
-        }
-    }
-
-    @Override
-    public Set<String> properties() {
-        Object[] properties = scriptable.getIds();
-        Set<String> keys = new HashSet<String>();
-        for (Object property: properties) {
-            if (property instanceof String) {
-                keys.add((String) property);
-            }
-        }
-        return keys;
-    }
-
-    private Object getAdapted(String key) {
-        Object obj = ScriptableObject.getProperty(scriptable, key);
-        if (obj == null) {
-            return null;
-        }
-        if (obj instanceof Function) {
-            return jsValueAdapter.adapt(JsUtils.callFn((Function) obj, null, scriptable, scriptable, new Object[0]));
-        }
-        return jsValueAdapter.adapt(obj);
-    }
-
-    // Scriptable implementation
-
-    @Override
-    public String getClassName() {
-        return scriptable.getClassName();
-    }
-
-    @Override
-    public Object get(String name, Scriptable start) {
-        return scriptable.get(name, start);
-    }
-
-    @Override
-    public Object get(int index, Scriptable start) {
-        return scriptable.get(index, start);
-    }
-
-    @Override
-    public boolean has(String name, Scriptable start) {
-        return scriptable.has(name, start);
-    }
-
-    @Override
-    public boolean has(int index, Scriptable start) {
-        return scriptable.has(index, start);
-    }
-
-    @Override
-    public void put(String name, Scriptable start, Object value) {
-        scriptable.put(name, start, value);
-    }
-
-    @Override
-    public void put(int index, Scriptable start, Object value) {
-        scriptable.put(index, start, value);
-    }
-
-    @Override
-    public void delete(String name) {
-        scriptable.delete(name);
-    }
-
-    @Override
-    public void delete(int index) {
-        scriptable.delete(index);
-    }
-
-    @Override
-    public Scriptable getPrototype() {
-        return scriptable.getPrototype();
-    }
-
-    @Override
-    public void setPrototype(Scriptable prototype) {
-        scriptable.setPrototype(prototype);
-    }
-
-    @Override
-    public Scriptable getParentScope() {
-        return scriptable.getParentScope();
-    }
-
-    @Override
-    public void setParentScope(Scriptable parent) {
-        scriptable.setParentScope(parent);
-    }
-
-    @Override
-    public Object[] getIds() {
-        return scriptable.getIds();
-    }
-
-    @Override
-    public Object getDefaultValue(Class hint) {
-        return scriptable.getDefaultValue(hint);
-    }
-
-    @Override
-    public boolean hasInstance(Scriptable instance) {
-        return scriptable.hasInstance(instance);
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsUtils.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsUtils.java
deleted file mode 100644
index aa5325f..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsUtils.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.rhino;
-
-import org.mozilla.javascript.Context;
-import org.mozilla.javascript.Function;
-import org.mozilla.javascript.Scriptable;
-
-/**
- * Utilities when inter-operating with JS scripts
- */
-public class JsUtils {
-
-    public static Object callFn(Function function, Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
-        boolean exitContext = false;
-        if (Context.getCurrentContext() == null) {
-            Context.enter();
-            exitContext = true;
-        }
-        Context context = (cx == null) ? Context.getCurrentContext() : cx;
-        Object result = function.call(context, scope, thisObj, args);
-        if (exitContext) {
-            Context.exit();
-        }
-        return result;
-    }
-
-
-
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsValueAdapter.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsValueAdapter.java
deleted file mode 100644
index 814a7e4..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/rhino/JsValueAdapter.java
+++ /dev/null
@@ -1,165 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-package org.apache.sling.scripting.sightly.js.rhino;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.mozilla.javascript.Context;
-import org.mozilla.javascript.Function;
-import org.mozilla.javascript.NativeArray;
-import org.mozilla.javascript.ScriptableObject;
-import org.mozilla.javascript.Wrapper;
-
-import org.apache.sling.scripting.sightly.js.async.AsyncContainer;
-import org.apache.sling.scripting.sightly.js.async.AsyncExtractor;
-
-/**
- * Converts JS objects to Java objects
- */
-public class JsValueAdapter {
-
-    private static final Map<String, Class<?>> knownConversions = new HashMap<String, Class<?>>();
-
-    static {
-        knownConversions.put("String", String.class);
-        knownConversions.put("Date", Date.class);
-    }
-
-    private final AsyncExtractor asyncExtractor;
-
-    public JsValueAdapter(AsyncExtractor asyncExtractor) {
-        this.asyncExtractor = asyncExtractor;
-    }
-
-    /**
-     * Convert a given JS value to a Java object
-     * @param jsValue the original JS value
-     * @return the Java correspondent
-     */
-    @SuppressWarnings("unchecked")
-    public Object adapt(Object jsValue) {
-        if (jsValue == null || jsValue == Context.getUndefinedValue() || jsValue == ScriptableObject.NOT_FOUND) {
-            return null;
-        }
-        if (jsValue instanceof Wrapper) {
-            return adapt(((Wrapper) jsValue).unwrap());
-        }
-        if (asyncExtractor.isPromise(jsValue)) {
-            return adapt(forceAsync(jsValue));
-        }
-        if (jsValue instanceof ScriptableObject) {
-            return extractScriptable((ScriptableObject) jsValue);
-        }
-        if (jsValue instanceof CharSequence) {
-            //convert any string-like type to plain java strings
-            return jsValue.toString();
-        }
-        if (jsValue instanceof Map) {
-            return convertMap((Map) jsValue);
-        }
-        if (jsValue instanceof Iterable) {
-            return convertIterable((Iterable) jsValue);
-        }
-        if (jsValue instanceof Number) {
-            return convertNumber((Number) jsValue);
-        }
-        if (jsValue instanceof Object[]) {
-            return convertIterable(Arrays.asList((Object[]) jsValue));
-        }
-        return jsValue;
-    }
-
-    private Object convertNumber(Number numValue) {
-        if (numValue instanceof Double) {
-            if (isLong((Double) numValue)) {
-                return numValue.longValue();
-            }
-        }
-        if (numValue instanceof Float) {
-            if (isLong((Float) numValue)) {
-                return numValue.longValue();
-            }
-        }
-        return numValue;
-    }
-
-    private boolean isLong(double x) {
-        return x == Math.floor(x);
-    }
-
-    private Object forceAsync(Object jsValue) {
-        AsyncContainer asyncContainer = new AsyncContainer();
-        asyncExtractor.extract(jsValue, asyncContainer.createCompletionCallback());
-        return asyncContainer.getResult();
-    }
-
-    private Object extractScriptable(ScriptableObject scriptableObject) {
-        Object obj = tryKnownConversion(scriptableObject);
-        if (obj != null) { return obj; }
-        if (scriptableObject instanceof NativeArray) {
-            return convertNativeArray((NativeArray) scriptableObject);
-        }
-        if (scriptableObject instanceof Function) {
-            return callFunction((Function) scriptableObject);
-        }
-        return new HybridObject(scriptableObject, this);
-    }
-
-    private Object callFunction(Function function) {
-        Object result = JsUtils.callFn(function, null, function, function, new Object[0]);
-        return adapt(result);
-    }
-
-    private Object[] convertNativeArray(NativeArray nativeArray) {
-        int length = (int) nativeArray.getLength();
-        Object[] objects = new Object[length];
-        for (int i = 0; i < length; i++) {
-            Object jsItem = nativeArray.get(i, nativeArray);
-            objects[i] = adapt(jsItem);
-        }
-        return objects;
-    }
-
-    private Map<Object, Object> convertMap(Map<Object, Object> original) {
-        Map<Object, Object> map = new HashMap<Object, Object>();
-        for (Map.Entry<Object, Object> entry : original.entrySet()) {
-            map.put(entry.getKey(), adapt(entry.getValue()));
-        }
-        return map;
-    }
-
-    private List<Object> convertIterable(Iterable<Object> iterable) {
-        List<Object> objects = new ArrayList<Object>();
-        for (Object obj : iterable) {
-            objects.add(adapt(obj));
-        }
-        return objects;
-    }
-
-    private static Object tryKnownConversion(ScriptableObject object) {
-        String className = object.getClassName();
-        Class<?> cls = knownConversions.get(className);
-        return (cls == null) ? null : Context.jsToJava(object, cls);
-    }
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/DependencyResolver.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/DependencyResolver.java
deleted file mode 100644
index 5df0a86..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/DependencyResolver.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.js.use;
-
-import javax.script.Bindings;
-
-import org.apache.sling.api.resource.Resource;
-import org.apache.sling.scripting.sightly.api.SightlyUseException;
-
-import org.apache.sling.scripting.sightly.js.JsEnvironment;
-import org.apache.sling.scripting.sightly.js.Utils;
-import org.apache.sling.scripting.sightly.js.async.UnaryCallback;
-
-/**
- * Resolves dependencies specified by the Use function
- */
-public class DependencyResolver {
-
-    private final Resource caller;
-    private final JsEnvironment jsEnvironment;
-    private final Bindings globalBindings;
-
-    public DependencyResolver(Resource resource, JsEnvironment jsEnvironment, Bindings globalBindings) {
-        this.caller = resource;
-        this.jsEnvironment = jsEnvironment;
-        this.globalBindings = globalBindings;
-    }
-
-    /**
-     * Resolve a dependency
-     * @param dependency the dependency identifier
-     * @param callback the callback that will receive the resolved dependency
-     */
-    public void resolve(String dependency, UnaryCallback callback) {
-        if (!Utils.isJsScript(dependency)) {
-            throw new SightlyUseException("Only JS scripts are allowed as dependencies. Invalid dependency: " + dependency);
-        }
-        jsEnvironment.run(caller, dependency, globalBindings, Utils.EMPTY_BINDINGS, callback);
-    }
-
-}
diff --git a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/UseFunction.java b/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/UseFunction.java
deleted file mode 100644
index 2fe1b22..0000000
--- a/contrib/scripting/sightly/js-use-provider/src/main/java/org/apache/sling/scripting/sightly/js/use/UseFunction.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/*******************************************************************************
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- ******************************************************************************/
-
-package org.apache.sling.scripting.sightly.js.use;
-
-import javax.script.Bindings;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-import org.mozilla.javascript.BaseFunction;
-import org.mozilla.javascript.Context;
-import org.mozilla.javascript.Function;
-import org.mozilla.javascript.NativeArray;
-import org.mozilla.javascript.NativeObject;
-import org.mozilla.javascript.Scriptable;
-import org.mozilla.javascript.ScriptableObject;
-
-import org.apache.sling.scripting.sightly.js.async.AsyncContainer;
-import org.apache.sling.scripting.sightly.js.async.UnaryCallback;
-import org.apache.sling.scripting.sightly.js.loop.EventLoopInterop;
-import org.apache.sling.scripting.sightly.js.rhino.JsUtils;
-
-/**
- * The JavaScript {@code use} function
- */
-public class UseFunction extends BaseFunction {
-
-    private final DependencyResolver dependencyResolver;
-    private final Scriptable thisObj;
-
-    public UseFunction(DependencyResolver dependencyResolver, Bindings arguments) {
-        this.dependencyResolver = dependencyResolver;
-        this.thisObj = createThisBinding(arguments);
-    }
-
-    @Override
-    public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
-        Function function;
-        List<String> depNames;
-        if (args.length == 0) {
-            throw new IllegalArgumentException("Not enough arguments for use");
-        } else if (args.length == 1) {
-            function = decodeCallback(args[0]);
-            depNames = Collections.emptyList();
-        } else {
-            function = decodeCallback(args[1]);
-            depNames = decodeDepNames(args[0]);
-        }
-        return use(depNames, function, cx, scope);
-    }
-
-    private Object use(List<String> depNames, final Function callback, final Context cx, final Scriptable scope) {
-        final AsyncContainer asyncContainer = new AsyncContainer();
-        if (depNames.isEmpty()) {
-            callImmediate(callback, asyncContainer, cx, scope);
-        } else {
-            final int[] counter = {depNames.size()};
-            final Object[] dependencies = new Object[depNames.size()];
-            for (int i = 0; i < depNames.size(); i++) {
-                final int dependencyPos = i;
-                dependencyResolver.resolve(depNames.get(i), new UnaryCallback() {
-                    @Override
-                    public void invoke(Object arg) {
-                        counter[0]--;
-                        dependencies[dependencyPos] = arg;
-                        if (counter[0] == 0) {
-                            Object result = JsUtils.callFn(callback, cx, scope, thisObj, dependencies);
-                            asyncContainer.complete(result);
-                        }
-                    }
-                });
-            }
-        }
-        return asyncContainer;
-    }
-
-    private void callImmediate(final Function callback, final AsyncContainer asyncContainer, final Context cx, final Scriptable scope) {
-        EventLoopInterop.schedule(cx, new Runnable() {
-            @Override
-            public void run() {
-                Object value = JsUtils.callFn(callback, cx, scope, thisObj, new Object[0]);
-                asyncContainer.complete(value);
-            }
-        });
-    }
-
-    private Function decodeCallback(Object obj) {
-        if (!(obj instanceof Function)) {
-            throw new IllegalArgumentException("No callback argument supplied");
-        }
-        return (Function) obj;
-    }
-
-    private List<String> decodeDepNames(Object obj) {
-        if (obj instanceof NativeArray) {
-            return decodeDepArray((NativeArray) obj);
-        }
-        return Collections.singletonList(jsToString(obj));
-    }
-
-    private List<String> decodeDepArray(NativeArray nativeArray) {
-        int depLength = (int) nativeArray.getLength();
-        List<String> depNames = new ArrayList<String>(depLength);
-        for (int i = 0; i < depLength; i++) {
-            String depName = jsToString(nativeArray.get(i, nativeArray));
-            depNames.add(depName);
-        }
-        return depNames;
-    }
-
-    private String jsToString(Object obj) {
-        return (String) Context.jsToJava(obj, String.class);
-    }
-
-    private Scriptable createThisBinding(Bindings arguments) {
-        NativeObject nativeObject = new NativeObject();
-        for (Map.Entry<String, Object> entry : arguments.entrySet()) {
-            ScriptableObject.putProperty(nativeObject, entry.getKey(), entry.getValue());
-        }
-        return nativeObject;
-    }
-}
-- 
2.1.2

