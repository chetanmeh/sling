/* JavaCC grammar for the SLING-5355 ACL definitions language
 * See https://javacc.java.net/doc/docindex.html for the JavaCC docs
 */
 
options
{
    LOOKAHEAD=2;
    STATIC=false;
}

PARSER_BEGIN(ACLDefinitions)

package org.apache.sling.acldef.parser;

import java.util.List;
import java.util.ArrayList;

import org.apache.sling.acldef.parser.operations.*;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

public class ACLDefinitions
{
}

PARSER_END(ACLDefinitions)

SKIP :
{
    " "
|   "\r"
|   "\t"
|   < COMMENT: "#" (~["\n"])* "\n" >
}

TOKEN:
{
    < SET: "set" >
|   < ACL: "ACL" >
|   < ON: "on" >
|   < REMOVE: "remove" >
|   < ALLOW: "allow" >
|   < DENY: "deny" >
|   < FOR: "for" >
|   < CREATE: "create" >
|   < DELETE: "delete" >
|   < SERVICE: "service" >
|   < END: "end" >
|   < USER: "user" >
|   < USERNAME: (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_" | "-")+ >
|   < COMMA: "," >
|   < STAR: "*" >
|   < PRIVILEGE_NAME: (["a"-"z"] | ["A"-"Z"])+ ":" (["a"-"z"] | ["A"-"Z"])+ >
|   < PATH: "/" (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | ["-"] | ["_"] | ["."]) + >
|   < EOL: "\n" >
}

List<Operation> parse() :
{}
{
    { final List<Operation> result = new ArrayList<Operation>(); }
    
    ( serviceUserStatement(result) | setAclStatement(result) | blankLine() ) * <EOF>
    
    { return result; }
}

void blankLine() :
{}
{
    <EOL>
}

List<String> usernamesList() :
{
    Token t = null;
    List<String> usernames = new ArrayList<String>(); 
    
}
{
    t = <USERNAME> { usernames.add(t.image); } 
    ( <COMMA> t = <USERNAME> { usernames.add(t.image); } )* 
    { return usernames; }
}

void serviceUserStatement(List<Operation> result) :
{
    Token t;
    List<String> usernames;
}
{
    (t=<CREATE> | t=<DELETE>) 
    <SERVICE> <USER> 
    usernames = usernamesList() 
    (<EOL> | <EOF>)
    
    {
        for(String username : usernames) {
            if(CREATE == t.kind) {
                result.add(new CreateServiceUser(username));
            } else {
                result.add(new DeleteServiceUser(username));
            }
        } 
    }
}

List<String> privilegesList() :
{
    Token t = null;
    List<String> priv = new ArrayList<String>(); 
    
}
{
    t = <PRIVILEGE_NAME> { priv.add(t.image); } 
    ( <COMMA> t = <PRIVILEGE_NAME> { priv.add(t.image); } )* 
    { return priv; }
}

List<String> pathsList() :
{
    Token t = null;
    List<String> paths = new ArrayList<String>(); 
    
}
{
    t = <PATH> { paths.add(t.image); } 
    ( <COMMA> t = <PATH> { paths.add(t.image); } )* 
    { return paths; }
}

void setAclStatement(List<Operation> result) :
{
    List<String> paths;
    List<AclLine> lines = new ArrayList<AclLine>();
} 
{
    <SET> <ACL> <ON> 
    paths = pathsList() <EOL>
    ( removeStarLine(lines) ) ?
    ( privilegesOperationLine(lines) | blankLine() ) +
    <END> 
    ( <EOL> | <EOF> )
    
    {
        result.add(new SetAcl(paths, lines));
    }
}

void removeStarLine(List<AclLine> lines) : 
{
    List<String> usernames;
}
{
    <REMOVE> <STAR> 
    <FOR> usernames = usernamesList() 
    <EOL>
    
    { 
        lines.add(new AclLine(AclLine.Action.REMOVE_ALL, null, usernames)); 
    }
}

void privilegesOperationLine(List<AclLine> lines) :
{
    Token t;
    List<String> privileges;
    List<String> usernames;
}
{
    ( t = <REMOVE> | t = <ALLOW> | t = <DENY> ) 
    privileges = privilegesList() 
    <FOR> usernames = usernamesList() 
    <EOL>
    
    { 
        AclLine.Action a = AclLine.Action.REMOVE_ALL;
        if(t.kind == REMOVE) {
            a = AclLine.Action.REMOVE;
        } else if(t.kind == ALLOW) {
            a = AclLine.Action.ALLOW;
        } else if(t.kind == DENY) {
            a = AclLine.Action.DENY;
        } else {
            throw new IllegalStateException("Unexpected token kind " + t.kind);
        }
        lines.add(new AclLine(a, privileges, usernames)); 
    }
}