Index: pom.xml
===================================================================
--- pom.xml	(Revision 1570099)
+++ pom.xml	(Arbeitskopie)
@@ -50,6 +50,56 @@
     <build>
         <plugins>
             <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>compile</phase>
+                        <configuration>
+                            <target>
+                                <property name="maven_compile_classpath"
+                                    refid="maven.compile.classpath" />
+
+                                <delete
+                                    file="${project.build.outputDirectory}/org/apache/sling/engine/impl/SlingHttpServletRequestImpl3.class" />
+                                <delete
+                                    file="${project.build.outputDirectory}/org/apache/sling/engine/impl/helper/ExternalServletContextWrapper3.class" />
+                                <delete
+                                    file="${project.build.outputDirectory}/org/apache/sling/engine/impl/helper/SlingServletContext3.class" />
+                                <delete
+                                    file="${project.build.outputDirectory}/org/apache/sling/engine/impl/parameters/ParameterSupportHttpServletRequestWrapper3.class" />
+
+                                <javac
+                                    srcdir="${basedir}/src/main/java-servlet3"
+                                    destdir="${project.build.outputDirectory}"
+                                    encoding="${project.build.sourceEncoding}"
+                                    target="1.5"
+                                    source="1.5"
+                                    includeantruntime="false"
+                                >
+                                    <classpath
+                                        path="${javax.servlet:javax.servlet-api:jar}:${maven_compile_classpath}" />
+                                </javac>
+
+                            </target>
+                        </configuration>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <dependencies>
+                    <dependency>
+                        <groupId>com.sun</groupId>
+                        <artifactId>tools</artifactId>
+                        <version>1.5.0</version>
+                        <scope>system</scope>
+                        <systemPath>${java.home}/../lib/tools.jar</systemPath>
+                    </dependency>
+                </dependencies>
+            </plugin>
+            <plugin>
                 <groupId>org.apache.felix</groupId>
                 <artifactId>maven-scr-plugin</artifactId>
             </plugin>
@@ -60,9 +110,9 @@
                 <configuration>
                     <instructions>
                         <Export-Package>
-                            org.apache.sling.engine;version=2.1,
-                            org.apache.sling.engine.servlets;version=2.0.6,
-                            org.apache.sling.engine.jmx;version=1.0
+                            org.apache.sling.engine;version=2.1;provide:=true,
+                            org.apache.sling.engine.servlets;version=2.0.6;provide:=true,
+                            org.apache.sling.engine.jmx;version=1.0;provide:=true
                         </Export-Package>
                         <Private-Package>
                             org.apache.sling.engine.impl,
@@ -69,12 +119,9 @@
                             org.apache.sling.engine.impl.*
                         </Private-Package>
                         <Import-Package>
-                            org.apache.commons.fileupload;version=1.2,
-                            org.apache.commons.fileupload.disk;version=1.2,
-                            org.apache.commons.fileupload.portlet;version=1.2,
-                            org.apache.commons.fileupload.servlet;version=1.2,
+                            javax.servlet;javax.servlet.http;version="[2.3,4)",
+                            javax.servlet.descriptor;version="[2.6,4)";resolution:=optional,
                             org.osgi.service.useradmin;
-                            javax.portlet;
                             org.apache.commons.math.*;resolution:=optional,
                             *
                         </Import-Package>
@@ -100,7 +147,7 @@
         <dependency>
             <groupId>org.apache.sling</groupId>
             <artifactId>org.apache.sling.api</artifactId>
-            <version>2.1.0</version>
+            <version>2.5.1-SNAPSHOT</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
@@ -124,27 +171,21 @@
         <dependency>
             <groupId>org.apache.sling</groupId>
             <artifactId>org.apache.sling.commons.osgi</artifactId>
-            <version>2.0.2-incubator</version>
+            <version>2.1.0</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
+            <groupId>commons-fileupload</groupId>
+            <artifactId>commons-fileupload</artifactId>
+            <version>1.3</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
             <groupId>javax.servlet</groupId>
             <artifactId>servlet-api</artifactId>
             <version>2.5</version>
         </dependency>
         <dependency>
-            <groupId>commons-collections</groupId>
-            <artifactId>commons-collections</artifactId>
-            <version>3.2.1</version>
-            <scope>provided</scope>
-        </dependency>
-        <dependency>
-            <groupId>commons-fileupload</groupId>
-            <artifactId>commons-fileupload</artifactId>
-            <version>1.2.2</version>
-            <scope>provided</scope>
-        </dependency>
-        <dependency>
             <groupId>org.osgi</groupId>
             <artifactId>org.osgi.core</artifactId>
         </dependency>
@@ -199,6 +240,14 @@
             <version>1.0</version>
             <scope>test</scope>
         </dependency>
+
+        <!-- Servlet API 3 dependency required for the ANT build and must 
+            remain at the end of the dependencies ! -->
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>javax.servlet-api</artifactId>
+            <version>3.0.1</version>
+        </dependency>
     </dependencies>
     <profiles>
         <profile>
Index: src/main/java/org/apache/sling/engine/impl/SlingHttpContext.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/SlingHttpContext.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/SlingHttpContext.java	(Arbeitskopie)
@@ -20,11 +20,8 @@
 
 import java.io.IOException;
 import java.net.URL;
-import java.util.Enumeration;
-import java.util.Map;
 
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.sling.auth.core.AuthenticationSupport;
@@ -119,32 +116,8 @@
 
             // SLING-559: ensure correct parameter handling according to
             // ParameterSupport
-            request = new HttpServletRequestWrapper(request) {
-                @Override
-                public String getParameter(String name) {
-                    return getParameterSupport().getParameter(name);
-                }
+            request = ParameterSupport.getParameterSupportRequestWrapper(request);
 
-                @Override
-                public Map<String, String[]> getParameterMap() {
-                    return getParameterSupport().getParameterMap();
-                }
-
-                @Override
-                public Enumeration<String> getParameterNames() {
-                    return getParameterSupport().getParameterNames();
-                }
-
-                @Override
-                public String[] getParameterValues(String name) {
-                    return getParameterSupport().getParameterValues(name);
-                }
-
-                private ParameterSupport getParameterSupport() {
-                    return ParameterSupport.getInstance(getRequest());
-                }
-            };
-
             return authenticator.handleSecurity(request, response);
 
         }
Index: src/main/java/org/apache/sling/engine/impl/SlingHttpServletRequestImpl.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/SlingHttpServletRequestImpl.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/SlingHttpServletRequestImpl.java	(Arbeitskopie)
@@ -185,6 +185,13 @@
     }
 
     /**
+     * @see org.apache.sling.api.SlingHttpServletRequest#getRequestParameterList()
+     */
+    public List<RequestParameter> getRequestParameterList() {
+        return this.getParameterSupport().getRequestParameterList();
+    }
+
+    /**
      * @see org.apache.sling.api.SlingHttpServletRequest#getCookie(java.lang.String)
      */
     public Cookie getCookie(String name) {
Index: src/main/java/org/apache/sling/engine/impl/SlingMainServlet.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/SlingMainServlet.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/SlingMainServlet.java	(Arbeitskopie)
@@ -56,7 +56,7 @@
 import org.apache.sling.engine.impl.filter.ServletFilterManager;
 import org.apache.sling.engine.impl.helper.RequestListenerManager;
 import org.apache.sling.engine.impl.helper.SlingServletContext;
-import org.apache.sling.engine.impl.parameters.ParameterSupport;
+import org.apache.sling.engine.impl.helper.SlingServletContext3;
 import org.apache.sling.engine.impl.request.RequestData;
 import org.apache.sling.engine.impl.request.RequestHistoryConsolePlugin;
 import org.apache.sling.engine.jmx.RequestProcessorMBean;
@@ -108,7 +108,6 @@
     @Property(unbounded=PropertyUnbounded.ARRAY)
     private static final String PROP_TRACK_PATTERNS_REQUESTS = "sling.store.pattern.requests";
 
-    @Property
     private static final String PROP_DEFAULT_PARAMETER_ENCODING = "sling.default.parameter.encoding";
 
     @Reference
@@ -374,8 +373,14 @@
         RequestData.setSlingMainServlet(this);
 
         // configure default request parameter encoding
-        ParameterSupport.setDefaultParameterEncoding(OsgiUtil.toString(
-            componentConfig.get(PROP_DEFAULT_PARAMETER_ENCODING), null));
+        // log a message if such configuration exists ....
+        if (componentConfig.get(PROP_DEFAULT_PARAMETER_ENCODING) != null) {
+            log.warn("Configure default request parameter encoding with 'org.apache.sling.parameters.config' configuration; the property "
+                + PROP_DEFAULT_PARAMETER_ENCODING
+                + "="
+                + componentConfig.get(PROP_DEFAULT_PARAMETER_ENCODING)
+                + " is ignored");
+        }
 
         // register the servlet and resources
         try {
@@ -392,7 +397,11 @@
 
         // now that the sling main servlet is registered with the HttpService
         // and initialized we can register the servlet context
-        slingServletContext = new SlingServletContext(bundleContext, this);
+        if (getServletContext() == null || getServletContext().getMajorVersion() < 3) {
+            slingServletContext = new SlingServletContext(bundleContext, this);
+        } else {
+            slingServletContext = new SlingServletContext3(bundleContext, this);
+        }
 
         // register render filters already registered after registration with
         // the HttpService as filter initialization may cause the servlet
Index: src/main/java/org/apache/sling/engine/impl/adapter/SlingServletRequestAdapter.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/adapter/SlingServletRequestAdapter.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/adapter/SlingServletRequestAdapter.java	(Arbeitskopie)
@@ -101,12 +101,12 @@
     }
 
     @Override
-    public Enumeration<?> getHeaderNames() {
+    public Enumeration<String> getHeaderNames() {
         return request.getHeaderNames();
     }
 
     @Override
-    public Enumeration<?> getHeaders(String name) {
+    public Enumeration<String> getHeaders(String name) {
         return request.getHeaders(name);
     }
 
@@ -207,7 +207,7 @@
     }
 
     @Override
-    public Enumeration<?> getAttributeNames() {
+    public Enumeration<String> getAttributeNames() {
         return request.getAttributeNames();
     }
 
@@ -237,7 +237,7 @@
     }
 
     @Override
-    public Enumeration<?> getLocales() {
+    public Enumeration<Locale> getLocales() {
         return request.getLocales();
     }
 
@@ -247,12 +247,12 @@
     }
 
     @Override
-    public Map<?, ?> getParameterMap() {
+    public Map<String, String[]> getParameterMap() {
         return request.getParameterMap();
     }
 
     @Override
-    public Enumeration<?> getParameterNames() {
+    public Enumeration<String> getParameterNames() {
         return request.getParameterNames();
     }
 
Index: src/main/java/org/apache/sling/engine/impl/helper/ExternalServletContextWrapper.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/helper/ExternalServletContextWrapper.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/helper/ExternalServletContextWrapper.java	(Arbeitskopie)
@@ -47,104 +47,108 @@
         this.delegate = sc;
     }
 
+    protected final ServletContext getServletContext() {
+        return delegate;
+    }
+
     public ServletContext getContext(String s) {
-        return delegate.getContext(s);
+        return getServletContext().getContext(s);
     }
 
     public int getMajorVersion() {
-        return delegate.getMajorVersion();
+        return getServletContext().getMajorVersion();
     }
 
     public int getMinorVersion() {
-        return delegate.getMinorVersion();
+        return getServletContext().getMinorVersion();
     }
 
     public String getMimeType(String s) {
-        return delegate.getMimeType(s);
+        return getServletContext().getMimeType(s);
     }
 
     public Set getResourcePaths(String s) {
-        return delegate.getResourcePaths(s);
+        return getServletContext().getResourcePaths(s);
     }
 
     public URL getResource(String s) throws MalformedURLException {
-        return delegate.getResource(s);
+        return getServletContext().getResource(s);
     }
 
     public InputStream getResourceAsStream(String s) {
-        return delegate.getResourceAsStream(s);
+        return getServletContext().getResourceAsStream(s);
     }
 
     public RequestDispatcher getRequestDispatcher(String s) {
-        return new RequestDispatcherWrapper(delegate.getRequestDispatcher(s));
+        return new RequestDispatcherWrapper(getServletContext().getRequestDispatcher(s));
     }
 
     public RequestDispatcher getNamedDispatcher(String s) {
-        return new RequestDispatcherWrapper(delegate.getNamedDispatcher(s));
+        return new RequestDispatcherWrapper(getServletContext().getNamedDispatcher(s));
     }
 
     public Servlet getServlet(String s) throws ServletException {
-        return delegate.getServlet(s);
+        return getServletContext().getServlet(s);
     }
 
     public Enumeration getServlets() {
-        return delegate.getServlets();
+        return getServletContext().getServlets();
     }
 
     public Enumeration getServletNames() {
-        return delegate.getServletNames();
+        return getServletContext().getServletNames();
     }
 
     public void log(String s) {
-        delegate.log(s);
+        getServletContext().log(s);
     }
 
     public void log(Exception exception, String s) {
-        delegate.log(exception, s);
+        getServletContext().log(exception, s);
     }
 
     public void log(String s, Throwable throwable) {
-        delegate.log(s, throwable);
+        getServletContext().log(s, throwable);
     }
 
     public String getRealPath(String s) {
-        return delegate.getRealPath(s);
+        return getServletContext().getRealPath(s);
     }
 
     public String getServerInfo() {
-        return delegate.getServerInfo();
+        return getServletContext().getServerInfo();
     }
 
     public String getInitParameter(String s) {
-        return delegate.getInitParameter(s);
+        return getServletContext().getInitParameter(s);
     }
 
     public Enumeration getInitParameterNames() {
-        return delegate.getInitParameterNames();
+        return getServletContext().getInitParameterNames();
     }
 
     public Object getAttribute(String s) {
-        return delegate.getAttribute(s);
+        return getServletContext().getAttribute(s);
     }
 
     public Enumeration getAttributeNames() {
-        return delegate.getAttributeNames();
+        return getServletContext().getAttributeNames();
     }
 
     public void setAttribute(String s, Object obj) {
-        delegate.setAttribute(s, obj);
+        getServletContext().setAttribute(s, obj);
     }
 
     public void removeAttribute(String s) {
-        delegate.removeAttribute(s);
+        getServletContext().removeAttribute(s);
     }
 
     public String getServletContextName() {
-        return delegate.getServletContextName();
+        return getServletContext().getServletContextName();
     }
 
     public String getContextPath() {
-        return delegate.getContextPath();
+        return getServletContext().getContextPath();
     }
 
     static class RequestDispatcherWrapper implements RequestDispatcher {
@@ -200,5 +204,4 @@
         }
 
     }
-
 }
Index: src/main/java/org/apache/sling/engine/impl/helper/SlingFilterConfig.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/helper/SlingFilterConfig.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/helper/SlingFilterConfig.java	(Arbeitskopie)
@@ -76,8 +76,8 @@
     /**
      * @see javax.servlet.FilterConfig#getInitParameterNames()
      */
-    public Enumeration<?> getInitParameterNames() {
-        List<?> keys = Arrays.asList(reference.getPropertyKeys());
+    public Enumeration<String> getInitParameterNames() {
+        List<String> keys = Arrays.asList(reference.getPropertyKeys());
         return Collections.enumeration(keys);
     }
 
Index: src/main/java/org/apache/sling/engine/impl/helper/SlingServletContext.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/helper/SlingServletContext.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/helper/SlingServletContext.java	(Arbeitskopie)
@@ -30,7 +30,6 @@
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
 import javax.servlet.ServletContext;
-
 import org.apache.sling.engine.impl.SlingMainServlet;
 import org.apache.sling.engine.impl.request.SlingRequestDispatcher;
 import org.osgi.framework.BundleContext;
@@ -40,10 +39,10 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * The <code>SlingServletContext</code> class is the
- * <code>ServletContext</code> which is registered as a service usable by
- * servlets and helpers inside Sling. Most methods just call into the servlet
- * context in which the {@link SlingMainServlet} is running.
+ * The <code>SlingServletContext</code> class is the <code>ServletContext</code>
+ * which is registered as a service usable by servlets and helpers inside Sling.
+ * Most methods just call into the servlet context in which the
+ * {@link SlingMainServlet} is running.
  * <dl>
  * <dt><b>MIME Type Mapping</b></dt>
  * <dd>Just forwards to the servlet context of the {@link SlingMainServlet} for
@@ -62,9 +61,12 @@
  * <dd>Initialization parameters and context attributes are shared with the
  * servlet context in which the {@link SlingMainServlet} is running.</dd>
  * <dt><b>Logging</b></dt>
- * <dd>Logging is diverted to a logger whose name is the fully qualified name
- * of this class.</dd>
+ * <dd>Logging is diverted to a logger whose name is the fully qualified name of
+ * this class.</dd>
  * </dl>
+ * <p>
+ * This class implements the Servlet API 2.5 {@code ServletContext} interface.
+ * See {@link SlingServletContext3} for the Servlet API 3 implementation.
  */
 public class SlingServletContext implements ServletContext {
 
@@ -408,7 +410,7 @@
         if (delegatee != null) {
             ServletContext otherContext = delegatee.getContext(uripath);
             if (otherContext != null && otherContext != delegatee) {
-                return new ExternalServletContextWrapper(otherContext);
+                return wrapServletContext(otherContext);
             }
         }
 
@@ -423,14 +425,14 @@
 
     /** Returns an empty enumeration as defined in Servlet API 2.4 */
     @Deprecated
-    public Enumeration<?> getServletNames() {
-        return Collections.enumeration(Collections.emptyList());
+    public Enumeration<String> getServletNames() {
+        return Collections.enumeration(Collections.<String>emptyList());
     }
 
     /** Returns an empty enumeration as defined in Servlet API 2.4 */
     @Deprecated
-    public Enumeration<?> getServlets() {
-        return Collections.enumeration(Collections.emptyList());
+    public Enumeration<Servlet> getServlets() {
+        return Collections.enumeration(Collections.<Servlet>emptyList());
     }
 
     // ---------- internal -----------------------------------------------------
@@ -439,7 +441,11 @@
      * Returns the real servlet context of the servlet container in which the
      * Sling Servlet is running.
      */
-    private ServletContext getServletContext() {
+    protected ServletContext getServletContext() {
         return slingMainServlet.getServletContext();
     }
+
+    protected ServletContext wrapServletContext(ServletContext context) {
+        return new ExternalServletContextWrapper(context);
+    }
 }
Index: src/main/java/org/apache/sling/engine/impl/log/CustomLogFormat.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/log/CustomLogFormat.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/log/CustomLogFormat.java	(Arbeitskopie)
@@ -937,7 +937,7 @@
         }
 
         protected String getValue(RequestLoggerResponse response) {
-            return escape(response.getHeaders(this.headerName));
+            return escape(response.getHeadersString(this.headerName));
         }
     }
 }
Index: src/main/java/org/apache/sling/engine/impl/log/RequestLoggerResponse.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/log/RequestLoggerResponse.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/log/RequestLoggerResponse.java	(Arbeitskopie)
@@ -271,7 +271,7 @@
         return (this.cookies != null) ? (Cookie) this.cookies.get(name) : null;
     }
 
-    public String getHeaders(String name) {
+    public String getHeadersString(String name) {
         // normalize header name to lower case to support case-insensitive
         // headers
         name = name.toLowerCase();
Index: src/main/java/org/apache/sling/engine/impl/request/RequestData.java
===================================================================
--- src/main/java/org/apache/sling/engine/impl/request/RequestData.java	(Revision 1570099)
+++ src/main/java/org/apache/sling/engine/impl/request/RequestData.java	(Arbeitskopie)
@@ -47,6 +47,7 @@
 import org.apache.sling.api.wrappers.SlingHttpServletRequestWrapper;
 import org.apache.sling.api.wrappers.SlingHttpServletResponseWrapper;
 import org.apache.sling.engine.impl.SlingHttpServletRequestImpl;
+import org.apache.sling.engine.impl.SlingHttpServletRequestImpl3;
 import org.apache.sling.engine.impl.SlingHttpServletResponseImpl;
 import org.apache.sling.engine.impl.SlingMainServlet;
 import org.apache.sling.engine.impl.SlingRequestProcessorImpl;
@@ -106,9 +107,11 @@
 
     private static SlingMainServlet SLING_MAIN_SERVLET;
 
+    private static SlingHttpServletRequestFactory REQUEST_FACTORY;
+
     /** The SlingMainServlet used for request dispatching and other stuff */
     private final SlingRequestProcessorImpl slingRequestProcessor;
-    
+
     private final long startTimestamp;
 
     /** The original servlet Servlet Request Object */
@@ -175,19 +178,19 @@
 
     public static void setSlingMainServlet(final SlingMainServlet slingMainServlet) {
         RequestData.SLING_MAIN_SERVLET = slingMainServlet;
+        RequestData.REQUEST_FACTORY = null;
     }
 
     public RequestData(SlingRequestProcessorImpl slingRequestProcessor,
             HttpServletRequest request, HttpServletResponse response) {
         this.startTimestamp = System.currentTimeMillis();
-        
+
         this.slingRequestProcessor = slingRequestProcessor;
 
         this.servletRequest = request;
         this.servletResponse = response;
 
-        this.slingRequest = new SlingHttpServletRequestImpl(this,
-            servletRequest);
+        this.slingRequest = getSlingHttpServletRequestFactory().createRequest(this, this.servletRequest);
         this.slingResponse = new SlingHttpServletResponseImpl(this,
             servletResponse);
 
@@ -550,15 +553,15 @@
     public RequestProgressTracker getRequestProgressTracker() {
         return requestProgressTracker;
     }
-    
+
     public int getPeakRecusionDepth() {
         return peakRecusionDepth;
     }
-    
+
     public int getServletCallCount() {
         return servletCallCounter;
     }
-    
+
     public long getElapsedTimeMsec() {
         return System.currentTimeMillis() - startTimestamp;
     }
@@ -624,4 +627,34 @@
 
         return parameterSupport;
     }
+
+    // SlingHttpServletRequest instance factory
+
+    private static SlingHttpServletRequestFactory getSlingHttpServletRequestFactory() {
+        SlingHttpServletRequestFactory factory = RequestData.REQUEST_FACTORY;
+        if (factory == null) {
+            SlingMainServlet servlet = RequestData.SLING_MAIN_SERVLET;
+            if (servlet == null || servlet.getServletContext() == null
+                || servlet.getServletContext().getMajorVersion() < 3) {
+
+                factory = new SlingHttpServletRequestFactory() {
+                    public SlingHttpServletRequest createRequest(RequestData requestData, HttpServletRequest request) {
+                        return new SlingHttpServletRequestImpl(requestData, request);
+                    }
+                };
+            } else {
+                factory = new SlingHttpServletRequestFactory() {
+                    public SlingHttpServletRequest createRequest(RequestData requestData, HttpServletRequest request) {
+                        return new SlingHttpServletRequestImpl3(requestData, request);
+                    }
+                };
+            }
+            RequestData.REQUEST_FACTORY = factory;
+        }
+        return factory;
+    }
+
+    private static interface SlingHttpServletRequestFactory {
+        SlingHttpServletRequest createRequest(RequestData requestData, HttpServletRequest request);
+    }
 }
Index: src/main/resources/OSGI-INF/metatype/metatype.properties
===================================================================
--- src/main/resources/OSGI-INF/metatype/metatype.properties	(Revision 1570099)
+++ src/main/resources/OSGI-INF/metatype/metatype.properties	(Arbeitskopie)
@@ -57,14 +57,6 @@
 sling.filter.compat.mode.description = This switch controls the handling of \
  servlet filters. By default only filters with a scope property are registered. \
  In compat mode, the scope property is not required.
-sling.default.parameter.encoding.name = Default Parameter Encoding
-sling.default.parameter.encoding.description = The default request parameter \
- encoding used to decode request parameters into strings. If this property is \
- not set the default encoding is "ISO-8859-1" as mandated by the Servlet API \
- spec. This default encoding is used if the "_charset_" request parameter is \
- not set to another (supported) character encoding. Applications being sure \
- to always use the same encoding (e.g. UTF-8) can set this default here and \
- may omit the "_charset_" request parameter.
  
 #
 # Request Loggger Filter
Index: src/test/java/org/apache/sling/engine/impl/parameters/ContainerRequestParameterTest.java
===================================================================
--- src/test/java/org/apache/sling/engine/impl/parameters/ContainerRequestParameterTest.java	(Revision 1570099)
+++ src/test/java/org/apache/sling/engine/impl/parameters/ContainerRequestParameterTest.java	(Arbeitskopie)
@@ -37,7 +37,7 @@
         // encoded LATIN-1 String of UTF-8 encoding
         testInternal("\u00c3\u00b6\u00c3\u00a4\u00c3\u00bc", UTF8, LATIN1);
     }
-    
+
     public void testChangeEncodingUpper() throws UnsupportedEncodingException {
         // runic letter e, katakana letter pa, halfwidth katakana letter no
         // encoded LATIN-1 String of UTF-8 encoding
@@ -46,7 +46,7 @@
 
     private void testInternal(String value, String baseEncoding,
             String targetEncoding) throws UnsupportedEncodingException {
-        ContainerRequestParameter par = new ContainerRequestParameter(value,
+        ContainerRequestParameter par = new ContainerRequestParameter("name", value,
             baseEncoding);
 
         assertEquals(baseEncoding, par.getEncoding());
Index: src/test/java/org/apache/sling/engine/impl/parameters/UtilTest.java
===================================================================
--- src/test/java/org/apache/sling/engine/impl/parameters/UtilTest.java	(Revision 1570099)
+++ src/test/java/org/apache/sling/engine/impl/parameters/UtilTest.java	(Arbeitskopie)
@@ -18,10 +18,15 @@
  */
 package org.apache.sling.engine.impl.parameters;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.util.List;
 
 import junit.framework.TestCase;
 
+import org.apache.sling.api.request.RequestParameter;
+
 public class UtilTest extends TestCase {
 
     private static final String utf8 = "UTF-8";
@@ -63,33 +68,11 @@
         assertEquals(Util.ENCODING_DIRECT, Util.getDefaultFixEncoding());
     }
 
-    public void test_default_fix_encoding_via_ParameterSupport() {
-        assertEquals(Util.ENCODING_DIRECT, Util.getDefaultFixEncoding());
+    public void test_fix_encoding_direct() {
 
-        ParameterSupport.setDefaultParameterEncoding(utf8);
-        assertEquals(utf8, Util.getDefaultFixEncoding());
-
-        ParameterSupport.setDefaultParameterEncoding(Util.ENCODING_DIRECT);
-        assertEquals(Util.ENCODING_DIRECT, Util.getDefaultFixEncoding());
-
-        ParameterSupport.setDefaultParameterEncoding("XX_invalid_encoding_scheme_XX");
-        assertEquals(Util.ENCODING_DIRECT, Util.getDefaultFixEncoding());
-
-        ParameterSupport.setDefaultParameterEncoding(utf8);
-        assertEquals(utf8, Util.getDefaultFixEncoding());
-
-        ParameterSupport.setDefaultParameterEncoding("XX_invalid_encoding_scheme_XX");
-        assertEquals(utf8, Util.getDefaultFixEncoding());
-
-        ParameterSupport.setDefaultParameterEncoding(Util.ENCODING_DIRECT);
-        assertEquals(Util.ENCODING_DIRECT, Util.getDefaultFixEncoding());
-    }
-
-    public void test_fix_encoding_direct() throws UnsupportedEncodingException {
-
         ParameterMap pm = new ParameterMap();
-        pm.addParameter("par", new ContainerRequestParameter(utf8Coded,
-            Util.ENCODING_DIRECT));
+        pm.addParameter(new ContainerRequestParameter("par", utf8Coded,
+            Util.ENCODING_DIRECT), false);
         Util.fixEncoding(pm);
         assertEquals(utf8Coded, pm.getValue("par").getString());
 
@@ -97,10 +80,10 @@
 
     public void test_fix_encoding_charset() {
         ParameterMap pm2 = new ParameterMap();
-        pm2.addParameter("par", new ContainerRequestParameter(utf8Coded,
-            Util.ENCODING_DIRECT));
-        pm2.addParameter("_charset_", new ContainerRequestParameter(utf8,
-            Util.ENCODING_DIRECT));
+        pm2.addParameter(new ContainerRequestParameter("par", utf8Coded,
+            Util.ENCODING_DIRECT), false);
+        pm2.addParameter(new ContainerRequestParameter("_charset_", utf8,
+            Util.ENCODING_DIRECT), false);
         Util.fixEncoding(pm2);
         assertEquals(utf8String, pm2.getValue("par").getString());
     }
@@ -107,11 +90,41 @@
 
     public void test_fix_encoding_configured() {
         ParameterMap pm3 = new ParameterMap();
-        pm3.addParameter("par", new ContainerRequestParameter(utf8Coded,
-            Util.ENCODING_DIRECT));
+        pm3.addParameter(new ContainerRequestParameter("par", utf8Coded,
+            Util.ENCODING_DIRECT), false);
         Util.setDefaultFixEncoding(utf8);
         Util.fixEncoding(pm3);
         assertEquals(utf8String, pm3.getValue("par").getString());
         Util.setDefaultFixEncoding(Util.ENCODING_DIRECT);
     }
+
+    public void test_decode_query() throws IllegalArgumentException, UnsupportedEncodingException, IOException {
+        final ParameterMap map = new ParameterMap();
+        final String query = "a=1&b=2&c=3";
+        Util.parseQueryString(new ByteArrayInputStream(query.getBytes(Util.ENCODING_DIRECT)), Util.ENCODING_DIRECT, map, false);
+
+        assertEquals(3, map.size());
+
+        List<RequestParameter> pars = map.getRequestParameterList();
+        assertEquals(3, pars.size());
+        assertEquals("a", pars.get(0).getName());
+        assertEquals("1", pars.get(0).getString());
+        assertEquals("b", pars.get(1).getName());
+        assertEquals("2", pars.get(1).getString());
+        assertEquals("c", pars.get(2).getName());
+        assertEquals("3", pars.get(2).getString());
+    }
+
+    public void test_getParameter_with_space() throws Exception {
+        final ParameterMap map = new ParameterMap();
+        final String query = "cmsaction=createPage&templateName=/apps/geometrixx/templates/contentpage"
+            + "&label=&title=Some Page&parentPath=/content/geometrixx";
+        Util.parseQueryString(new ByteArrayInputStream(query.getBytes(Util.ENCODING_DIRECT)), Util.ENCODING_DIRECT,
+            map, false);
+        assertEquals("createPage", map.getStringValue("cmsaction"));
+        assertEquals("/apps/geometrixx/templates/contentpage", map.getStringValue("templateName"));
+        assertEquals("", map.getStringValue("label"));
+        assertEquals("Some Page", map.getStringValue("title"));
+        assertEquals("/content/geometrixx", map.getStringValue("parentPath"));
+    }
 }
